/*
Navicat MySQL Data Transfer

Source Server         : prod
Source Server Version : 50562
Source Host           : 106.55.157.83:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50562
File Encoding         : 65001

Date: 2020-06-30 12:04:12
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for b_article
-- ----------------------------
DROP TABLE IF EXISTS `b_article`;
CREATE TABLE `b_article` (
  `article_id` int(11) NOT NULL AUTO_INCREMENT,
  `title` char(255) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `class_id` int(11) DEFAULT NULL,
  `is_top` tinyint(1) DEFAULT '0',
  `read_count` int(11) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `poll_count` int(11) DEFAULT '0',
  `cover_url` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`article_id`),
  KEY `class_id` (`class_id`),
  CONSTRAINT `b_article_ibfk_1` FOREIGN KEY (`class_id`) REFERENCES `b_class` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=71 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of b_article
-- ----------------------------
INSERT INTO `b_article` VALUES ('16', 'vue 指令', '44', '1', '1', '26', '2020-05-14 19:56:42', '2020-06-29 15:22:39', '0', '/public/uploads/5ba338b158474650.jpg');
INSERT INTO `b_article` VALUES ('18', 'Vuex辅助函数', '44', '1', '1', '7', '2020-05-15 12:04:04', '2020-06-29 08:16:09', '0', '/public/uploads/5ba338b158474650.jpg');
INSERT INTO `b_article` VALUES ('19', '链表结构', '44', '1', '1', '7', '2020-05-15 12:05:03', '2020-06-30 03:53:04', '0', '/public/uploads/261d3a5215d7dba12b086161c17bb697.jpeg');
INSERT INTO `b_article` VALUES ('20', 'js弹力器', '44', '1', '1', '10', '2020-05-15 12:06:29', '2020-06-30 03:45:34', '0', '/public/uploads/timg.jpg');
INSERT INTO `b_article` VALUES ('21', 'Push API实现消息推送', '44', '1', '1', '8', '2020-05-15 12:23:14', '2020-06-30 03:47:05', '0', '/public/uploads/261d3a5215d7dba12b086161c17bb697.jpeg');
INSERT INTO `b_article` VALUES ('22', 'vue-bus 组件实现非父子组件通信(及需注意地方)', '44', '1', '1', '4', '2019-05-01 09:33:24', '2020-06-30 03:53:21', '0', '/public/uploads/5ba338b158474650.jpg');
INSERT INTO `b_article` VALUES ('23', 'js 观察者模式', '44', '1', '0', '5', '2020-05-15 12:26:55', '2020-06-30 03:52:09', '0', '/public/uploads/u=4180093578,3682525324&fm=193.jpg');
INSERT INTO `b_article` VALUES ('24', 'vuex', '44', '1', '1', '4', '2020-05-15 13:11:52', '2020-06-30 03:54:07', '0', 'https://img2.mukewang.com/szimg/5ec2043b09a0ed9312000676-360-202.png');
INSERT INTO `b_article` VALUES ('26', 'node代理配置', '44', '2', '0', '4', '2020-05-15 13:16:50', '2020-06-30 03:52:54', '0', '/public/uploads/u=1047114984,3765510098&fm=26&gp=0.jpg');
INSERT INTO `b_article` VALUES ('37', 'npm安装模块', '44', '15', '0', '3', '2020-06-23 09:36:10', '2020-06-30 03:49:02', '0', '/public/uploads/u=337418265,3258441697&fm=193.jpg');
INSERT INTO `b_article` VALUES ('38', 'nodejs express获取不了用户的外网ip地址解决方法', '44', '5', '0', '4', '2020-06-23 09:37:08', '2020-06-30 03:50:05', '0', '/public/uploads/36b5b11af6cd688c13aa2dabd374a32b_005M94J9ly4fpj08nwdv1j30g608it8i.jpg');
INSERT INTO `b_article` VALUES ('40', '手写promise', '44', '1', '0', '4', '2020-06-23 09:40:11', '2020-06-30 03:52:33', '0', '/public/uploads/84ae30c406481c699e9e0294838d6852.jpg');
INSERT INTO `b_article` VALUES ('41', 'Vue之自定义指令', '44', '7', '0', '3', '2020-06-23 09:41:18', '2020-06-30 03:52:57', '0', '/public/uploads/5ba338b158474650.jpg');
INSERT INTO `b_article` VALUES ('42', 'js 二叉树', '44', '1', '1', '2', '2020-06-23 09:42:39', '2020-06-30 03:50:21', '0', '/public/uploads/261d3a5215d7dba12b086161c17bb697.jpeg');
INSERT INTO `b_article` VALUES ('44', 'nginx 前后端部署配置', '44', '5', '1', '3', '2020-06-23 11:12:11', '2020-06-30 03:52:26', '0', '/public/uploads/36b5b11af6cd688c13aa2dabd374a32b_005M94J9ly4fpj08nwdv1j30g608it8i.jpg');
INSERT INTO `b_article` VALUES ('48', 'javaScript 文件分片上传思路', '44', '1', '0', '9', '2018-06-23 19:07:15', '2020-06-30 03:53:47', '0', '/public/uploads/84ae30c406481c699e9e0294838d6852.jpg');
INSERT INTO `b_article` VALUES ('49', '自制H5视频播放器', '44', '1', '1', '7', '2017-06-23 18:59:18', '2020-06-30 03:49:51', '0', '/public/uploads/84ae30c406481c699e9e0294838d6852.jpg');
INSERT INTO `b_article` VALUES ('50', '原生javascript上传图片带进度条', '44', '1', '0', '4', '2020-06-23 18:56:46', '2020-06-30 03:50:52', '0', '/public/uploads/84ae30c406481c699e9e0294838d6852.jpg');
INSERT INTO `b_article` VALUES ('51', 'cookie其他域下访问', '44', '1', '0', '3', '2020-06-23 19:00:49', '2020-06-30 03:52:49', '0', '/public/uploads/84ae30c406481c699e9e0294838d6852.jpg');
INSERT INTO `b_article` VALUES ('52', '关于input   [type=file]  的change事件不触发问题', '44', '1', '0', '3', '2020-06-23 19:01:37', '2020-06-30 03:54:26', '0', '/public/uploads/84ae30c406481c699e9e0294838d6852.jpg');
INSERT INTO `b_article` VALUES ('53', 'webpack基本配置', '44', '1', '0', '7', '2020-06-23 19:03:14', '2020-06-30 03:47:22', '0', '/public/uploads/9eb3c72bd44612b96176d43e38e5cf14.jpg');
INSERT INTO `b_article` VALUES ('56', '搭建自己简单的ssr-demo', '44', '1', '0', '3', '2020-06-23 19:05:09', '2020-06-30 03:49:00', '0', '/public/uploads/5ba338b158474650.jpg');
INSERT INTO `b_article` VALUES ('57', 'JQuery无缝轮播', '44', '1', '0', '3', '2017-06-23 19:05:40', '2020-06-30 03:54:05', '0', '/public/uploads/84ae30c406481c699e9e0294838d6852.jpg');
INSERT INTO `b_article` VALUES ('58', '正则表达式修饰符', '44', '1', '0', '3', '2020-06-23 19:06:17', '2020-06-30 03:45:22', '0', '/public/uploads/261d3a5215d7dba12b086161c17bb697.jpeg');
INSERT INTO `b_article` VALUES ('59', '封装图片预加载', '44', '1', '0', '3', '2017-06-23 19:06:45', '2020-06-30 03:48:29', '0', '/public/uploads/84ae30c406481c699e9e0294838d6852.jpg');
INSERT INTO `b_article` VALUES ('60', 'vue中 组件封装v-mode 使用', '44', '1', '1', '4', '2020-06-23 19:07:25', '2020-06-30 03:51:07', '0', '/public/uploads/5ba338b158474650.jpg');
INSERT INTO `b_article` VALUES ('61', 'git操作', '44', '19', '0', '3', '2020-06-23 19:10:15', '2020-06-30 03:52:18', '0', '/public/uploads/timg (2).jpg');
INSERT INTO `b_article` VALUES ('62', 'div水平垂直居中', '44', '17', '0', '3', '2019-06-23 19:10:58', '2020-06-30 03:48:45', '0', '/public/uploads/u=3117196604,665035782&fm=26&gp=0.jpg');
INSERT INTO `b_article` VALUES ('63', 'call()、apply()和bind()的异同', '44', '1', '0', '3', '2017-06-23 19:12:38', '2020-06-30 03:52:44', '0', '/public/uploads/84ae30c406481c699e9e0294838d6852.jpg');
INSERT INTO `b_article` VALUES ('65', 'jquery许愿墙', '44', '1', '0', '4', '2017-06-23 19:15:13', '2020-06-30 03:49:18', '0', '/public/uploads/a20a581f88ca12dd3bf761a5e9f56ec1.jpg');
INSERT INTO `b_article` VALUES ('66', '纵向拖动排序', '44', '1', '0', '3', '2017-06-23 19:17:16', '2020-06-30 03:52:39', '0', '/public/uploads/a20a581f88ca12dd3bf761a5e9f56ec1.jpg');
INSERT INTO `b_article` VALUES ('67', 'javascript原生滑动解锁', '44', '1', '0', '4', '2020-06-23 19:18:22', '2020-06-30 03:46:47', '0', '/public/uploads/261d3a5215d7dba12b086161c17bb697.jpeg');
INSERT INTO `b_article` VALUES ('68', '发布一个自己的NPM包', '44', '5', '0', '5', '2020-06-23 19:25:48', '2020-06-30 03:46:10', '0', '/public/uploads/u=1779279395,2616950993&fm=26&gp=0.jpg');
INSERT INTO `b_article` VALUES ('69', 'mysql 查看当前使用的配置文件my.cnf的方法', '44', '3', '0', '0', '2020-06-30 10:51:12', '2020-06-30 10:51:12', '0', '/public/uploads/3b22337e04ce438248768f9d59941f30_u=3160244586,1161773702&fm=193.jpg');
INSERT INTO `b_article` VALUES ('70', 'mysql配置指定ip可访问', '44', '3', '0', '1', '2020-06-30 11:00:31', '2020-06-30 11:07:50', '0', '/public/uploads/3b22337e04ce438248768f9d59941f30_u=3160244586,1161773702&fm=193.jpg');

-- ----------------------------
-- Table structure for b_article_detail
-- ----------------------------
DROP TABLE IF EXISTS `b_article_detail`;
CREATE TABLE `b_article_detail` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) DEFAULT NULL,
  `content` text,
  `contentHtml` text,
  PRIMARY KEY (`id`),
  KEY `article_id` (`article_id`),
  CONSTRAINT `b_article_detail_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `b_article` (`article_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of b_article_detail
-- ----------------------------
INSERT INTO `b_article_detail` VALUES ('7', '16', '```\n// 和自定义过滤器一样,我们这里定义的是全局指令\nVue.directive(\'focus\',{\n    inserted(el) {\n      el.focus()\n    }\n})\n```\n\n```\n<div id=\'app\'>\n    <input type=\"text\">\n    <input type=\"text\" v-focus placeholder=\"我有v-focus,所以,我获取了焦点\">\n  </div>\n  \n  ```\n  \n ---\n  先总结几个点:\n\n- 使用 Vue.directive()来新建一个全局指令,(指令使用在HTML元素属性上的)\n - Vue.directive第一个参数focus是指令名,指令名在声明的时候,不-需要加 v-\n- 在使用指令的HTML元素上,<input type=\"text\" v-focus  placeholder=\"我有v-focus,所以,我获取了焦点\"/> 我们需要加上 v-.\nVue.directive(\'focus\',{}) 第二个参数是一个对象,对象内部有个 inserted() 的函数,函数有 el 这个参数.\nel 这个参数表示了绑定这个指令的 DOM元素,在这里就是后面那个有 placeholder 的 input\nel 就等价于 document.getElementById(\'el.id\')....\n可以利用 $(el) 无缝连接 jQuery\n\n---\n\n### Vue 指令的声明周期函数\n```\nVue.directive(\'gqs\',{\n    bind() {\n      // 当指令绑定到 HTML 元素上时触发.**只调用一次**\n      console.log(\'bind triggerd\')\n    },\n    inserted() {\n      // 当绑定了指令的这个HTML元素插入到父元素上时触发(在这里父元素是 `div#app`)**.但不保证,父元素已经插入了 DOM 文档.**\n      console.log(\'inserted triggerd\')\n    },\n    updated() {\n      // 所在组件的`VNode`更新时调用.\n      console.log(\'updated triggerd\')\n    },\n    componentUpdated() {\n      // 指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n      console.log(\'componentUpdated triggerd\')\n      \n    },\n    unbind() {\n      // 只调用一次，指令与元素解绑时调用.\n      console.log(\'unbind triggerd\')\n    }\n  })\n  ```', null);
INSERT INTO `b_article_detail` VALUES ('9', '18', '#### mapActions\n\n#### 将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）：\n\n组件中引入：\n```\nimport { mapActions } from \'vuex\'\n\nmethods: {\n\n    ...mapActions([\n\n    \'increment\', // 将 `this.increment()` 映射为 `this.$store.dispatch(\'increment\')`\n    // `mapActions` 也支持载荷：\n    \'incrementBy\' // 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(\'incrementBy\', amount)`\n    ]),\n\n    ...mapActions({\n\n        add: \'increment\' // 将 `this.add()` 映射为 `this.$store.dispatch(\'increment\')`\n    })\n\n}\n```\n\n\n#### mapMutations\n#### 将组件中的 methods 映射为 store.commit 调用（需要在根节点注入store）。\n\n组件中引入：\n```\nimport { mapMutations } from \'vuex\'\nmethods: {\n\n    ...mapMutations([\n\n    \'increment\', // 将 `this.increment()` 映射为 `this.$store.commit(\'increment\')`\n    // `mapMutations` 也支持载荷：\n    \'incrementBy\' // 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(\'incrementBy\', amount)`\n    ]),\n\n    ...mapMutations({\n\n        add: \'increment\' // 将 `this.add()` 映射为 `this.$store.commit(\'increment\')`\n    })\n\n}\n```\n\n在computed中使用mapState：\n\n```\ncomputed: {\n  ...mapState([\'a\', \'b\']),\n}\n```\n\n就可以代替这段代码\n```\ncomputed: {\n  a() {\n    return this.$store.state.a\n  },\n  b() {\n    return this.$store.state.b\n  },\n}\n```\n---\nmapActions的使用\n```\nmethods: {\n  ...mapActions([\'addA\', \'addB\']),\n},\n```\n等价\n```\nmethods: {\n  addA(n) {\n    this.$store.dispatch(\'addA\', n)\n  },\n  addB(n) {\n    this.$store.dispatch(\'addA\', n)\n  },\n}\n```\n\n---\n在computed中添加count的映射：\n\n```\ncomputed: {\n  ...mapGetters([\'count\'])\n}\n```\n等价于：\n```\ncomputed: {\n  count() {\n    return this.$store.getters.count\n  }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n```\nindex.js如下：\n\nimport Vue from \'vue\';\nimport Vuex from \'vuex\';\nVue.use(Vuex);\n\nconst state={//要设置的全局访问的state对象\n  showFooter: true,\n  changableNum:0\n  count: 0\n  //要设置的初始属性值\n};\n\nconst getters = {   //实时监听state值的变化(最新状态)\n  isShow(state) {  //方法名随意,主要是来承载变化的showFooter的值\n    return state.showFooter\n  },\n  getChangedNum(){  //方法名随意,主要是用来承载变化的changableNum的值\n    return state.changebleNum\n  }\n};\n\nconst mutations = {\n  show(state) {   //自定义改变state初始值的方法，这里面的参数除了state之外还可以再传额外的参数(变量或对象);\n    state.showFooter = true;\n  },\n  hide(state) {  //同上\n    state.showFooter = false;\n  },\n  newNum(state,sum){ //同上，这里面的参数除了state之外还传了需要增加的值sum\n    state.changableNum+=sum;\n  }\n};\n\nconst actions = {\n  hideFooter(context) {  //自定义触发mutations里函数的方法，context与store 实例具有相同方法和属性\n    context.commit(\'hide\');\n  },\n  showFooter(context) {  //同上注释\n    context.commit(\'show\');\n  },\n  getNewNum(context,num){   //同上注释，num为要变化的形参\n    context.commit(\'newNum\',num)\n  }\n};\n\nconst store = new Vuex.Store({\n  state,\n  getters,\n  mutations\n});\n\nexport default store;\n\nvue提供了注入机制，就是把我们的store 对象注入到根实例中。vue的根实例就是 new Vue构造函数，然后在所有的子组件中this.$store 来指向store 对象。在index.js 中，我们用export store把store已经暴露出去了，然后直接在main.js中引入store并注入store即可。\n\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from \'vue\'\nimport ElementUI from \'element-ui\'\nimport \'element-ui/lib/theme-chalk/index.css\'\nimport App from \'./App\'\nimport router from \'./router/router.js\'\nimport store from \'./store\'\nimport echarts from \'echarts\'\n\nVue.config.productionTip = false\nVue.use(ElementUI)\nVue.use(echarts)\nVue.prototype.$echarts = echarts\n\n/* eslint-disable no-new */\nnew Vue({\n  el: \'#app\',\n  router,\n  store,\n  components: { App },\n  template: \'<App/>\'\n})\n\n子组件中的computed属性是根据它的依赖自动更新的，所以只要store中的state发生变化，它就会自动变化，在一般情况下子组件中获取store中属性的方式如下：\n\n<template>\n <div>\n  <h3>Count is {{某属性}}</h3>\n </div>\n</template>\n<script>\n export default {\n  computed: {\n   count () {\n    return this.$store.state.某属性\n   }\n  }\n }\n</script>\n\n通过computed属性可以获取到状态值，但是组件中每一个属性（如：count）都是函数，如果有10个，那么就要写10个函数，且重复写10遍return this.$store.state不是很方便。vue 提供了mapState函数，它把state直接映射到我们的组件中。\n\n当然使用mapState之前要先引入它，它两种用法，或接受一个对象，或接受一个数组，其中使用对象的方式又有三种方法。\n\n对象用法如下：\n\n<script>\n import {mapState} from \"vuex\"; // 引入mapState \n export default {\n　　// 下面这三种写法都可以\n  computed: mapState({\n   // 箭头函数可使代码更简练\n    count: state => state.count,\n\n    // 传字符串参数 \'count\' 等同于 `state => state.count`\n    countAlias: \'count\',\n\n    // 为了能够使用 `this` 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) {\n      return state.count + this.localCount\n    }\n  })\n }\n</script>\n\n当映射的计算属性的名称与state的子节点名称相同时，我们也可以给 mapState传一个字符串数组。\n\n<script>\n import {mapState} from \"vuex\";\n \n export default {\n  computed: mapState([ // 数组\n   \"count\"\n  ])\n }\n</script>\n\n如果我们组件内部也有computed属性怎么办？它又不属于mapState，我们可以使用es6中的对象分割语法，把mapState函数生成的对象再分割成一个个的，就像最开始的时候我们一个一个罗列计算属性，有10个属性，我们就写10个函数。\n\n<script>\n import {mapState} from \"vuex\";\n \n export default {\n  computed: {\n       ...mapState([\n           \"count\"\n       ]),\n       getValue(){\n           return 1;\n        }\n    }\n }\n</script>\n\n二、Module中使用mapState、mapGetters、mapActions辅助函数：\n\n在src目录下建立store文件夹：\n\n​\n\n其中：\n\ncollection.js\n\n//collection.js\n\nconst state={\n  collects:[\'hi\'],  //初始化一个colects数组\n  field: \'空天作战任务规划\'\n};\n\nconst getters={\n\n};\n\nconst mutations={\n\n};\n\nconst actions={\n\n};\n\nexport default {\n  namespaced:true,//用于在全局引用此文件里的方法时标识这一个的文件名\n  state,\n  getters,\n  mutations,\n  actions\n}\n\nfooterStatus.js：\n\n//footerStatus.js\n\nconst state={   //要设置的全局访问的state对象\n  name: \'beautiful\',\n  address: \'Hunan Changsha\',\n  school: \'国防科大\',\n  showFooter: true,\n  changableNum:0\n  //要设置的初始属性值\n};\n\nconst getters = {   //实时监听state值的变化(最新状态)\n\n};\n\nconst mutations = {\n  changeSchool(state, value){\n    state.school = value;\n  }\n};\n\nconst actions = {\n  _changeSchool(context, value){\n    context.commit(\'changeSchool\', value)\n  }\n};\n\nexport default {\n  namespaced: true, //用于在全局引用此文里的方法时标识这一个的文件名\n  state,\n  getters,\n  mutations,\n  actions\n}\n\nindex.js：\n\nimport Vue from \'vue\'\nimport Vuex from \'vuex\'\nimport collection from \'./modules/collection\'\nimport footerStatus from \'./modules/footerStatus\'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  modules: {\n    collection,\n    footerStatus\n  }\n})\n\n假如我们想在组件中使用module中的state、getters、mutations、actions，那该如何使用呢？\n\n除了和普通store一样需要在main.js中注入store外，具体方法如下：\n\n<template>\n  <div>\n    <p>name: {{name}}</p>\n    <p>school: {{school}}</p>\n    <p>address: {{address}}</p>\n    <p>field: {{field}}</p>\n    <p>arrList: {{arrList}}</p>\n    <div><button @click=\"changeSchool()\">改变值</button></div>\n  </div>\n</template>\n\n<script>\n  import {mapState, mapGetters} from \'vuex\'\n  export default {\n    data(){\n      return {\n        use: \'vuex高级使用方法\'\n      }\n    },\n    computed: {\n      ...mapState({\n        name: state => state.footerStatus.name,\n        address(state){\n          return state.footerStatus.address;\n        }\n      }),\n      ...mapState(\'footerStatus\', {\n        school: \'school\'\n      }),\n      ...mapState(\'collection\', [\'field\']),\n      _use(){\n        this.use;\n      },\n      ...mapGetters(\'collection\', {\n        arrList: \'renderCollects\'\n      })\n    },\n    methods: {\n      changeSchool(){\n        this.$store.dispatch(\"footerStatus/_changeSchool\", \'北大\');\n      }\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>\n```', null);
INSERT INTO `b_article_detail` VALUES ('10', '19', '```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  \n  <script>\n    // 节点模型\nclass LinkNode {\n  constructor(element, next) {\n    this.element = element;\n    this.next = next;\n  }\n}\n\nclass LinkedList {\n  constructor() {\n    this._head = null;\n    this._size = 0;\n    this._errorBoundary = this._errorBoundary.bind(this);\n    this._getNodeByIndex = this._getNodeByIndex.bind(this);\n    this.append = this.append.bind(this);\n    this.insert = this.insert.bind(this);\n    this.remove = this.remove.bind(this);\n    this.removeAt = this.removeAt.bind(this);\n    this.removeAll = this.removeAll.bind(this);\n    this.getElement = this.getElement.bind(this);\n    this.setIndex = this.setIndex.bind(this);\n    this.indexOf = this.indexOf.bind(this);\n    this.clear = this.clear.bind(this);\n    this.length = this.length.bind(this);\n    this.printf = this.printf.bind(this);\n  }\n\n  // 边界检验\n  _errorBoundary(index) {\n    if (index < 0 || index >= this._size) {\n      throw `超出边界(${0}~${this._size})，目标位置${index}不存在！`;\n    }\n  }\n  // 根据索引获取目标对象\n  _getNodeByIndex(index) {\n    this._errorBoundary(index);\n    debugger\n    let obj = this._head;\n    for (let i = 0; i < index; i++) {\n      debugger\n      obj = obj.next;\n    }\n    return obj;\n  }\n  // 追加节点\n  append(element) {\n    if (this._size === 0) {\n      this._head = new LinkNode(element, null);\n    } else {\n      debugger\n      let obj = this._getNodeByIndex(this._size - 1);\n      obj.next = new LinkNode(element, null);\n    }\n    this._size++;\n  }\n  // 在索引位置插入节点\n  insert(element, index) {\n    debugger\n    if (index === 0) {\n      this._head = new LinkNode(element, this._head);\n    } else {\n      debugger\n      let obj = this._getNodeByIndex(index - 1);\n      obj.next = new LinkNode(element, obj.next);\n    }\n    this._size++;\n  }\n  // 删除第一个匹配到的节点\n  remove(element) {\n    if (this._size < 1) return null;\n\n    if (this._head.element == element) {\n      this._head.element = this._head.next;\n      this._size--;\n      return element;\n    } else {\n      let temp = this._head;\n      while (temp.next) {\n        if (temp.next.element == element) {\n          temp.next = temp.next.next;\n          this._size--;\n          return element;\n        } else {\n          temp = temp.next;\n        }\n      }\n    }\n    return null;\n  }\n  // 删除指定索引节点\n  removeAt(index) {\n    this._errorBoundary(index);\n    let element = null;\n    if (index === 0) {\n      element = this._head.element;\n      this._head = this._head.next;\n    } else {\n      let prev = this._getNodeByIndex(index - 1);\n      element = prev.next.element;\n      prev.next = prev.next.next;\n    }\n    this._size--;\n    return element;\n  }\n  // 删除所有匹配的节点\n  removeAll(element) {\n    // 创建虚拟头节点，\n    let v_head = new LinkNode(null, this._head);\n    let tempNode = v_head;\n    // let tempEle = null;\n    while (tempNode.next) {\n      if (tempNode.next.element == element) {\n        tempNode.next = tempNode.next.next;\n        this._size--;\n        // tempEle = element;\n      } else {\n        tempNode = tempNode.next;\n      }\n    }\n    this._head = v_head.next;\n  }\n  // 获取指定索引的节点信息\n  getElement(index) {\n    return this._getNodeByIndex(index).element;\n  }\n  // 修改指定索引的节点值\n  setIndex(element, index) {\n    this._errorBoundary(index);\n    let obj = this._getNodeByIndex(index);\n    obj.element = element;\n  }\n  // 获取某节点的索引位置\n  indexOf(element) {\n    let obj = this._head;\n    let index = -1;\n    for (let i = 0; i < this._size; i++) {\n      if (obj.element == element) {\n        index = i;\n        break;\n      }\n      obj = obj.next;\n    }\n    return index;\n  }\n  // 清除所有节点\n  clear() {\n    this._head = null;\n    this._size = 0;\n  }\n  // 返回节点长度\n  length() {\n    return this._size;\n  }\n  // 打印节点信息\n  printf() {\n    let obj = this._head;\n    const arr = [];\n    while (obj != null) {\n      arr.push(obj.element);\n      obj = obj.next;\n    }\n    const str = arr;\n    return str || null;\n  }\n}\n  let linkMode = new LinkedList(1)\n  linkMode.append(0)\n  linkMode.append(1)\n  linkMode.append(2)\n  linkMode.append(3)\n  linkMode.insert(\'1000000000000000000\', 1)\n\n  console.log(linkMode.printf())\n  debugger\n    </script>\n</body>\n</html>\n```', null);
INSERT INTO `b_article_detail` VALUES ('11', '20', '弹力球关键逻辑在于当小球当前运动的坐标值到达临界点时再改变递增正负值来改变运动方向\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>弹力球</title>\n</head>\n<body>\n  <div class=\"ball\"></div>\n  <script>\n   \n    let  ball = document.querySelector(\'.ball\')\n    let  ballX = 0;\n    let  ballY = 0\n    let  yv = 10 // 每次运动的X距离\n    let  xv = 20 // 每次运动的Y距离\n    let  WinH = document.documentElement.clientHeight - 100\n    let  WinW = document.documentElement.clientWidth - 100\n    function move () {\n      ballY+= yv\n      ballX+= xv\n       if(ballY >= WinH) {\n        yv=-yv // 关键点将原来的递增值改变为递减\n       }\n       if (ballY <=0) {\n         yv=-yv // 再关键点将原来的递增值改变为递增 负负就是正\n       }\n       if (ballX > WinW) {\n         xv =-xv\n       }\n       if (ballX <= 0) {\n         xv=-xv\n       }\n      ball.style.left = ballX + \'px\'\n      ball.style.top = ballY + \'px\'\n      requestAnimationFrame(move)\n     }\n     requestAnimationFrame(move)\n  </script>\n\n  <style>\n    *{\n      margin: 0;\n      padding: 0;\n    }\n    .ball {\n      position: absolute;\n      width: 100px;\n      height: 100px;\n      background: rgb(219, 22, 22);\n      border-radius: 50%;\n    }\n  </style>\n</body>\n</html>\n```\n', null);
INSERT INTO `b_article_detail` VALUES ('12', '21', '\n\n\n## PWA web Push 消息推送\n\ngit仓库：https://gitee.com/BlockShow/PWA-web-push.git\n\n##### web push 可以用来做什么？\n就是用户订阅了一个站点的 Web Push 服务后 可以做一些跨平台的消息推送，即使用户关闭了浏览器，一旦站点主动发送推送消息，用户都能收到，只要你的电脑是开着的。\n\n\n**PS:在使用webpush的时候 由于受GCM服务的问题，所以在国内使用webpush 基本上无法订阅到推送消息，用户必须翻墙才能发送订阅。**\n\n###### [链接 什么是GCM？](https://firebase.google.com/docs/cloud-messaging) \n----\n\n#### webpush 推送图解：\n\n![image](EE42977C3CE04DDEB8D174857F187F1F)\n\n![image](F1EB138231F84D2A9C1AD127DD094BFB)\n\n\n```\n---\n大致意思就是 先询问用户是否允许发送消息通知用户同意后又客户端发起订阅\n不同的浏览器返回不同PushSubscription对象叫做endpoint每个发起订阅的\n浏览器生成一个唯一的URL，然后将PushSubscription信息存储在自己的数据库中\n最后在发送消息的时候会刚获取到PushSubscription推送给GCM服务端 然后推送给指定客户端浏览器。\n---\n```\n### Push的安全性\n\n```\n在Web Push中服务端会有一对公钥与私钥。客户端持有公钥用来订阅，\n而服务端持有私钥。客户端在订阅时，会将公钥发送给 Push Service\n之后会在代码中演示\n```\n\n#### 实现此功能的的主要2个 API\n\n- Notifications  (**客户端弹框提示**)\n\n```\n语法：\nlet myNotification = new Notification(title, options);\n```\noptions 可选 options对象包含应用于通知的任何自定义设置选项\n\n```\ndir: 显示通知的方向。默认是auto，跟随浏览器语言设置行为，你也可以通过设置ltr和rtl的值来覆盖该行为（虽然大多数浏览器似乎忽略这些设置）\nlang: 通知的语言，如使用代表一个BCP 47语言标签的  DOMString 指定的。请参阅Sitepoint ISO 2字母语言代码页面，以获得简单的参考。\nbadge: 一个 USVString 包含用于表示通知的图像的URL, 当没有足够的空间来显示通知本身时。\nbody: 一个 DOMString 表示通知的正文，将显示在标题下方。\ntag:  一个 DOMString 代表通知的 一个识别标签。\nicon:  一个 USVString 包含要在通知中显示的图标的URL。\nimage: 一个 USVSTring包含要在通知中显示的图像的URL。\ndata: 您想要与通知相关联的任意数据。这可以是任何数据类型。\nvibrate: 一个振动模式 vibration pattern 设备的振动硬件在通知触发时发出。\nrenotify: 一个 Boolean 指定在新通知替换旧通知后是否应通知用户。默认值为false，这意味着它们不会被通知。\nrequireInteraction: 表示通知应保持有效，直到用户点击或关闭它，而不是自动关闭。默认值为false。\n```\n\n\n##### https://developer.mozilla.org/en-US/docs/Web/API/notification/Notification\n\n---\n- Push  (**监听服务端推送事件**)\n    - PushManager // 接口用于操作推送订阅第三方服务器接收通知以及推送通知的请求URL的方法\n    - PushEvent   // ...\n    - PushMessageData // ...\n    - PushSubscription // ...\n    - PushSubscriptionOptions // ...\n\n ##### https://developer.mozilla.org/en-US/docs/Web/API/Push_API 具体用法可以参考 MDN\n\n    \n\nsubscribe() \n用于订阅推送服务。返回一个 Promise 形式的 PushSubscription 对象，\n该对象包含了推送订阅详情。如果当前serviceworker没有已存在的订阅，\n则会创建一个新的推送订阅。\n\n```\n语法：\nPushManager.subscribe(options).then(function(pushSubscription) { ... } );\n\n```\n\n\noptions 参数设置\n\nuserVisibleOnly：布尔值，表示返回的推送订阅将只能被用于对用户可见的消息。在订阅时必须把此项设置为 true，这样当有消息推送给用户时，浏览器会展示一个消息通知，也就是说不存在静默推送。为了让用户可知\n\napplicationServerKey：推送服务器用来向客户端应用发送消息的公钥。该值是应用程序服务器生成的签名密钥对的一部分，可使用在 P-256 曲线上实现的椭圆曲线数字签名（ECDSA）。这里使用的是 VAPID 协议，VAPID 是 Voluntary Application Server Identification （自主应用服务器标识） 的简称。所以需要将 Base64 的公钥转为 Uint8 的数组\n\n---\n\n#### 接下来以实际项目案例来做一个前后端完整的webpush 消息推送开发流程实现细节\n\n项目结构：\n\n```\n.\n├── README.md\n├── app.js      // 程序入口\n├── conf        // 数据配置\n│   └── db.js   \n├── controller  // 控制器\n│   └── saveSub.js  \n├── db\n│   └── mysql.js   //  mysql 连接池\n├── package-lock.json\n├── package.json \n├── router    //  路由\n│   └── index.js\n└── views    // 前端页面\n    ├── getKey.html\n    ├── index.html\n    ├── listpub.html\n    ├── listsub.html\n    ├── public\n    │   └── push.js  // 推送逻辑\n    └── sw.js        //  serverce worker \n```\n---\n首先去firebase 上注册一个开发账号 https://console.firebase.google.com/\n到时候发送推送消息的时候需要一个APP key\n![image](CEBFA77FCF254686B6A4E08A99CEE90B)\n\n\n##### 创建成功以后打开项目设置选项\n![image](FA8673F2C02645D88D9391FE43B98677)\n##### 点击tabs云消息传递 红色的就是你的app Key 到时候会用到\n![image](14D946287F19462D87E1555A3ECADCE0)\n\n\n### 前端部分\n\n---\n 一个是订阅 \n\n![image](713ADACE26A74B97A20E4DAF131C267D)\n---\n一个是发布\n![image](FA10AD6B67674CEC9AE8D1DC3FB60E86)\n\n---\n首先注册sw \n![image](42BE764C6AF64C75915895B7C1382F07)\n\n检查当前检测当前运行环境时候支持 serversworker 和 PushMannage\nPushMannage是检测当前浏览器是否支持第三方服务器接收消息通知的能力。\n注册成功以后询问客户消息通知权限\n---\n- 初始化对话框\n![image](9C97EF2FEE8B4CCAAABB9C26FDF46F0B)\n\n\n\n```\nNotification.requestPermission().then(function(result) { ... });\n```\n![image](B25F527A71F741BF9ED4BDE94E0D4604)\n- 此方法请求用户当前来源的权限以显示通知 返回的result\n    - denied：用户拒绝了通知的显示\n    - granted：用户允许了通知的显示\n    - default：因为不知道用户的选择，所以浏览器的行为与denied时相同\n\n![image](3A05EA000B4B445D95685EE6040C04C5)\n\n\n- 授权成功以后调用pushManager.getSubscription() 用于获取已经存在的push订阅。返回一个Promise，这个Promise包装着push订阅信息的PushSubscription对象。如果没有已经存在的订阅，则返回null\n```\npushManager.getSubscription()\n```\n\n- 当用户点击允许后才能订阅消息推送\n![image](713ADACE26A74B97A20E4DAF131C267D)\n\n- 点击同意发起订阅\n![image](6923356936594FBCB7B98031EBE0E693)\n\n- 这里的this.registration是前面注册 sw 已经挂载到vue对象下所以直接调用this\n```\npushManager.subscribe()\n```\n这个方法中的两个配置参数：userVisibleOnly 和applicationServerKey。\n- userVisibleOnly表明该推送是否需要显性地展示给用户，即推送时是否会有消息提醒。如果没有消息提醒就表明是进行“静默”推送。在Chrome中，必须要将其设置为true，否则浏览器就会在控制台报错\n![image](78EAD692D10747A1A1906C2FE96BC550)\n- applicationServerKey该参数需要Unit8Array类型。因此定义了一个urlBase64ToUint8Array方法将base64的公钥字符串转为Unit8Array这个方法一般都是固定的写法\n- ![image](88B4E7538BD7498AB3C78FB9F077CCF5)\n\n- 向push服务器（即第三方push server）发起订阅。返回一个Promise，这个Promise包装着push订阅信息的PushSubscription对象。如果当前的service worke没有已经存在的订阅，则会创建一个新的push订阅。\n\n- 这里的applicationServerKey  是服务端生成的公钥一般在页面初始化的时候会获取到可以通过后端web-push库来生成稍后会介绍\n\n- 还有一点当调用pushManager.subscribe()这个方法的时候一定要确保当前自己的网络是否已经翻墙否则无法订阅推送\n- 对于消息推送如何在浏览器上调试查看\nChrome 环境下，地址栏输入chrome://gcm-internals/\n---\n- 未翻墙的情况 details 是没有响应的\n![image](66258AFA07C74FF7944D7C10EB726590)\n\n- 翻墙以后\n![image](41D260E27E714DBFA9D92905C50336B6)\n\n- 所以这也是为何在国内webpush 使用的比较少的原因之一\n---\n\n当订阅成功以后promise在then中我们可以得到订阅的相关信息——一个PushSubscription对象 \n![image](6B8C06E8FCA14413BA6DE46ECB59F27C)\n\n- 拿到这个endpoint 之后将发送到服务端进行存储接下来后然后拿到这个订阅信息推送到不同的用户浏览器\n- ![image](7008FB97325040F2873D216CE360C2F2)\n\n在sw中 监听服务端的push事件\n\n![image](63C72F78BE1446B4A1D2AB492E9E06BF)\n\n![image](51E5CB067560421D8CEEFAE8D9817AE1)\n\n### 后端部分\n\n后端开发逻辑\n首先生成公钥和私钥  使用 web-push\n![image](DC4525368DB9410C97B67A2A18E62943)\n![image](D28F5C1D769D4CB491E0C509263751A9)\n\n- 当访问首页服务端生成公钥和私钥 公钥放到客户端 私钥放在服务端\n这里每次访问的时候去生成同步到数据库当中以保证每次订阅的时候私钥和公钥匹配我将公钥直接输显示出来便于查看\n![image](D4C8B27C262845F7A0B3B5583DA78607)\n- 因为假定当前只有一个用户 所以在每次刷新页面的时候都会更新 公钥和秘钥\n\n- 前面提到的当用户同意订阅之后保存当前的的Subscription存储在服务端\n![image](5E69AC9B15214249A6C3B6A604213EAB)\n\n- 这个是数据库中endpint 到时候推送的时候就是这个来识别用户浏览器的\n![image](A2AC37CB26E14E35B6CCCCB76C044F88)\n\n\n- 最后是推送部分了提交到这个接口\n\n![image](C07AFB5DE47E4EF58AAA9BDA0054B959)\n\n这里直接使用web-push 提供的接口方法发起推送值得注意的是 这里需要你的谷歌api key  就是前面提到 firebase 申请到的GCMApiKey\n\n![image](14D946287F19462D87E1555A3ECADCE0)\n```\nwebpush.setGCMAPIKey(\'<Your GCM API Key Here>\');\n```\n- 配置完成后使用web-push的sendNotification接口进行推送了\n- \n![image](A33F9CFF26C24BE290395D89D681BCC0)\n\n此时就会收到服务端的推送了\n![image](5527AF99D63D4016981DB7AFFEA4075D)\n\n- 最后兼容性\n\n![image](DFB19AF86AFC4A6B8F9F9F610395E191)\n\n目前大部分pc浏览器能支持该功能而移动端浏览器普遍还不支持该特性。但是在MacOS上的safari里面是支持该特性的 但是推送方式 苹果有自己的 apple push 但是要实现这个功能必须要去注册成为开发者用户才能使用这个api权限 但是申请苹果的开发个人账号都要98美元 差不多人民币 600-700 快 呵呵！\n\n', null);
INSERT INTO `b_article_detail` VALUES ('13', '22', '##vue-Bus 是 Vue.js 事件中心的一个插件\n#### \n  \n---\n\n###背景\nVue 2.0重新梳理了事件系统，因为基于组件树结构的事件流方式实在是让人难以理解，并且在组件结构扩展的过程中会变得越来越脆弱。虽然依然保留了父子组件间的事件流，但有诸多限制，比如不支持跨多层父子组件通信，也没有解决兄弟组件间的通信问题。Vue 推荐使用一个全局事件中心来分发和管理应用内的所有事件。\n\n1.什么基于组件树结构的事件流方式\n按照我的理解比如你2个组件你需要把A组件的值 传递给B组件, 必然需要B组件依赖A组件,或者是相互依赖，类似一种父子关系或者层级关系，以2个组件其中一个作为父节点就所谓的组件结构树，子组件通过emit去调父组件调方法形成了一个事件流\n\n\n2.为什么使用vue-bus\n组件通信时，我们通常会采用 props + emit 这种方式,如果子组件想把自己的数据传递给父组件，在子组件使用,但当通信双方不是父子组件甚至压根不存在相关联系，当然如果有人说可以用vuex啊,《海贼王》 --罗杰 说过每个人都自己出场的机会，那么vue-bus 也总会有它使用的场景之处。使用vue-bus 组件可以自由相互通信，这样不依赖组件结构树，便于解耦父子组件的关系。\n\n---\n\n## 如何使用vue-bus?\n\n老套路使用NPM 进行安装\n```\n$ npm install vue-bus\n```\n然后在你的工程里 main.js引用就可以了\n```\nimport Vue from \'vue\';\nimport VueBus from \'vue-bus\';\n \nVue.use(VueBus);\n\n```\n\n---\n## 使用及需要注意的地方\n\n\n#### 第一种使用场景 两个组件同时在一个路由下创建组件独立引用\n![图片描述](attimg://article/content/picture/201808/29/152457yyz26qjr71fr781s.jpg)\n\n![图片描述](attimg://article/content/picture/201808/29/152048d7pkch1mzgrfbjr8.jpg)\n\n---\n### 组件A 代码\n\n![图片描述](attimg://article/content/picture/201808/29/152536xocmbwno8m1ecb2p.jpg)\n\n### 组件B 代码\n![图片描述](attimg://article/content/picture/201808/29/152654rcydcr00lrtgyllc.jpg)\n\n\n---\n\n此时A 组件通过一个点击事件将 数据发送给B就得到\n\n![图片描述](attimg://article/content/picture/201808/29/152941z421m20dhmzhhhpa.jpg)\n\n这样正常的使用情况下貌似感觉没问题\n\n---\n\n\n### 第二种场景 两个组件不在同一个路由下或者说异步去加载的情况\n\n比如我现在需要从A组件路由跳转到B组件到路由 此时B 组件还没有被创建 \n![图片描述](attimg://article/content/picture/201808/29/155830pnzkpfanaa6b6w7a.jpg)\n\nA 组件代码\n\n![图片描述](attimg://article/content/picture/201808/29/155954kiiztq37amlmmuqn.jpg)\n\n\n#### 当点击跳转过去当时候并没有收到来A组件的数据\n![图片描述](attimg://article/content/picture/201808/29/160313pqd7h7bz057rq49p.jpg)\n---\n\n原因 ：\n因为在A组件的时候，B组件还没生成无法监听的来自于A组件的事件。这个时候当你A在组件emit事件的时候，B组件其实是没有监听到的。\n\n至于为什么那就谈到vue 生命周期 请看图\n![图片描述](attimg://article/content/picture/201808/29/161314kvbk6guxgs585yz5.jpg)\n\n\n那么要如何才能让B 组件接收到来自A 组件到数据呢？\n那就需要利用到vue 的钩子函数\n![图片描述](attimg://article/content/picture/201808/29/162023tnch58343qqlqb3y.jpg)\n\n#### A 组件代码 \n![图片描述](attimg://article/content/picture/201808/29/162108omu770ysjiv40o7i.jpg)\n\n\n#### 此时B 组件\n![图片描述](attimg://article/content/picture/201808/29/162310bxuumngia8wdriig.jpg)\n\n---\n[color=#f20257]备注（不过此时还没完！需要在B 组件销毁当时候将监听当事情给注销掉不然下一次再进入到B组件到时候会已倍数增加到形式去调用你所监听的方法, 比如下面实际上我跳转了3次而已）[/color]\n\n![图片描述](attimg://article/content/picture/201808/29/163328fi9j1i19yn8tnu1j.jpg)\n\n[color=#ff4753]解决方法(同样利用vue的钩子函数只需要再B组件销毁前将原来的监听的事件给注销掉就可以了)[/color]\n\n---\n#### B 组件代码\n\n![图片描述](attimg://article/content/picture/201808/29/163959jn8ql0bnnwugn8wb.jpg)\n\n## 这样就OK了\n\n---\n\n### 总结\n\n有时候如果项目不是很庞大的情况下 需要独立的组件相互传值的情况下可以考虑使用bus 来解决，但是在使用bus需注意两个独立组件再不同路由下的使用情况时注意vue组件生命周的问题，还有组件销毁之前需要注销监听事件避免在组件内多次调用函数\n', null);
INSERT INTO `b_article_detail` VALUES ('14', '23', '**html 代码**\n\n```html:run\n<!DOCTYPE html>\n	<html lang=\"en\">\n	<head>\n		<meta charset=\"UTF-8\">\n		<title>观察者模式</title>\n		<style type=\"text/css\">\n			.main tr td{ border: 1px solid #ccc }\n		</style>\n		<script type=\"text/javascript\" src=\"http://xipwang.cn/js/jquery.min.js\"></script>\n		<script type=\"text/javascript\"></script>\n		<table class=\"main\"  align=\"center\">\n			<tr>\n				<td><input type=\"checkbox\" name=\"\" id=\"checkall\"><label>全选</label></td>\n			</tr>\n			<tr>\n				<td>\n					<input type=\"checkbox\" name=\"\" class=\"checkbox\">\n				</td>\n			</tr>\n			<tr>\n				<td>\n					<input type=\"checkbox\" name=\"\" class=\"checkbox\">\n				</td>\n			</tr>\n			<tr>\n				<td>\n					<input type=\"checkbox\" name=\"\" class=\"checkbox\">\n				</td>\n			</tr>\n			<tr>\n				<td>\n					<input type=\"checkbox\" name=\"\" class=\"checkbox\"><label>这个也可以设置全选</label>\n				</td>\n			</tr>\n			<tr>\n				<td>\n					<input type=\"checkbox\" name=\"\" class=\"checkbox\">\n				</td>\n			</tr>\n			<tr>\n				<td>\n					<input type=\"checkbox\" name=\"\" class=\"checkbox\">\n				</td>\n			</tr>\n\n		</table>\n	</head>\n	<body>\n	<script type=\"text/javascript\">	\n	 $(function(){\n	 		//发布订阅\n	 		function  Obserable (){ \n	 			   this.handlers ={};\n	 		}\n	 		Obserable.prototype ={\n	 			 constructor: Obserable, \n	 			 subscribe:function(type,callback){  //订阅\n	 			 	if( typeof this.handlers[type] == \"undefined\"){ //判断是否事件类型为undefined如果是则给它创建一个数组对象\n	 			 			this.handlers[type] =[];\n	 			 	};\n	 			 	this.handlers[type].push(callback)   //订阅消息添加进缓存列表  \n	 			 },\n	 			 publish:function(type){  	 //发布		   \n	 			 	if(this.handlers[type] instanceof Array) {\n	 			 		var  handle = this.handlers[type];\n	 			 		for(var i =0 ; i< handle.length; i++){//查找执行对应的回调函数集合 \n	 			 				handle[i](arguments[1]);  \n	 			 		}\n	 			 	 }\n	 			 }	 			\n	 		  }\n	 		var  pubsub = new Obserable()  //把Obserable实例化\n	 	  //第一种方法\n	 		pubsub.subscribe(\"checkbox\",function(result){    //在这里订阅主题\n	 			if(result){ // 都选上\n	 				$.each($(\".checkbox\"),function(){\n	 					$(this).prop(\"checked\",true);\n	 				})\n	 			}else{     // 都不选\n	 				$.each($(\".checkbox\"),function(){\n	 					$(this).prop(\"checked\",false);\n	 				})\n	 			}\n	 		})\n\n	 		  // 通过观察全选按钮的$(\"#checkall\")状态变化来发布 \n	 		$(\"#checkall\").change(function(){\n	 				pubsub.publish(\"checkbox\",$(this).prop(\"checked\"));\n	 		})\n\n\n	 		//第二种方法 订阅两种不同的主题\n	 		pubsub.subscribe(\"checkbox:true\",function(){  //第一个主题为全部选上	 		\n	 				$.each($(\".checkbox\"),function(){\n	 					$(this).prop(\"checked\",true);\n	 				})	 			\n	 		})\n	 		pubsub.subscribe(\"checkbox:false\",function(){ //第二个主题为全部都不选  		\n	 				$.each($(\".checkbox\"),function(){\n	 					$(this).prop(\"checked\",false);\n	 				})	 			\n	 		})\n\n	 		\n	 		$(\"#checkall\").change(function(){  // 通过观察全选按钮的状态变化来发布\n	 				var topic =\"checkbox:\"+$(this).is(\':checked\')\n	 				pubsub.publish(topic);\n	 				\n	 		})\n\n\n	 		//当然也可以把$(\".checkbox\")任意一个元素来当做发布者\n	 		$(\".checkbox\").eq(3).change(function(){  // 当然也可以来通过$(\".checkbox\").eq(3)的元素的变化来发布\n	 				var topic =\"checkbox:\"+$(this).is(\':checked\')\n	 				pubsub.publish(topic)	 				\n	 		})\n\n\n	 })\n	</script>\n	</body>\n	</html>	\n```', null);
INSERT INTO `b_article_detail` VALUES ('15', '24', '123123', null);
INSERT INTO `b_article_detail` VALUES ('17', '26', '```\nvar proxyMiddleWare= require(\'http-proxy-middleware\');\nvar app = express();\nvar proxyPath = \"http://47.104.208.182:8087\";//目标后端服务地址\nvar proxyOption ={\n    target:proxyPath,\n    changeOrigoin:true,\n    ws: true,\n    pathRewrite: { \'^/api\': \'/\' }\n};\napp.use(express.static(__dirname + \"public\"));\napp.use(\"/api\",proxyMiddleWare(proxyOption));\napp.listen(4000);//4000是我要启动的端口\n\n```', null);
INSERT INTO `b_article_detail` VALUES ('25', '37', '```\nnpm安装模块\n【npm install xxx】利用 npm 安装xxx模块到当前命令行所在目录；\n【npm install -g xxx】利用npm安装全局模块xxx；\n本地安装时将模块写入package.json中：\n【npm install xxx】安装但不写入package.json；\n【npm install xxx –save】 安装并写入package.json的”dependencies”中；\n【npm install xxx –save-dev】安装并写入package.json的”devDependencies”中。\nnpm 删除模块\n【npm uninstall xxx】删除xxx模块； \n【npm uninstall -g xxx】删除全局模块xxx；\n```', null);
INSERT INTO `b_article_detail` VALUES ('26', '38', '```\nlocation / {\n                proxy_pass   http://localhost:3000;\n                proxy_redirect off;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header Host $http_host;\n                proxy_set_header X-NginX-Proxy true;\n	}\n```', null);
INSERT INTO `b_article_detail` VALUES ('28', '40', '```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Promise</title>\n</head>\n\n<body>\n  <script>\n    function Promise(fn) {\n      var state = \'pending\',\n        value = null,\n\n        callbacks = [];\n      this.then = function (onFulfilled) {\n        if (state === \'pending\') {\n          callbacks.push(onFulfilled);\n          return this;\n\n        }\n\n        onFulfilled(value);\n        return this;\n      };\n\n\n      function resolve(newValue) {\n        value = newValue;\n        state = \'fulfilled\';\n        setTimeout(function () {\n          callbacks.forEach(function (callback) {\n            callback(value);\n          });\n        }, 0);\n      }\n      fn(resolve);\n    }\n\n\n    new Promise(resolve => {\n      setTimeout(() => {\n        resolve(1)\n      },1000)\n    }).then((res) => {\n      debugger\n    })\n  </script>\n\n</body>\n\n</html>\n```', null);
INSERT INTO `b_article_detail` VALUES ('29', '41', '```\n```\n// 和自定义过滤器一样,我们这里定义的是全局指令\nVue.directive(\'focus\',{\n    inserted(el) {\n      el.focus()\n    }\n})\n```\n\n```\n<div id=\'app\'>\n    <input type=\"text\">\n    <input type=\"text\" v-focus placeholder=\"我有v-focus,所以,我获取了焦点\">\n  </div>\n  \n  ```\n  \n ---\n  先总结几个点:\n\n- 使用 Vue.directive()来新建一个全局指令,(指令使用在HTML元素属性上的)\n - Vue.directive第一个参数focus是指令名,指令名在声明的时候,不-需要加 v-\n- 在使用指令的HTML元素上,<input type=\"text\" v-focus  placeholder=\"我有v-focus,所以,我获取了焦点\"/> 我们需要加上 v-.\nVue.directive(\'focus\',{}) 第二个参数是一个对象,对象内部有个 inserted() 的函数,函数有 el 这个参数.\nel 这个参数表示了绑定这个指令的 DOM元素,在这里就是后面那个有 placeholder 的 input\nel 就等价于 document.getElementById(\'el.id\')....\n可以利用 $(el) 无缝连接 jQuery\n\n---\n\n### Vue 指令的声明周期函数\n```\nVue.directive(\'gqs\',{\n    bind() {\n      // 当指令绑定到 HTML 元素上时触发.**只调用一次**\n      console.log(\'bind triggerd\')\n    },\n    inserted() {\n      // 当绑定了指令的这个HTML元素插入到父元素上时触发(在这里父元素是 `div#app`)**.但不保证,父元素已经插入了 DOM 文档.**\n      console.log(\'inserted triggerd\')\n    },\n    updated() {\n      // 所在组件的`VNode`更新时调用.\n      console.log(\'updated triggerd\')\n    },\n    componentUpdated() {\n      // 指令所在组件的 VNode 及其子 VNode 全部更新后调用。\n      console.log(\'componentUpdated triggerd\')\n      \n    },\n    unbind() {\n      // 只调用一次，指令与元素解绑时调用.\n      console.log(\'unbind triggerd\')\n    }\n  })\n  ```\n```', null);
INSERT INTO `b_article_detail` VALUES ('30', '42', '```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>js二叉树</title>\n</head>\n<body>\n  <script>\n    // 二叉树构造函数\n    function BinaryTree() {\n      // 节点的构造函数\n      var Node = function(key) {\n        this.key = key; // 节点的值\n        this.left = null; // 左子树节点\n        this.right = null; // 右子树节点\n      }\n\n      // 根节点\n      var root = null;\n\n      // 插入root的子节点\n      var insertNode = function(parentNode, childNode){\n        debugger\n        // 左子树构造\n        if (childNode.key < parentNode.key) {\n          // 为空时赋值，否则继续延伸\n          if (parentNode.left === null) {\n            parentNode.left = childNode;\n          } else {\n            insertNode(parentNode.left, childNode);\n          }\n        } else { // 右子树的构造 childNode.key > parentNode.key\n          if (parentNode.right === null) {\n            parentNode.right = childNode;\n          } else {\n            insertNode(parentNode.right, childNode);\n          }\n        }\n\n      }\n\n      this.getRoot = function() {\n        return root;\n      }\n\n      // 插入节点的实例方法\n      this.insert = function(key) {\n        debugger\n        var thisNode = new Node(key);\n\n        // 根节点赋值\n        if (root === null) {\n          root = thisNode;\n        } else {\n          // 插入子节点\n          insertNode(root, thisNode);\n        }\n      }\n    }\n\n    var nodes = [8, 3, 10, 1, 5, 14, 4, 6, 13,212,111,545,22,122,15,58];\n    var binaryTree = new BinaryTree();\n    nodes.forEach( key => {\n      binaryTree.insert(key);\n    });\n    console.log(binaryTree.getRoot());\n    \n  </script>\n</body>\n</html>\n\n```', null);
INSERT INTO `b_article_detail` VALUES ('32', '44', '```\nserver\n{\n  listen 80;\n  server_name www.csde.club 106.55.157.83;\n  # 前台blog\n  location / {\n   	proxy_pass http://127.0.0.1:8012 ;\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-For $remote_addr;\n  }\n  # 后台二级前端路由目录\n  location /csde_admin {\n    alias html/csde-admin-vue/dist;\n    expires 7d; # 缓存浏览器7天\n    index index.html;\n  }\n  # 后端接口地址\n  location ~api/ {\n    proxy_pass http://localhost:10086;\n    proxy_redirect off;\n    proxy_set_header Remoteip $http_remoteip;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-NginX-Proxy true;\n  }\n  # 静态文件目录\n  location ~public/ {\n		proxy_pass http://localhost:10086;\n	}\n	# webhook钩子\n  location /webhook {\n     proxy_pass http://localhost:7777/webhook;\n  }   \n}\n```', null);
INSERT INTO `b_article_detail` VALUES ('33', '48', '#### 备注： 目前只是探索下实现的思路并不带任何规则和业务\n\n#### 原料：\n#### 1.Blob对象\n###### 一个 Blob对象表示一个不可变的, 原始数据的类似文件对象。Blob表示的数据不一定是一个JavaScript原生格式。 File 接口基于Blob，继承 blob功能并将其扩展为支持用户系统上的文件。\n---\n#### 2.FormData 对象\n###### 通过FormData对象可以组装一组用 XMLHttpRequest发送请求的键/值对。它可以更灵活方便的发送表单数据，因为可以独立于表单使用。如果你把表单的编码类型设置为multipart/form-data ，则通过FormData传输的数据格式和表单通过submit() 方法传输的数据格式相同。\n---\n\n#### 场景：\n###### 1.我们在进行大文件上传的时候，因为服务器的限制，会限制每一次上传到服务器的文件大小不会很大，这个时候我们就需要把一个需要上传的文件进行切割，然后分别进行上传到服务器\n###### 2. 在网页中直接上传大文件的时候上传时间长,中途一但网络不稳定会导致前功尽弃所以可以采用对文件进行分片上传。\n---\n\n\n##### 实现思路：\n###### 获取要上传文件的File对象，根据chunk（每片大小）对文件进行分片通过post方法轮循上传每片文件信息；post body中存放本次要上传的二进制数据片段slice用于文件分片上传分片与并发结合，将一个大文件分割成多块，并发上传，极大地提高大文件的上传速度。当网络问题导致传输错误时，只需要重传出错分片，而不是整个文件。另外分片传输能够更加实时的跟踪上传进度。\n###### 其实File接口就是基于Blob，继承blob功能并将其扩展为支持用户系统上的文件，也就是说File接口中的Flie对象就是继承与Blob对象\n###### 此图可以看处File 原型链上有Blob对象\n##### [color=#f20257]Blob.slice的用法类似 Array.slice()  的感觉[/color]\n\n![图片描述](attimg://article/content/picture/201808/23/233845chgk48g937z39r8i.jpg)\n\n\n\n \n\n\n\n#### 前端代码:\n\n```html:run\n<template>\n  <div>\n      <input id=\"file\" type=\"file\" name=\"image\" ref=\"file\"  >\n  </div>\n</template>\n\n<script>\nimport axios from \'axios\'\nimport UploadSlice from \'../upload.js\'\nexport default {\n  name: \'\',\n  data () {\n    return {    \n    }\n  \n  },\n  mounted () {    \n    new UploadSlice({\n      url: \'api/upload\',\n      el:  document.getElementById(\'file\'),\n      bytesPer: \'\'\n    })\n  },\n</script>\n```\n\n\n```javascript:run\nimport axios from \'axios\'\n \nclass UploadSlice {    \n    constructor (option) { \n      this.url = option.url;\n      this.bytesPer = 1024 * 1021  || option.bytesPer // 默认每个文件切片大小为1MB .\n      this.el = option.el // Dom 对象\n      this.init()\n    }\n    init () {\n      this.changePost()\n    }\n    changePost () {  \n      this.el.onchange = (e) => {\n        var startSize = 0     // 每一次开始切割位置\n        var endSize = this.bytesPer        \n        var file = e.target.files[0]\n        var totalSize = Math.ceil(file.size / this.bytesPer); // 总文件大小\n        var filesize = file.size;      // 文件大小\n        var filename = file.name;      // 文件名\n        var blob = []\n        for (var i = 0 ; i < totalSize; i++ ) {\n        \n          endSize = startSize + this.bytesPer\n          var chunk = file.slice(startSize,endSize);  //切割文件 \n          let dataForm =  new FormData()\n          startSize = endSize \n          dataForm.append(\'file\', chunk, filename) \n         \n          axios.post(\"api/upload\",dataForm,{ headers : { \'Content-Type\': \'multipart/form-data\'} }).then((res) => {\n            console.log(res)\n          })  \n        }    \n      }\n    }\n}\nexport default UploadSlice\n```\n\n#### 后端代码：\n\n###### 目前后端代码还有些问题文件上传不完整出现这样的情况后续再研究\n![图片描述](attimg://article/content/picture/201808/24/000045j4c4uqnynncdznx2.jpg)\n\n```\npackage com.example.upload;\n\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Date;\nimport javax.servlet.http.HttpServletRequest;\n@RestController\n@RequestMapping(\"/api\")\npublic class Upload {\n    private   Date date = new Date();\n    @PostMapping(value = \"/upload\")\n    public String upload (@RequestParam(\"file\") MultipartFile file) {\n        if (file.isEmpty()) {\n            return \"上传失败，请选择文件\";\n        }\n        // 获取文件名\n        String fileName = file.getOriginalFilename();\n        // 存放路径\n        String filePath = \"/Users/wangxiping/back/upload/src/main/resources/upload/\";\n\n        File dest = new File(filePath + date.getTime() + fileName);\n        System.out.println(file);\n        try {\n            file.transferTo(dest);\n            return\"上传成功\";\n\n        } catch (IOException e) {\n           System.out.println(e);\n        }\n        return \"上传失败！\";\n    }\n}\n\n```', null);
INSERT INTO `b_article_detail` VALUES ('34', '49', '#####播放器浏览地址\n**[[color=#ff0000]http://www.xipwang.cn/wp-content/themes/Unite/single-html_demo.php?id=336[/color]](http://www.xipwang.cn/wp-content/themes/Unite/single-html_demo.php?id=336)**\n\n\n[视频播放器](attach://890bc5a9a4a857cf36fbd12cc4d6a083)\n个人比较喜欢慕课网站UI界面便大致模仿下慕课网站的播放器\n**[color=#ff0000]一路写来踩了不少坑！小白在此和大神们一起分享[/color]**\n\n\n![自制H5视频播放器UI模仿慕课](attimg://article/content/picture/201707/10/010646rlf6oozyqnyyfqyw.png)\n\n\n![自制H5视频播放器UI模仿慕课](attimg://article/content/picture/201707/10/010645vvwo8by59xp349e5.png)\n\n\n![自制H5视频播放器UI模仿慕课](attimg://article/content/picture/201707/10/010627t7e3s2xb32i3nlb4.png)\n**javascript 代码**\n\n```javascript:run\n\n/**\n * H5播放器\n * @authors xipwang\n * @date    2017-07-2 13:56:01\n * @version $1.0$\n */\n(function ($, win, doc, undefined) {\n    var ControllDom = {\n            controlls: $(\"#pdq-controll-wrap\"),\n            //播放按钮\n            playbtn: $(\"#pdq-plago\"),\n            //播放按钮\n            progressBar: $(\"#pdq-progressBar\"),\n            //进度条\n            timer: $(\"#pdq-play-timer\"),\n            //时间显示\n            volumeBox: $(\"#pdq-play-volume\"),\n            //音量滑块\n            courseType: $(\"#pdq-play-course-type\"),\n            //视频类型\n            courseMenu: $(\"#pdq-play-menulist\"),\n            //视频菜单\n            playTimesbox: $(\"#pdq-playback-rate\"),\n            //播放倍数\n            fullScreenBtn: $(\"#pdq-play-fullscreen\"),\n            //全屏按钮\n            loading: $(\"#pdq-load-wrap\"),\n            //暂停按钮\n            pausedBtn: $(\"#pdq-right-pause\")\n    };\n    function XPVideoPlay(videoObject, option) {\n        this.videoObject = videoObject[0]; //video对象\n        this.volume = option.volume || \"50%\"; //初始化音量大小\n        this.type = option.type || \"流畅\"; //视频清晰度初始化\n        this.Rate = option.rate || 1;     //倍数播放\n        this.positionPlay = option.positionPlay || 0; //视频初始化位置\n        this.watermarkName = option.watermarkName || \"\";\n        this.videoUrl = option.videoUrl || null;\n        this.watermarkTime = option.watermarkTime || 50;//水印展现时间(秒为单位)\n        this.markWaitiTime = option.markWaitiTime  ||  5000  //水印等待时间（毫秒）\n        this.arrVideoLink; //用于存储视频路径\n        this.overPlay = false;\n        this.init();\n    }\n    XPVideoPlay.prototype = {\n        //初始化入口\n        init: function() {\n            var _this = this;\n            this.getResVideo();\n             $(_this).on(\"application\", _this.appVideo);\n        },\n        //获取视频资源\n        getResVideo: function() {\n           var _this = this;\n                $.post(_this.videoUrl, null,\n                function(result) {\n                    _this.arrVideoLink = result;\n                    $(_this).trigger(\"application\");\n                },\n                \"JSON\");\n        },\n        //功能入口\n        appVideo: function () {\n            var _this = this;\n            _this.initUploume(_this.volume); //初始化音量大小\n            _this.playVideo(); //播放/暂停\n            _this.videotype(_this.type, _this.positionPlay, _this.Rate); //切换视频清晰度\n            _this.videoPlayGo(); //开始播放\n            _this.videoswitch(); //手动切换视频类型\n            _this.videoPattern();//切换视频模式\n            _this.fullScreen(); //全屏按钮\n            _this.volumeControl(); //音量控制\n            _this.updatePlaybar(); //更新视频进度\n            _this.playTimes(); //播放倍数\n        },\n        //暂停/播放\n        playVideo: function() {\n            var _this = this;\n            $(_this.videoObject).on(\"click\",\n            function() {\n                ControllDom.playbtn.click();\n            });\n            ControllDom.pausedBtn.click(function() {\n                ControllDom.playbtn.click();\n            });\n            ControllDom.playbtn.on(\"click\",\n            function() {\n                var $this = $(this);\n                if (_this.videoObject.paused) {\n                    $this.removeClass(\"stop\");\n                    ControllDom.controlls.addClass(\"vhidden\");\n                    _this.videoObject.play(); //播放                   \n                    ControllDom.pausedBtn.hide();\n                    if (_this.overPlay) {\n                        //当重新播放时再次启用水印\n                        _this.overPlay = false;\n                        _this.watermark(); //启用水印\n                    }\n                } else {\n                    _this.videoObject.pause(); //暂停\n                    $this.addClass(\"stop\");\n                    ControllDom.pausedBtn.show();\n                  \n                }\n            });\n        },\n        //倍数播放\n        playTimes: function() {\n            var _this = this;\n            var ulBox = ControllDom.playTimesbox.find(\"ul\");\n            var timeArr = ulBox.children();\n            var valuetime = ControllDom.playTimesbox.find(\"#pdq-playback-text\");\n            timeArr.click(function() {\n                var $this = $(this);\n                var multiple = parseInt($this.text());\n                valuetime.text($(this).text());\n                $this.parent().hide();\n                _this.videoObject.playbackRate = multiple;\n            });\n\n            _this.upMenu(valuetime, ulBox);\n        },\n        //音量控制\n        volumeControl: function() {\n            var _this = this;\n            var isVolume = false;\n            var mutebtn = ControllDom.volumeBox.find(\"#pdq-play-icon\");\n            var Round = ControllDom.volumeBox.find(\"#vloume-roud\");\n            var volumeBg = ControllDom.volumeBox.find(\"#vloume-roud-bg\");\n            var volumeSli = ControllDom.volumeBox.find(\"#vloume-roud-slider\");\n            //静音切换\n            mutebtn.click(function() {\n                var $this = $(this);\n                if ($this.hasClass(\"mute\")) {\n                    if (_this.volume < 10) {\n                        _this.initUploume(\"20%\");\n                    } else {\n                        _this.initUploume(_this.volume);\n                    }\n                } else {\n                    _this.initUploume(0);\n                }\n            });\n            volumeSli.mousedown(function(e) {\n                var e = e || event;\n                upVloume(e);\n            });\n            //拖到圆球控制音量\n            Round.mousedown(function(e) {\n                isVolume = true;\n            });\n            volumeSli.mousemove(function(e) {\n                var e = e || event;\n                if (isVolume) {\n                    upVloume(e);\n                }\n            });\n            $(document).mouseup(function() {\n                isVolume = false;\n            });\n            //更新音量大小\n            function upVloume(e) {\n                var volumeWidth = volumeSli.width();\n                var upWidth = e.pageX - $(e.target).offset().left;\n                Round.css({\n                    left: upWidth / volumeWidth * 100 + \"%\"\n                });\n                volumeBg.width(upWidth / volumeWidth * 100 + \"%\");\n                //记录当前音量更新位置\n                _this.volume = upWidth / volumeWidth * 100;\n                try {\n                    _this.videoObject.volume = upWidth / volumeWidth;\n                } catch(err) {\n                    console.log(err);\n                }\n                _this.initUploume(_this.volume);\n            }\n        },\n        //初始化音量大小\n        initUploume: function(value) {\n            var _this = this;\n            var mutebtn = ControllDom.volumeBox.find(\"#pdq-play-icon\");\n            var Round = ControllDom.volumeBox.find(\"#vloume-roud\");\n            var volumeBg = ControllDom.volumeBox.find(\"#vloume-roud-bg\");\n            if (value < 4) {\n                mutebtn.addClass(\"mute\");\n            } else if (parseInt(value) * 100 > 0) {\n                mutebtn.removeClass(\"mute\");\n            }\n            Round.stop().animate({\n                left: value\n            },\n            200);\n            volumeBg.stop().animate({\n                width: value\n            },\n            200);\n            _this.videoObject.volume = parseInt(value) / 100;\n        },\n        //更新播放进度\n        updatePlaybar: function() {\n            var _this = this;\n            var sliderBox = ControllDom.progressBar.find(\"#pdq-progress-hidebox\");\n            var sliderBar1 = sliderBox.find(\"#pdq-progress-bgh\");\n            var sliderBar2 = sliderBox.find(\"#pdq-progress-bgs\");\n            var sliderbtn = sliderBox.find(\"#pdq-slider-button\");\n            var mousebar = sliderBox.find(\"#pdq-progress-mouse-bar\");\n            var showBar = sliderBox.find(\"#pdq-progress-bgs\");\n            var timeShow = sliderBox.find(\"#pdq-progress-timeShow\");\n            //更新视频进度\n            function sliderProgress() {\n                var offsetX = 0;\n                var isMove = false;\n                var moveX = 0;\n                //进度条任意点进行更新\n                mousebar.mousedown(function(e) {\n                    updataprogress(e.pageX - $(this).offset().left);\n                    _this.videoObject.play();\n                     ControllDom.pausedBtn.hide();\n                    ControllDom.playbtn.removeClass(\"stop\");\n                    if(_this.overPlay){ \n                        _this.overPlay = false;\n                        _this.watermark();\n                    }\n                });\n                //当按下圆球\n                sliderbtn.mousedown(function(evente) {\n                    isMove = true;\n                    offsetX = event.pageX - $(this).position().left;\n                });\n                //鼠标经过进度条展现锚点时间\n                mousebar.mousemove(function(event) {\n                    var maxWidth = sliderBox.width();\n                    var nowX = event.pageX - $(event.target).offset().left;\n                    var timeShowWith = timeShow.outerWidth();\n                    //计算当前鼠标经过的时间段 = 总时长*(当前偏移量/进度条最大长度)\n                    var nowTime = _this.timeFormat(_this.videoObject.duration * (nowX / maxWidth));\n                    timeShow.css({\n                        left: nowX / maxWidth * 100 + \"%\"\n                    }).text(nowTime).css({\n                        marginLeft: -timeShowWith / 2\n                    });\n                    //锚点时间展现不能超出播放器大小\n                    if (nowX >= maxWidth - timeShowWith / 2) {\n                        timeShow.css({\n                            left: maxWidth - timeShowWith / 2\n                        });\n                    } else if (nowX <= timeShowWith / 2) {\n                        timeShow.css({\n                            left: timeShowWith / 2\n                        });\n                    }\n                });\n\n                //开始滑动\n                $(doc).mousemove(function(event) {\n                    var sliderbtnLeft = sliderbtn.position().left;\n                    //判断是否执行更新进度\n                    if (isMove) {\n                        \n                        //获取鼠标实际移动的X轴距离\n                        var moveX = event.pageX - offsetX;\n                        if (sliderbtnLeft <= sliderbtn.width()) {\n                            moveX = sliderbtn.width();\n                            isMove = true;\n                        } else if (sliderbtnLeft > sliderbtn.parent().width() - sliderbtn.width()) {\n                            moveX = sliderbtn.parent().width();\n                            //如果拖到距离大于进度条的最大长度将拖动状态取消\n                            isMove = false;\n                            return false;\n                        }\n                        //更新视频进度\n                        updataprogress(moveX);\n                        return false;\n                    }\n\n                    //当鼠标抬起\n                }).mouseup(function() {\n                    isMove = false;\n                });\n                function updataprogress(x) {\n                    var maxduration = _this.videoObject.duration;\n                    var maxWidth = sliderBox.width();\n                    var changeoren = x / maxWidth * 100;\n                    if (changeoren > 100) {\n                        changeoren = 100;\n                    } else if (changeoren < 0) {\n                        changeoren = 0;\n                    }\n                    sliderbtn.css({\n                        left: changeoren + \"%\"\n                    });\n                    sliderBar1.width(changeoren + \"%\");\n                    sliderBar2.width(changeoren + \"%\");\n                    _this.videoObject.currentTime = maxduration * changeoren / 100;\n                    return false;\n                }\n            }\n            sliderProgress();\n        },\n        //初始化视频类型\n        videotype: function(type, timer, rate) {\n            var _this = this;\n            var nowTime = 0; //当前播放位置\n            var AllTime = 0; //视频时长\n            var timebox = _this.timer;\n            var nowSpan = ControllDom.timer.find(\"#pqd-nowTime\");\n            var allSpan = ControllDom.timer.find(\"#pdq-allTime\");\n            var diaolog = new _this.videoDialog(_this)\n            var menuParent = ControllDom.courseMenu;\n            var valueType = menuParent.find(\"#pqd-menu-text\");\n            _this.arrVideoLink;\n            switch (type) {\n                case \"流畅\":\n                    if (_this.arrVideoLink.source[0].LD) {\n                        diaolog.SwitchVideoMsg(\"正在为你切换\" + type +\"视频...\");\n                        valueType.text(type);                    \n                        $(_this.videoObject).attr(\"src\", _this.arrVideoLink.source[0].LD); //流畅                     \n                        diaolog.remove($(\".pdq-switch-box\"));    \n                        ControllDom.playbtn.removeClass(\"stop\");\n                        ControllDom.pausedBtn.hide();\n                    } else {\n                            diaolog.Msg(\"该课程没有\"+type+\"版本哦亲！\");\n                    }\n                break;\n                case \"标清\":\n                    if (_this.arrVideoLink.source[1].HD) {\n                        diaolog.SwitchVideoMsg(\"正在为你切换\" + type + \"视频....\");\n                        valueType.text(type);                     \n                        $(_this.videoObject).attr(\"src\", _this.arrVideoLink.source[1].HD); //标清                  \n                        diaolog.remove($(\".pdq-switch-box\"));    \n                        ControllDom.playbtn.removeClass(\"stop\");\n                        ControllDom.pausedBtn.hide();\n                    } else {\n                        diaolog.Msg(\"该课程没有\" + type + \"版本哦亲！\");\n                    }                  \n                break;\n                case \"高清\":\n                    if (_this.arrVideoLink.source[2].SD) {\n                        diaolog.SwitchVideoMsg(\"正在为你切换\" + type + \"视频...\");\n                        valueType.text(type);                       \n                        $(_this.videoObject).attr(\"src\", _this.arrVideoLink.source[2].SD); //高清                    \n                        diaolog.remove($(\".pdq-switch-box\"));\n                        ControllDom.playbtn.removeClass(\"stop\");\n                        ControllDom.pausedBtn.hide();\n                    } else {\n                        diaolog.Msg(\"该课程没有\" + type + \"版本哦亲！\");\n                    }\n                break;\n            }           \n            //当浏览器已加载音频/视频的元数据时\n            $(_this.videoObject).on(\"loadedmetadata\",\n                function (e) {                    \n                    _this.videoObject.currentTime = timer;\n                    _this.videoObject.playbackRate = rate;\n                    AllTime = _this.videoObject.duration;\n                    allSpan.text(_this.timeFormat(_this.videoObject.duration));\n                });\n            //当目前的播放位置已更改时\n            $(_this.videoObject).on(\"timeupdate\",\n                function (e) {\n                    var nowTime = _this.videoObject.currentTime;\n                    nowSpan.text(_this.timeFormat(_this.videoObject.currentTime));\n                    ControllDom.progressBar.find(\"#pdq-progress-bgs\").width(nowTime / AllTime * 100 + \"%\");\n                    ControllDom.progressBar.find(\"#pdq-progress-bgh\").width(nowTime / AllTime * 100 + \"%\");\n                    ControllDom.progressBar.find(\"#pdq-slider-button\").css({\n                        left: nowTime / AllTime * 100 + \"%\"\n                    });\n                    ControllDom.progressBar.find(\"#pdq-progress-buff\").width(_this.videoObject.buffered.end(0) / AllTime * 100 + \"%\");\n                });\n        },\n        //视频切换\n        videoswitch: function() {\n            var _this = this;\n            var menuParent = ControllDom.courseMenu;\n            var MenuBox = menuParent.find(\"ul\");\n            var listMenu = MenuBox.children();\n            var valueType = menuParent.find(\"#pqd-menu-text\");\n            listMenu.click(function() {\n                nowTime = _this.videoObject.currentTime;\n                nowRate = _this.videoObject.playbackRate;\n                var texType = $(this).text();              \n                $(this).parent().hide();\n                //切换视频&类型&进度&速率\n                _this.videotype(texType, nowTime, nowRate);               \n            });\n            _this.upMenu(valueType, MenuBox);\n        },\n        //模式切换\n        videoPattern: function () {\n            var _this = this;\n            var patternParent = ControllDom.courseType\n            var patterBox = patternParent.find(\'ul\');\n            var valueTypes = patternParent.find(\"#pdq-type-text\");\n            _this.upMenu(valueTypes, patterBox);\n        },\n        //开始播放\n        videoPlayGo: function () {            \n            var _this = this;   \n            _this.watermark()\n            //当视频播放结束\n            $(_this.videoObject).on(\"ended\",\n                function () {\n                    ControllDom.playbtn.addClass(\"stop\");\n                    _this.overPlay = true;\n                });\n            //当视频已开始播放时\n            $(_this.videoObject).on(\"playing\",\n            function() {\n                ControllDom.loading.hide();\n            });\n            //当视频已停止播放但打算继续播放时\n            $(_this.videoObject).on(\"waiting\",\n            function() {             \n                ControllDom.loading.show();\n            });\n            //当文件就绪可以开始播放时运行的脚本（缓冲已足够开始时）\n            $(_this.videoObject).on(\"canplay\",\n            function() {\n                ControllDom.loading.hide();\n            });\n        },\n        //时间格式化\n        timeFormat: function(value) {\n            var time;\n            if (value > -1) {\n                var h = Math.floor(value / 3600) > 10 ? Math.floor(value / 3600) : Math.floor(value / 3600) == 0 ? \"\": \"0\" + Math.floor(value / 3600);\n                var m = Math.floor(value / 60) % 60 > 10 ? Math.floor(value / 60) % 60 : \"0\" + Math.floor(value / 60) % 60;\n                var s = value % 60 > 10 ? Math.floor(value % 60) : \"0\" + Math.floor(value % 60);\n                time = (h == 0 ? \"\": h + \":\") + m + \":\" + s;\n            }\n            return time;\n        },\n        //水印滚动动画\n        watermark: function() {          \n            var _this = this;  \n            function MarkShow(name,parent) {\n                    this.name = name;\n                    var canvas = $(\"<canvas width=\'200\' height=\'25\'></canvas>\");\n                    var context = canvas[0].getContext(\"2d\");\n                    //创建水印文字\n                    this.createdom = function () { \n                            canvas.css({\n                                zIndex:21474836478,\n                                left:\"50%\",                          \n                                position:\"absolute\",\n                            });                     \n                            context.fillStyle = \"#fff\";\n                            context.font =\"14px microsoft yahei\"\n                            context.fillText(\"ID\"+this.name, 10, 20);\n                            parent.append(canvas); \n                        }\n                     //移动方法   \n                    this.moveMark=function(obj,callback) {\n                            var intX = -10;\n                            var intY = -10; \n                            var listTime = 0; \n                            var timeshow = null                       \n                            var timeTop = null;\n                            var timeLeft = null;\n                            var timeing = 0;      \n                            var maxX = $(_this.videoObject).width();\n                            var maxY = $(_this.videoObject).height();              \n                            timeTop = setInterval(top,200);  \n                            function left() { \n                                    intX += 10; \n                                    intY = 0; \n                                    $(obj).css({  left: intX, top:\"50%\" });\n                                    if(parseInt( $(obj).css(\"left\")) > maxX){  \n                                        clearInterval(timeLeft);     \n                                        timeTop = setInterval(top,200);                     \n                                    }\n                                }\n                            function top(){\n                                intY += 10;\n                                intX = 0;\n                                $(obj).css({  top: intY,  left:\"50%\"});\n                                if(parseInt( $(obj).css(\"top\")) >= maxY -50){  \n                                    clearInterval(timeTop); \n                                    timeLeft = setInterval(left,200);                       \n                                }\n                            }\n                            //计时监听\n                            timeing = setInterval(function(){\n                                   listTime +=1;     \n                                   //判断是否播放结束且 水印展现时间是否到达                             \n                                   if(listTime == _this.watermarkTime || _this.overPlay){\n                                        listTime = 0;\n                                        _this.overPlay = false;\n                                        canvas.remove();\n                                        clearInterval(timeTop);\n                                        clearInterval(timeLeft);\n                                        clearInterval(timeing);\n                                        if(typeof callback ==\"function\"){\n                                            callback(_this);\n                                        }\n                                   }\n                            },1000)\n                            //当屏幕大小发送改变的初始化X,Y\n                            $(window).resize(function(){\n                                maxX = $(_this.videoObject).width();\n                                maxY = $(_this.videoObject).height();     \n                            });\n                    }                   \n                    this.moveGo = function(that){\n                        var that = this;                   \n                            that.createdom();\n                            that.moveMark(canvas[0],function(_that){debugger\n                                //回调递归执行                           \n                                timeshow=setTimeout(function(){\n                                    if(_that.overPlay){ //判断视频是否播放结束\n                                        //结束清除计时\n                                       clearTimeout(timeshow);                                      \n                                    }else{                                          \n                                         that.moveGo(that);  \n                                    }\n                                }, 4000)\n                            });\n                    }\n                    this.init = function(){ \n                         this.moveGo(this);\n                    };\n                return  this.init();\n            }\n            new MarkShow(_this.watermarkName,$(_this.videoObject).parent());\n           \n        },\n        //对话框\n        videoDialog: function (that) {\n            var Xp = that\n            this.Msgbox = $(\'<div id=\"pdq-prompt-box\" class=\"pdq-prompt-box\">\'); \n            this.Switchbox = $(\'<div id=\"pdq-switch-box\" class=\"pdq-switch-box\"></div>\')\n            //对话框\n            this.Msg = function (text) {            \n                var $this = this;\n                if ($(\"#pdq-prompt-box\").length == 0) {\n                    $(Xp.videoObject).parent().append(this.Msgbox);\n                    $this.animates($this.Msgbox,text)                 \n                    $this.remove($this.Msgbox);\n                }\n            }\n            this.SwitchVideoMsg = function (text) {\n                var $this = this;\n                    $(Xp.videoObject).parent().append(this.Switchbox);\n                    $this.animates($this.Switchbox, text);\n            }\n            this.remove = function (objBox) {\n                setTimeout(function () {\n                    objBox.remove();\n                }, 2000);\n            }\n            this.animates = function (objBox,text) {\n                var $this = this;\n                objBox.css(\"-webkit-transform\", \"scale(0,1)\")\n                setTimeout(function () {\n                    objBox.css(\"-webkit-transform\", \"scale(1,1)\").text(text);\n                }, 200);\n            }\n        },\n        //全屏\n        fullScreen: function() {\n            var _this = this;\n            var $this = null;\n            var isFullScreen = false;\n            var videos = document.getElementById(\"videoObject\");\n            ControllDom.fullScreenBtn.click(function() {\n                $this = $(this);\n                if ($(this).hasClass(\"cancleScreen\")) {\n                    if (doc.exitFullscreen) {\n                        doc.exitFullscreen();\n                    } else if (doc.mozCancelFullScreen) {\n                        doc.mozCancelFullScreen();\n                    } else if (doc.webkitExitFullscreen) {\n                        doc.webkitExitFullscreen();\n                    }\n                } else {\n                    if (_this.videoObject.requestFullscreen) {\n                        _this.videoObject.requestFullscreen();\n                    } else if ($(\"#videoObject\")[0].mozRequestFullScreen) {\n                        // 火狐好像不允许同级元素全屏坑点在这里直接把父级全屏\n                        $(\"#videoObject\")[0].mozRequestFullScreen();\n                    } else if (_this.videoObject.webkitRequestFullscreen) {\n                        _this.videoObject.webkitRequestFullscreen();\n                    } else if (_this.videoObject.msRequestFullscreen) {\n                        _this.videoObject.msRequestFullscreen();\n                    }\n                }\n            });\n            //浏览器全屏无法监听到ESC键盘事件试了好几种方法还是有个别浏览器没有不能兼容\n            win.onresize = function() {\n                //当浏览器窗口发生变化时判断此时全屏按钮状态来改变样式\n                if (ControllDom.fullScreenBtn.hasClass(\"cancleScreen\")) {\n                    ControllDom.fullScreenBtn.removeClass(\"cancleScreen\");\n                } else {\n                    ControllDom.fullScreenBtn.addClass(\"cancleScreen\");\n                }\n                if (!checkFull()) {\n                    ControllDom.fullScreenBtn.removeClass(\"cancleScreen\");\n                }\n            };\n            function checkFull() {\n                var isFull = doc.fullscreenElement || doc.mozFullScreenElement || doc.webkitFullscreenElement || doc.msFullscreenEnabled || doc.fullscreenEnabled || doc.webkitIsFullScreen;\n                if (isFull === undefined) isFull = false;\n                return isFull;\n            }\n        },\n        //菜单显示隐藏\n        upMenu: function(menuEl, menuBox) {\n            function Upmenu(menuEl, menuBox) {\n                this.time = null;\n                this.Menuname = menuEl;\n                this.Menuconten = menuBox;\n                this.init = function() {\n                    this.hoverBtn();\n                    this.hoverConten();\n                };\n                return this.init();\n            }\n            Upmenu.prototype = {\n                constructor: Upmenu,\n                ShowContent: function(index) {\n                    this.Menuconten.stop().show(0);\n                },\n                HedeContent: function(that) {\n                    this.Menuconten.stop().hide(0,\n                    function() {\n                        that.removeClass(\"oen\");\n                    });\n                },\n                hoverBtn: function() {\n                    var self = this;\n                    this.Menuname.hover(function() {\n                        $(this).addClass(\"active\");\n                        self.ShowContent();\n                    },\n                    function() {\n                        var $this = $(this);\n                        self.time = setTimeout(function() {\n                            self.HedeContent($this);\n                            self.Menuname.removeClass(\"active\");\n                        },\n                        200);\n                    });\n                },\n                hoverConten: function() {\n                    var self = this;\n                    self.Menuconten.hover(function() {\n                        clearTimeout(self.time);\n                    },\n                    function() {\n                        $(this).hide();\n                        self.Menuname.removeClass(\"active\");\n                    });\n                }\n            };\n            return new Upmenu(menuEl, menuBox);\n        }\n    };\n    window.XPVideoPlay = XPVideoPlay;\n})(jQuery, window, document);	\n```\n\n**css 代码**\n\n```css:run\n* {\n  margin: 0;\n  padding: 0;\n}\n::-webkit-full-screen video {\n    z-index: 1\n}\n\n::-moz-full-screen video {\n    z-index: 1\n}\n::-o-full-screen video {\n    z-index: 1\n}\n::-ms-full-screen video {\n    z-index: 1\n}\nvideo::-webkit-media-controls-enclosure {\n  /*禁用播放器控制栏的样式*/\n  display: none !important;\n}\n\nul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n.content-box {\n \n  height: 450px;\n  background: #ede;\n  margin: 40px auto;\n}\n\n#videoObject {\n  width: 100% !important;\n  height: 100% !important;\n  display: block;\n  box-sizing: border-box;\n  color: #fff;\n  background-color: #000;\n  position: relative;\n  padding: 0;\n  z-index:1;\n  vertical-align: top;\n  overflow: hidden;\n}\n\n.videoView {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  padding-bottom: 50px;\n  box-sizing: inherit;\n}\n\n.pdq-controll-wrap {\n  height: 50px;\n  background: #070c11;\n  position: absolute;\n  z-index: 21474836471;\n  bottom: 0px;\n  left: 0;\n  width: 100%;\n  visibility: visible;\n  display: block !important;\n}\n/*进度条*/\n\n.pdq-controll-wrap .pdq-progressBar {\n  width: 100%;\n  height: 2px;\n  background: #666;\n  position: absolute;\n  top: 0;\n}\n\n.pdq-controll-wrap .pdq-progressBar .pdq-progress-bgs {\n  width: 0;\n  height: 2px;\n  position: absolute;\n  background: #f01616;\n  left: 0;\n  top: 0;\n}\n\n.pdq-controll-wrap .pdq-progressBar .pdq-progress-hidebox {\n  width: 100%;\n  height: 8px;\n  position: relative;\n  background: #070c11;\n  left: 0;\n  top: -6px;\n  display: none;\n  z-index: 3;\n}\n\n.pdq-controll-wrap .pdq-progressBar .pdq-progress-hidebox .pdq-progress-timeShow {\n  position: absolute;\n  display: block;\n  top: -30px;\n  color: #fff;\n  background: #070c11;\n  font-family: \"微软雅黑\";\n  font-size: 14px;\n  display: none;\n  padding: 2px 5px;\n}\n\n.pdq-controll-wrap .pdq-progressBar .pdq-progress-hidebox:hover .pdq-progress-timeShow {\n  display: block;\n}\n\n.pdq-controll-wrap .pdq-progressBar .pdq-progress-hidebox .pdq-progress-buff {\n  background: #393e42;\n  height: 8px;\n  z-index: 1;\n}\n\n.pdq-controll-wrap .pdq-progressBar .pdq-progress-hidebox .pdq-progress-mouse-bar {\n  width: 100%;\n  height: 15px;\n  position: absolute;\n  left: 0;\n  top: -5px;\n  z-index: 1;\n}\n\n.pdq-controll-wrap:hover .pdq-progress-hidebox {\n  display: block;\n  cursor: pointer;\n}\n\n.pdq-controll-wrap .pdq-progressBar .pdq-progress-hidebox .pdq-progress-bgh {\n  width: 0;\n  height: 8px;\n  position: absolute;\n  background: #f01616;\n  left: 0;\n  top: 0;\n}\n\n.pdq-controll-wrap .pdq-progressBar .pdq-progress-hidebox .pdq-slider-button {\n  width: 12px;\n  height: 12px;\n  position: absolute;\n  background: #fff;\n  left: 0px;\n  margin-left: -10px;\n  top: -2px;\n  border-radius: 50%;\n  cursor: pointer;\n  z-index: 10;\n}\n\n.pdq-controll-wrap .pdq-progressBar .pdq-progress-hidebox .pdq-slider-button:active {\n  background: #666;\n}\n/*播放按钮*/\n\n.pdq-controll-wrap .pdq-plago {\n  width: 40px;\n  height: 40px;\n  float: left;\n  cursor: pointer;\n  margin-top: 6px;\n  margin-left: 4px;\n  background: url(../assets/play.png) no-repeat center;\n}\n\n.pdq-controll-wrap .pdq-plago.stop {\n  background: url(../assets/stop.png) no-repeat center;\n}\n/*视频时间*/\n\n.pdq-controll-wrap .pdq-play-timer {\n  float: left;\n  color: #fff;\n  margin-top: 15px;\n  width: 120px;\n  text-align: center;\n  font-size: 14px;\n  font-family: \"微软雅黑\";\n}\n/*音量样式*/\n\n.pdq-controll-wrap .pdq-play-volume {\n  width: 150px;\n  height: 40px;\n  float: right;\n  margin-top: 12px;\n  margin-left: 15px;\n}\n\n.pdq-controll-wrap .pdq-play-volume .pdq-play-icon {\n  width: 30px;\n  height: 30px;\n  background: url(../assets/sound.png) no-repeat center;\n  float: left;\n  cursor: pointer;\n}\n\n.pdq-controll-wrap .pdq-play-volume .pdq-play-icon.mute {\n  background: url(../assets/mute.png) no-repeat center;\n}\n\n.pdq-controll-wrap .pdq-play-volume .pdq-volume-scroll {\n  width: 100px;\n  height: 3px;\n  background: #43474b;\n  float: left;\n  margin-top: 14px;\n  margin-left: 4px;\n  position: relative;\n}\n\n.pdq-controll-wrap .pdq-play-volume .pdq-volume-scroll .vloume-roud {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  background: #93999f;\n  position: absolute;\n  left: 0px;\n  top: -4px;\n  cursor: pointer;\n  z-index: 3;\n  margin-left: -5px;\n  border: 1px solid #93999f;\n}\n\n.pdq-controll-wrap .pdq-play-volume .pdq-volume-scroll .vloume-roud-bg {\n  width: 0px;\n  height: 3px;\n  border-radius: 2px;\n  background: #f00;\n  position: relative;\n}\n\n.pdq-controll-wrap .pdq-play-volume .pdq-volume-scroll .vloume-roud-slider {\n  width: 100%;\n  height: 30px;\n  border-radius: 2px;\n  position: absolute;\n  cursor: pointer;\n  z-index: 2;\n  left: 0;\n  top: -12px;\n}\n/*视频类型*/\n\n.pdq-controll-wrap .pdq-play-course-type {\n  float: right;  \n  font-size: 12px;\n  height: 40px;\n  width: 80px;\n  margin-top: 6px;\n  color: #fff;\n  font-family: \"微软雅黑\";\n  position: relative;\n}\n\n.pdq-controll-wrap .pdq-play-course-type .pdq-type-text {\n  text-align: center;\n  line-height: 40px;\n  cursor: pointer;\n}\n\n.pdq-controll-wrap .pdq-play-course-type .pdq-playlist {\n  position: absolute;\n  bottom: 40px;\n  left: 0;\n  z-index: 4;\n  display: none;\n}\n\n.pdq-controll-wrap .pdq-play-course-type .pdq-playlist li {\n  padding: 8px 2px;\n  color: #fff;\n  width: 80px;\n  text-align: center;\n  cursor: pointer;\n  font-size: 12px;\n  background: #070c11;\n}\n\n.pdq-controll-wrap .pdq-play-course-type .pdq-playlist li:hover {\n  background: #1f2429;\n  color: #f01616;\n}\n/*视频高标清*/\n\n.pdq-controll-wrap .pdq-play-menulist {\n  float: right;\n  font-size: 14px;\n  height: 40px;\n  width: 80px;\n  margin-top: 6px;\n  color: #fff;\n  font-family: \"微软雅黑\";\n  position: relative;\n}\n\n.pdq-controll-wrap .pdq-play-menulist .pdq-course-list {\n  position: absolute;\n  bottom: 40px;\n  left: 0;\n  width: 80px;\n  z-index: 4;\n  display: none;\n}\n\n.pdq-controll-wrap .pdq-play-menulist .pdq-course-list li {\n  padding: 8px 0px;\n  color: #fff;\n  width: 80px;\n  text-align: center;\n  cursor: pointer;\n  font-size: 12px;\n  background: #070c11;\n}\n\n.pdq-controll-wrap .pdq-play-menulist .pdq-course-list li:hover {\n  background: #1f2429;\n  color: #f01616;\n}\n\n.pdq-controll-wrap .pdq-play-menulist .pqd-menu-text {\n  text-align: center;\n  line-height: 40px;\n  cursor: pointer;\n  font-size: 12px;\n  width: 80px;\n}\n\n.pdq-controll-wrap .pdq-play-menulist .pqd-menu-text.active {\n  color: #f01616;\n  background: #1f2429;\n}\n/*全屏按钮*/\n\n.pdq-play-fullscreen {\n  width: 40px;\n  height: 40px;\n  background: url(../assets/fullScreen.png) no-repeat center;\n  float: right;\n  cursor: pointer;\n  margin-top: 6px;\n}\n\n.pdq-play-fullscreen.cancleScreen {\n  background: url(../assets/smallScreen.png) no-repeat center;\n}\n/*视频播放倍数*/\n\n.pdq-controll-wrap .pdq-playback-rate {\n  float: right;\n\n  height: 40px;\n  width: 80px;\n  margin-top: 6px;\n  color: #ccc;\n  position: relative;\n  font-size: 14px;\n  font-family: \"微软雅黑\";\n}\n\n.pdq-controll-wrap .pdq-playback-rate .pdq-playback-list {\n  position: absolute;\n  bottom: 40px;\n  left: 0;\n  z-index: 4;\n  display: none;\n}\n\n.pdq-controll-wrap .pdq-playback-rate .pdq-playback-list li {\n  padding: 8px 0px;\n  color: #fff;\n  width: 80px;\n  text-align: center;\n  cursor: pointer;\n  font-size: 12px;\n  background: #070c11;\n}\n\n.pdq-controll-wrap .pdq-playback-rate .pdq-playback-list li:hover {\n  background: #1f2429;\n  color: #f01616;\n}\n\n.pdq-controll-wrap .pdq-playback-rate .pdq-playback-text {\n  text-align: center;\n  line-height: 40px;\n  cursor: pointer;\n  font-size: 12px;\n}\n\n.pdq-controll-wrap .pdq-playback-rate .pdq-playback-text.active {\n  color: #f01616;\n  background: #1f2429;\n}\n/*加载动画*/\n\n.pdq-load-wrap {\n  width: 100%;\n  height: 100%;\n  z-index: 21474836450;\n  background: #1f2429;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n\n.pdq-load-wrap .pdq-loading-list {\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  width: 80px;\n  height: 30px;\n  margin: auto;\n}\n\n.pdq-load-wrap .pdq-loading-list i {\n  float: left;\n  margin: 0 4px;\n  display: block;\n  width: 5px;\n  height: 30px;\n  background: #fff;\n  -webkit-transform: scaleY(0.8);\n  -ms-transform: scaleY(0.8);\n  transform: scaleY(0.8);\n  -webkit-animation: load 1.2s infinite;\n  animation: load 1.2s infinite;\n}\n\n.pdq-load-wrap .pdq-loading-list i:nth-child(2) {\n  -webkit-animation-delay: 0.1s;\n  animation-delay: 0.1s;\n}\n\n.pdq-load-wrap .pdq-loading-list i:nth-child(3) {\n  -webkit-animation-delay: 0.2s;\n  animation-delay: 0.2s;\n}\n\n.pdq-load-wrap .pdq-loading-list i:nth-child(4) {\n  -webkit-animation-delay: 0.3s;\n  animation-delay: 0.3s;\n}\n\n.pdq-load-wrap .pdq-loading-list i:nth-child(5) {\n  -webkit-animation-delay: 0.4s;\n  animation-delay: 0.4s;\n}\n\n.pdq-load-wrap .pdq-loading-list i:nth-child(6) {\n  -webkit-animation-delay: 0.5s;\n  animation-delay: 0.5s;\n}\n\n@-webkit-keyframes load {\n  0%,\n  40%,\n  100% {\n    -webkit-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n  }\n  20% {\n    -webkit-transform: scaleY(01);\n    transform: scaleY(01);\n  }\n}\n\n@keyframes load {\n  0%,\n  40%,\n  100% {\n    -webkit-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n  }\n  20% {\n    -webkit-transform: scaleY(01);\n    transform: scaleY(01);\n  }\n}\n/*控制器消失动画*/\n/*@keyframes vhide {\n    0% {opacity: 1;}\n    100% {opacity: 0;}}\n\n  @-webkit-keyframes vhide {\n    0% {opacity: 1;}\n    100% {opacity: 0;}\n  }\n  \n  .vhidden {\n    animation: vhide 10.5s ease-in;\n    -webkit-animation: vhide 10.5s ease-in;\n    animation-fill-mode:forwards;\n    -webkit-animation-fill-mode: forwards;\n  }*/\n/*暂停*/\n\n.pdq-right-pause {\n  position: absolute;\n  width: 46px;\n  height: 46px;\n  background: #eee url(../assets/pause-right.png) no-repeat center;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  top: 0px;\n  margin: auto;\n  border-radius: 50%;\n  cursor: pointer;\n  z-index: 21474836459;\n  display: none;\n}\n\n/**/\n#pdq-isLogin-box {\n    z-index: 99129381293819;\n    top: 0px;\n    left: 0;\n    height: 50px;\n    text-align: center;\n    font-size: 14px;\n    background: #333;\n    opacity: 0.8;\n    line-height: 50px;\n    position: absolute;\n    width: 100%;\n    font-family: \"微软雅黑\"\n}\n\n    #pdq-isLogin-box a {\n        color: #ac7734;\n        margin: 0 10px;\n    }\n\n.pdq-prompt-box {\n    z-index: 99129381293819;\n    top: 0px;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    margin: auto;\n    width: 240px;\n    padding: 5px;\n    text-align: center;\n    font-size: 14px;\n    background: #333;\n    opacity: 0.8;\n    position: absolute;\n    font-family: \"微软雅黑\";\n    height: 25px;\n    line-height: 25px;\n    border-radius: 4px;\n    /*-webkit-transition: 0.3s cubic-bezier(0.42, 0.4, 0.13, 0.85)*/\n    -webkit-transition: all 0.3s ease;\n    -moz-transition: all 0.3s ease;\n    -o-transition: all 0.3s ease;\n    -ms-transition: all 0.3s ease;\n    transition: all 0.3s ease;\n}\n.pdq-switch-box {\n    z-index: 99129381293819;\n    border-radius: 4px;\n    width: 200px;\n    position: absolute;\n    bottom: 60px;\n    left: 20px;\n    background: #333;\n    opacity: 0.8;\n    text-align: center;\n    padding: 5px;\n    height: 25px;\n    line-height: 25px;\n    font-family: \"微软雅黑\";\n    -webkit-transition: all 0.3s ease;\n    -moz-transition: all 0.3s ease;\n    -o-transition: all 0.3s ease;\n    -ms-transition: all 0.3s ease;\n    transition: all 0.3s ease;\n}\n```\n\n**html 代码**\n\n```html:run\n<body onselectstart=\"return false\">\n	<div class=\"content-box\">\n		<div id=\"videoObject\">\n			<video id=\"videoView\" class=\"videoView\" src=\"\" autoplay=\"autoplay\" oncontextmenu=\"return false;\"></video>\n			<!--加载动画-->\n			<div id=\"pdq-load-wrap\" class=\"pdq-load-wrap\">\n				<ul id=\"pdq-loading-list\" class=\"pdq-loading-list\">\n					<i></i>\n					<i></i>\n					<i></i>\n					<i></i>\n					<i></i>\n					<ul>\n			</div>\n			<!--控制器 S-->\n			<div id=\"pdq-controll-wrap\" class=\"pdq-controll-wrap vhidden\">\n				<div id=\"pdq-progressBar\" class=\"pdq-progressBar\">\n					<div id=\"pdq-progress-hidebox\" class=\"pdq-progress-hidebox\">\n						<div id=\"pdq-progress-mouse-bar\" class=\"pdq-progress-mouse-bar\"></div>\n						<div id=\"pdq-slider-button\" class=\"pdq-slider-button\"></div>\n						<div id=\"pdq-progress-bgh\" class=\"pdq-progress-bgh\"></div>\n						<div id=\"pdq-progress-buff\" class=\"pdq-progress-buff\"></div>\n						<span id=\"pdq-progress-timeShow\" class=\"pdq-progress-timeShow\">00:00</span>\n					</div>\n					<div id=\"pdq-progress-bgs\" class=\"pdq-progress-bgs\"></div>\n				</div>\n				<!--视频进度条-->\n				<div id=\"pdq-plago\" class=\"pdq-plago\"></div>\n				<!--暂停/播放-->\n				<div id=\"pdq-play-timer\" class=\"pdq-play-timer\">\n					<span id=\"pqd-nowTime\" class=\"pqd-nowTime\">00:00</span>\n					<span id=\"pdq-allTime\" class=\"pdq-allTime\">00:00</span>\n				</div>\n				<!--视频时间-->\n				<div id=\"pdq-play-volume\" class=\"pdq-play-volume\">\n					<div id=\"pdq-play-icon\" class=\"pdq-play-icon\"></div>\n					<div id=\"pdq-volume-scroll\" class=\"pdq-volume-scroll\">\n						<div id=\"vloume-roud\" class=\"vloume-roud\"></div>\n						<div id=\"vloume-roud-bg\" class=\"vloume-roud-bg\"></div>\n						<div id=\"vloume-roud-slider\" class=\"vloume-roud-slider\"></div>\n					</div>\n				</div>\n				<!--视频音量-->\n				<div id=\"pdq-play-fullscreen\" class=\"pdq-play-fullscreen\"></div>\n				<!--全屏按钮-->\n				<div id=\"pdq-playback-rate\" class=\"pdq-playback-rate\">\n					<ul id=\"pdq-playback-list\" class=\"pdq-playback-list\">\n						<li>1.0x</li>\n						<li>2.0x</li>\n						<li>3.0x</li>\n						<li>4.0x</li>\n					</ul>\n					<div id=\"pdq-playback-text\" class=\"pdq-playback-text\">1.0x</div>\n				</div>\n				<!--视频菜单-->\n				<div id=\"pdq-play-menulist\" class=\"pdq-play-menulist\">\n					<ul id=\"pdq-course-list\" class=\"pdq-course-list\">\n						<li>高清</li>\n						<li>标清</li>\n						<li>流畅</li>\n					</ul>\n					<div id=\"pqd-menu-text\" class=\"pqd-menu-text\">标清</div>\n				</div>\n				<!--视频类型-->\n				<div id=\"pdq-play-course-type\" class=\"pdq-play-course-type\">\n					<ul id=\"pdq-playlist\" class=\"pdq-playlist\">\n						<li>重点</li>\n						<li>难点</li>\n						<li>复习</li>\n						<li>全部</li>\n					</ul>\n					<div id=\"pdq-type-text\" class=\"pdq-type-text\">全部</div>\n				</div>\n				<!--视频播放倍数-->\n			</div>\n			<div id=\"pdq-right-pause\" class=\"pdq-right-pause\"></div>\n		</div>\n	</div>\n        <script type=\"text/javascript\">\n            $(function () {\n                new XPVideoPlay($(\"#videoView\"), {\n                    videoUrl: \"video.json\",	   //视频数据\n                    volume: \"50%\", 			   //初始化音量大小\n                    positionPlay: 0, 		   //初始化播放位置秒为单位;\n                    watermarkName: \"移动水印文字\",    //水印文字\n                    watermarkTime: 10,      //水印展现时间\n                    markWaitiTime:4000,     //水印等待时间\n                    type: \"流畅\"\n                });\n            });\n\n</script>\n</body>\n```', null);
INSERT INTO `b_article_detail` VALUES ('35', '50', '![原生javascript上传图片带进度条](attimg://article/content/picture/201703/22/180824me8kx39le4e3xwe3.png)\n\n\n![原生javascript上传图片带进度条](attimg://article/content/picture/201703/22/180822xtj8u4muuuf7a4tc.png)\n\n\n![原生javascript上传图片带进度条](attimg://article/content/picture/201703/22/180824w1s190wtrzww6ww9.png)\n\n\n\n[原生javascript上传图片带进度条](attach://b9633dc07ae2e22c803bf314a6b371b6)\n**javascript 代码**\n\n```javascript:run\n ;\n  ;\n (function(w) {\n     var error = \"上传控件不支持您的浏览器！\";\n     // 构造函数\n     function UploadImg(option) {\n         $u = this;\n         $u.option = option;\n         $u.init($u.option);\n     }\n     UploadImg.prototype = {\n         //初始化\n         init: function() {\n             var $u = this;             \n             //template\n             $u.addupLoader =\n                 \'<form  enctype=\"multipart/form-data\">\' +\n                 \'<label style=\"display:block;width:100%;cursor:pointer;height:100%;position: absolute;\">\' +\n                 \'<input  style=\"display:none\" type=\"file\" capture=\"camera\"  name=\"file\"/>\' +\n                 \'</label>\' +\n                 \'</form> \' +\n                 \'<img src=\"\"  width=\"\' + $u.option.viewWith + \'\"  height=\"\' + $u.option.viewHeight + \'\" />\' +\n                 \'<div class=\"upload-progress\"><span  class=\"upload-son\">等待中……</span></div>\' +\n                 \'<div class=\"mask-Div\">\' +\n                 \'<div class=\"mask-show\"></div>\' +\n                 \'<div class=\"button-div\">\' +\n                 \'<span class=\"upload-btn\"></span>\' +\n                 \'<span class=\"deleteImg-btn\"></span></div>\' +\n                 \'</div>\';\n             $u.wrap = $($u.option.el);\n             $u._creatFrom();\n             $u.eventChange($u.wrap.childNodes);\n         },\n         //生成form模板\n         _creatFrom: function() {\n             this.wrap.innerHTML = $u.addupLoader;\n         },\n         _removeFrom: function() {\n             this.wrap.innerHTML = \"\";\n         },\n         //事件触发\n         /*\n          *对于onchange事件若值没有发生改变的话\n          *此事件就会失效所以在这里打算将DOM移除\n          *直接初始化所有方法和事件\n          *\n          */\n        /**\n         *@method (eventChange) \n         *@param {childArr} 参数为数组集合             \n         */\n         eventChange: function(childArr) {\n             var $u = this;\n            //提交form表单\n             addEvent(childArr[0], \'change\', function(e) { \n                //保存当前this对象  \n                 var thisForm = this;                           \n                 if (!thisForm[\'file\'].files.length == 0) {\n                      $u._removeFrom();\n                      $u.init();\n                      testWidthHeight(e,function(iSsize){\n                        if(!iSsize){  \n                             alert(\"上传的尺寸为:长为\"+$u.option.Max_Width +\"宽为\"+$u.option.Max_Height); \n                             return false; \n                         }\n                         childArr[2].setAttribute(\'src\', \"\");\n                         childArr[3].style.display = \'block\';\n                         $u.wrap.style.background = \"#f3f3f3\";\n                         //发送post请求\n                         $u.ajaxPost(thisForm, $u.option.url, function(result) {\n                             //post成功\n                             var data = JSON.parse(result);\n                             $u.maskEvent(childArr);\n                             childArr[2].setAttribute(\'src\', data.url);\n                             childArr[3].style.display = \'none\';\n\n                         }, function(error) {\n                                 //post 失败 \n                                 console.log(error);\n                         }, childArr);\n                     });\n                 } else {         \n                     alert(\"上传个数不能为0\");           \n                     return false;\n                 }\n\n             });\n            /**\n            *@method (testWidthHeight) 获取上传尺寸大小\n            *@param {e} 事件对象\n            *@param {callback} 回调函数              \n            */\n             function testWidthHeight(e,callback) {\n                var isSize;\n                var forms = e.target;\n                var reader = new FileReader();\n                reader.onload = function () { \n                     var dataURL = reader.result;  \n                     var image = new Image();\n                     image.onload=function(){  \n                         var width = image.width;\n                         var height = image.height;\n                         isSize = width <= $u.option.Max_Width && height  <= $u.option.Max_Height; \n                         if(typeof callback == \'function\')  {\n                                callback(isSize);\n                         }                     \n                    };         \n                    image.src = dataURL;\n                }; \n                reader.readAsDataURL(forms.files[0]);   \n                return  isSize;    \n             }\n         },\n         //遮罩层上的是事件\n         maskEvent: function(childArr) {\n             $u = this;\n             var addBtn = childArr[4].childNodes[1].childNodes[0];\n             var deleBtn = childArr[4].childNodes[1].childNodes[1];\n             //当鼠标滑过\n             addEvent($u.wrap, \"mouseover\", function() {\n                 if (childArr[2].getAttribute(\'src\')) {\n                     childArr[4].style.top = 0;\n                 }\n             });\n             //当鼠标离开\n             addEvent($u.wrap, \"mouseout\", function() {\n                 childArr[4].style.top = -300 + \'px\';\n             });\n             //修改\n             addEvent(addBtn, \'click\', function() {\n                 childArr[0][0].click();\n             });\n             //删除\n             addEvent(deleBtn, \'click\', function() {\n                 $u.wrap.style.backgroundImage = \"url(add-bg-upload1.jpg)\";\n                 childArr[2].setAttribute(\'src\', \"\");\n             });\n         },\n       /**\n        *@method (ajaxPost) 上传方法\n        *@param {fm} 当前form表单\n        *@param {url} url地址 \n        *@param {fnSuc} 成功回调   \n        *@param {fnErr} 失败回调 \n        *@param {childArr} 节点集合              \n        */\n         ajaxPost: function(fm, url, fnSuc, fnErr, childArr) {\n             var $u = this;\n             //进度条\n             var proGress = childArr[3].childNodes[0];\n             if (window.XMLHttpRequest) {\n                 var xhr = new XMLHttpRequest();\n             } else {\n                 var xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n             }\n             //data数据 \n             var data = new FormData(fm);\n             xhr.onreadystatechange = function() {\n                 if (xhr.readyState == 4) {\n                     //成功回调\n                     if (xhr.status == 200) {\n                         fnSuc(xhr.responseText);\n                     } else {\n                         if (fnErr) {\n                             fnErr(xhr.status);\n                         }\n                     }\n                 }\n             };\n             //监听上传进度            \n             addEvent(xhr.upload, \"progress\", uploadProgress);\n             //post后台\n             xhr.open(\'post\', url);\n             //发送数据\n             xhr.send(data);\n             //上传进度\n             function uploadProgress(evt) {\n                 var loaded = evt.loaded; //已上传的文件大小\n                 var allTotal = evt.total; //总大小\n                 var per = Math.floor((loaded / allTotal) * 100) + \'%\';\n                 proGress.innerHTML = per;\n                 proGress.style.width = per;\n             }\n         },\n\n     };\n     //获取元素\n     function $(selectors) {\n         return document.querySelector(selectors);\n     }\n     //事件监听\n     function addEvent(el, type, fn) {\n         if (el.addEventListener) {\n             el.addEventListener(type, fn, false);\n         } else if (el.attachEvent) {\n             el.attachEvent(\'on\' + type, function() {\n                 fn.call(el);\n             });\n         } else {\n             throw new Error(\'not supported or DOM not loaded\');\n         }\n     }\n     //判断浏览器是否存在file属性\n     if (window.File && window.FileList) {\n              window.UploadImg = UploadImg;\n     } else {\n        alert(error);\n         return false;\n     }\n    \n })(window);\n```\n\n\n**PHP**\n\n```html:run\n<?php\n$file=$_FILES[\'file\'];\nforeach ($file as $key => $value) {\n    $$key=$value;\n}\n$path=\'upload/\'.time().strtolower(strstr($name, \'.\'));  //修改上传文件的名称,strstr($name, \'.\')是获取后缀名\nmove_uploaded_file($tmp_name,$path);\n$path=strstr($path,$path[0]);  //图片的存储地址\n$arr=array(    \n    \"url\"=>$path\n);\n$json=json_encode($arr);  //json\necho $json;\n?>\n```\n\n\n**css 代码**\n\n```css:run\n .couser-img-upload {\n            width:280px;\n            height:160px;               \n            cursor:pointer;\n            position: relative;\n            overflow: hidden;\n            background:url(add-bg-upload1.jpg);              \n        }\n        .couser-img-upload:hover{\n            border: 2px solid #00caac;\n            background:url(add-bg-upload.jpg);\n\n        }\n        .kechenFengMian {\n             display:none;\n        }\n        .upload-progress{\n            display: none;\n            width: 90%;\n            position: absolute;               \n            overflow: hidden;\n            border:1px solid #00caac;\n            border-radius: 8px;\n            top: 50%;\n            margin-top: -7.5px;\n            left: 50%;\n            padding: 2px;\n            margin-left:-46%;\n            font-size: 12px;\n        }\n        .upload-progress .upload-son{\n            display: inline-block;\n            background: #00caac;\n            border-radius: 8px;\n            text-align: center;\n            color: #fff;\n        }\n        .mask-Div{\n            position: absolute;\n            top: -300px;\n            width: 100%;\n            height: 100%;\n          \n        }\n        .mask-Div .mask-show{\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            background: #000;\n            opacity: 0.5;\n        }\n        .mask-Div .button-div{\n            width: 140px;\n            height: 50px;\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            margin-left: -70px;\n            margin-top: -25px;\n        }\n        .mask-Div .button-div span{\n            display: block;\n            width: 50px;\n            height: 50px;\n            border-radius: 50%;\n            overflow: hidden;\n             background:url(tianjiashanchu.png) no-repeat;\n          \n        }\n        .mask-Div .button-div span.upload-btn{              \n            background-position: 0px 0px;\n            float: left;\n\n        }\n        .mask-Div .button-div span.deleteImg-btn{\n            background:url(tianjiashanchu.png) no-repeat;\n            background-position: -50px 0px ;\n            float: right;\n        }\n        .mask-Div .button-div span.upload-btn:hover{\n             background-position: 0px -50px ;\n        }\n        .mask-Div .button-div span.deleteImg-btn:hover{\n             background-position: -50px -50px ;\n        }\n```\n\n**html 代码**\n\n```html:run\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"uploadImg.js\"></script>\n  \n</head>\n<body>\n\n\n\n\n<div class=\"couser-img-upload\"></div> \n\n<script type=\"text/javascript\"> \n     new UploadImg({\n            el: \".couser-img-upload\",\n            url: \'./upload.php\',\n            Max_Width: 1920,\n            Max_Height: 280,\n            viewWith: 928,\n            viewHeight: 134\n        });\n</script>\n</body>\n</html>\n```', null);
INSERT INTO `b_article_detail` VALUES ('36', '51', '```\n和路径类似，主机名是指同一个域下的不同主机，例如：www.sosuo8.com和blog.sosuo8.com就是两个不同的主机名。默认情况下，一个主机中创建的cookie在另一个主机下是不能被访问的，但可以通过domain参数来实现对其的控制，其语法格式为： \ndocument.cookie=\"name=value;domain=cookieDomain\"; \n以sosuo8为例，要实现跨主机访问，可以改写为： \ndocument.cookie=\"name=value;domain=.sosuo8.com\"; \n这样，所有的sosuo8.com下的主机都可以访问该cookie\n```', null);
INSERT INTO `b_article_detail` VALUES ('37', '52', '```\n在网页操本地文件做上传时候通常都是用INPUT[type=file]控件，\n这个控件的设计本身就很蛋痛的，\n当INPUT[type=file]控件上已经选择过一次文件之后，\n再次点击它选择同一个文件时change事件就不会触发。\n因为第二次选择后里面的文字和第一次是一样的，\n当然这页恰好诠释英文change 的意思 -。-  \n你不曾改变 我为何要给予回应。\n```\n##### 解决这个问题方法\n```\n<input type=\"file\" id=\"fileupload\" name=\"file\" /> \n```\n##### 第一种\n``` \nvar obj = document.getElementById(\'fileupload\') ; \nobj.select(); \ndocument.selection.clear(); \n```\n##### 第二种利用outerHTML进行替换\n```\nvar obj = document.getElementById(\'fileupload\') ; \nobj.outerHTML=obj.outerHTML; \n```\n\n##### 如果是在vue中\n```\n<input type=\"file\" ref=\"feedbakcImg\" @change=\"chooseImg\" name=\"file\" id=\"file\">\n</span>\nthis.$refs.feedbakcImg.value =\'\'', null);
INSERT INTO `b_article_detail` VALUES ('38', '53', '```\n\n// 引用node path 对象 获取路径\nvar path  = require(\'path\');\n// 打包生成html 文件 与根目录index.html  相关联\nvar htmlWebpackPlugin = require(\'html-webpack-plugin\')\nmodule.exports = {\n  context: __dirname,\n  // 入口文件\n  entry: \'./src/app.js\',\n  // 打包后文件输出\n  output: {\n    path: path.resolve(__dirname, \'dist/\'),\n    // 打包生成后点文件名 本地路径\n    filename: \'js/[name].js\',  \n  },\n  // resolve.alias配置项通过别名来把原来导入路径映射成一个新的导入路径。所以我们可以直接用@符号来代表 src文件下所有的资源\n  resolve: {\n    extensions: [\'.js\', \'.vue\', \'.json\'],\n    alias: {\n      \'vue$\': \'vue/dist/vue.esm.js\',\n      \'@\': resolve(\'src\')\n    }\n  },\n   // 配置资源引用\n   module: {\n    loaders:[\n      {\n        test: /\\.js$/,  // 匹配所有的js文件  支持es6 语法\n        loader: \'babel-loader\',\n        //exclude: \'./node_modules/\',  // 排出需要打包的JS文件\n        include: path.resolve(__dirname, \'./src/\'), // 包含需要打包的JS文件\n        query: {\n          presets: [\'latest\']\n        }\n      },\n      // 配置模版引擎\n      {\n        test: /\\.html$/,\n        use: [\n          \'html-loader\'\n        ]\n      },\n      // 配置css  引用\n      {\n        test:/\\.(less|css)$/,       \n        use: [\n          \'style-loader\',\n          {\n            loader: \'css-loader\',\n            options: { importLoaders: 1 } //这里可以简单理解为，如果css文档中有import 进来的文档也进行处理\n          },\n          \'less-loader\',  // 处理less 后缀多文件        \n          {\n            loader: \'postcss-loader\',\n            options:{ // 如果没有options这个选项将会报错 No PostCSS Config found\n              plugins:(loader) => [\n                require(\'autoprefixer\')({ root: loader.resourcePath}),\n                require(\'autoprefixer\')(), // css 兼容\n                require(\'cssnano\')() // 压缩\n              ]\n            }\n          }\n        ]\n      },\n      // 配置图片规则 \n      {\n        test: /\\.(png|jpg|png|gif|svg)$/i,\n        use:[\n          {\n            loader: \'url-loader\',\n            options: {\n              limit: 10000,\n              name: \'assets/[name].[hash:5].[ext]\'\n            }\n              \n          }\n        ]\n      }\n      \n    ]   \n  },\n  plugins: [\n    new htmlWebpackPlugin({\n      filename:\'index.html\',  // 定义生成html 文件名\n      template: \'index1.html\',// 定义开发环境中根目录关联的html模版名称\n      inject:\'body\',           // Js脚本需要插入在页面那个标签的位置\n      title: \'webpack is good\', // 通过ejs 模版语法可以取到这个值<%= htmlWebpackPlugin.options.title %>\n      // 打包上线压缩\n      minify: {\n        // 删除注释\n        removeComments: true,\n        // 删除空格\n        collapseWhitespace: false\n      } \n    })\n  ]\n}\n```', null);
INSERT INTO `b_article_detail` VALUES ('39', '56', '## 搭建自己简单的ssr-demo\n\n\n[demo地址](https://note.youdao.com/) https://github.com/darkNightMan/vue-ssr\n### Build Setup\n\n```\n  # install dependencies   安装依赖\n  npm install\n\n  # serve no reload at localhost:10085   ## 本地开发模式\n  npm run dev\n\n  # node serve  reload at localhost:8022  ## 开启node服务\n  npm run start\n\n  # build for production with minification  ## 打包客户端\n  npm run build  \n\n  # build for production with SSR  ##  ssr前后端同构打包\n  npm run ssr\n\n```\n### 项目结构\n```\n.\n├── README.md\n├── build\n│   ├── webpack.base.conf.js    ##  webpack 公共配置\n│   ├── webpack.dev.conf.js     ##  webpack 本地开发配置\n│   ├── webpack.prod.conf.js    ## 打包client端的配置\n│   └── webpack.server.conf.js  ## 打包server端的配置\n├── config\n│   ├── buildConf.js      ## 打包配置项\n│   ├── dev.env.js        ## 环境变量配置\n│   ├── devServerConf.js  ## 开发配置项\n│   └── prod.env.js       ## 环境变量配置    \n├── favicon.ico\n├── index.dev.html ## 本地开发模板\n├── index.pro.html  ## \n├── package-lock.json\n├── package.json\n├── src\n│   ├── App.vue     #  根 vue组件\n│   ├── app.js      # 整合 router,store,vuex 的入口文件\n│   ├── components  # 组件\n│   │   ├── child.vue\n│   │   ├── test.vue\n│   │   ├── wang.vue\n│   │   └── ys.vue\n│   ├── entry-clinet.js   # 客户端js打包入口  生成bundle  \n│   ├── entry-server.js   # 服务端js打包入口  生成bundle\n│   ├── registerServiceWorker.js\n│   ├── router\n│   │   └── index.js\n│   └── store\n│       └── index.js\n└── start.js\n```\n\n```\n# 安装运行时包根据顺序解释\n# 1.axios - http 请求工具\n# 3.cross-env - 跨平台环境变量设置工具\n# 4.es6-promise - ie9 的 promise 支持\n# 5.express - node web 框架\n# 6.lru-cache - js 的 lru 缓存\n# 7.serialize-javascript - js 对象序列化为 js 代码\n# 8.vue - 这个不用说了吧\n# 9.vue-router - vue 的前端路由通过 ssr 后有后端路由效果\n# 10.vuex - vue 的状态管理工具 ssr 中前后端同步\n# 11.vuex-router-sync - 路由同步工具\n\n\n# 开发&&打包时包\n# 1.autoprefixer - css 前缀自动生成\n# 2.buble - babel 的类似工具以后更换看看会不会有什么影响\n# 3.buble-loader - 同上\n# 4.css-loader - css 加载器\n# 4.vue-style-loader -\n# 5.url-loader - file-loader 的包装，图片可以以base64导入\n# 6.html-webpack-plugin - html 的资源加载生成\n# 7.rimraf - 跨平台的删除工具\n# 8.stylus - stylus 加载器类似 sass 但是个人不喜欢用 sass 所以用 stylus\n# 9.stylus-loader - 同上\n# 10.sw-precache-webpack - service-worker 支持\n# 11.vue-loader - vue 文件加载器\n# 12.vue-template-compiler - template to render\n# 13.webpack - 模块打包工具\n# 14.webpack-dev-middleware - 监听文件改动\n# 15.webpack-hot-middleware - 热更新\n# 16.extract-text-webpack-plugin - 独立生成css\n```\n\n\n\n\n---\n### 前言\n##### 最近在琢磨ssr的渲染原理，通过这几天的学习和了解也看了很多文章和一些demo，对于一个新手来说学习成本相对会比较高，无论是对webpack的打包机制\n##### 和对vue生命周期的理解，以及对服务端node服务端掌握都是需要一定的积累的， 每个人的写法和讲解都有不同再刚开始接触的也是有很多疑问 \n##### 只能通过慢慢去理解别人消化的东西然后慢慢转换成自己理解范畴，所以自己也在不断试错和采坑中，所有打算重零开始自己搭建一个ssr-demo\n##### 方便于更好理解和学习服务端ssr渲染的原理并分享学习过程中遇到的问题需注意的地方同时希望能够对学习SSR的朋友起到一点帮助。\n \n---\n### 服务端渲染的优点\n  #####1.更好的SEO，搜索引擎爬虫可以抓取渲染好的页面\n  #####2.更快的内容到达时间（首屏加载更快），因为服务端只需要返回渲染好的HTML，这部分代码量很小的，所以用户体验更好\n\n### 服务端渲染的缺点\n  1.首先就是开发成本比较高，比如声明周期钩子函数(beforeCreate、created）能同时运行在服务端和客户端.\n  2.由于服务端渲染要用Nodejs做中间层，所以部署项目时，需要处于Node.js server运行环境。在高流量环境下，还要做好服务器负载和缓存策略\n\n\n## SSR的实现原理\n---\n\n### 先来一张图官方的图解\n![aratar](https://images2018.cnblogs.com/blog/701424/201805/701424-20180505045737014-897206613.png)\n##### 大概意思就是在服务端生成html片段，实际上当然是会复杂点，比如服务端返回html片段，客户端直接接受显示，不做任何操作的话\n##### 浏览器端无法触发点击事件这路由跳转这些的所以客户端便只需要激活这些静态页面，让他们变成动态的。\n##### 通过vue提供 vue-server-renderer  转换成静态html片段，返回给客户端。会在根节点上附带一个 data-server-rendered=\"true\" 的特殊属性。\n##### 让客户端 Vue 知道这部分 HTML 是由 Vue 在服务端渲染的，并且应该以激活模式进行挂载\n\n---\n### 需注意的地方\n##### vue-server-renderer 的版本 要与 vue版本一致\n##### 服务端渲染只会执行 vue 的两个钩子函数 beforeCreate 和 created\n##### 服务端渲染无法访问 window 和 document等只有浏览器才有的全局对象。\n##### 假如你项目里面有全局引入的插件和JS文件或着在beforeCreate和created用到了的这些对象的话，是会报错的，因为服务端不存在这些对象。\n\n---\n\n\n#### 根据图解一步一步来拆分代码\n\n从图可以看出app.js里面包含了vue 组件 vuex状态管理器 router路由...所以接下来将对我们所熟悉的 这几个文件对这些代码分隔进行一些改造\n为了防止后端渲染中很容易导致交叉请求状态污染，导致数据流被污染了。所以避免状态单例,我们不应该直接创建一个应用程序实例，而是应该\n暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例，同样router和store入口文件也需要重新创建一个实例这几个文件都已\ncreateXXX这种方式声明函数名\n\n### store.js 改造 暴露一个createStore 工厂函数\n```\nimport Vue from \'vue\';\nimport axios from \'axios\';\nimport Vuex from \'vuex\';\n\nVue.use(Vuex);\n\n// 创建一个工厂函数\nexport  function createStore() {\n  return new Vuex.Store({\n    state: {\n      article: {},\n      weather: {}\n    },\n    actions: {\n      async GET_ARTICLE({commit}) {\n        try {\n          const {data} = await axios.get(\'https://www.86886.wang/api/article/5b38d0098c98760acf25bfac\')\n          commit(\'SET_ARTICLE\', data)\n        } catch (ex) {\n          console.log(ex)\n        }\n      },\n\n      async GET_WEATHER ({commit}) {\n        try {\n        const {data} = await axios.get(\'http://t.weather.sojson.com/api/weather/city/101030100\')\n        commit(\'SET_WEATHER\', data.data)\n        }catch (ex) {\n            console.log(ex)     \n        }\n      },\n    \n    },\n    mutations: {\n      SET_ARTICLE(state, data) {\n        state.article = data.data\n      },\n      SET_ARTICLE_VIEWS (state, data) {\n        state.article.views = data\n      },\n      SET_WEATHER(state, data) {\n        state.weather = data\n      }\n    }\n  })\n}\n```\n---\n#### router.js 同样改造 暴露一个createRouter 工厂函数方便每次访问创建一个新的实例\n\n```\nimport Router from \'vue-router\'\nimport Vue from \'vue\'\nimport Wang from \'../components/wang.vue\'\nimport Test from \'../components/test.vue\'\nimport YS from \'../components/ys.vue\'\nVue.use(Router)\n\nexport function createRouter () {\n  return new Router({\n    mode: \'history\', // 路由必须是history模式 因为服务的不支持hash路由\n    routes: [\n      {\n        path: \'/\',\n        name: \'wang\',\n        component: Wang\n      },\n      {\n        path: \'/test.html\',\n        name: \'test\',     \n        component: Test\n      },\n      {\n        path: \'/ys.html/\',\n        name: \'ys\',     \n        component: YS\n      }\n    ]\n  })\n}\n \n```\n---\n### app.js 创建一个新的实例：\n```\n// app.js\nimport Vue from \'vue\'\nimport App from \'./App.vue\'\nimport { createRouter } from \'./router\'\nimport { createStore }from \'./store\'\nimport { sync } from \'vuex-router-sync\'\n// import \'./registerServiceWorker\'\nexport function createApp () {\n  // 创建 router 实例\n  const router = createRouter()\n  // 穿件 store 实列\n  const store = createStore()\n\n  // 同步路由状态(route state)到 store\n  sync(store, router)\n\n  const app = new Vue({\n    // 注入 router 到根 Vue 实例\n    router,\n    store,\n    render: h => h(App)\n  })\n  // 返回 app 和 router\n  return { app, router ,store}\n}\n```\n\n#### 接下来webpack打包入口的js代码 一个需要运行在客户端 一个运行在服务端\n\n\n##### 客户端打包入口 entry-client.js\n```\nimport { createApp } from \'./app\'\nimport App from \'./App.vue\';\nimport Vue from \'vue\'\nconst {app, router, store} = createApp()\n\n// 当路由再次切换时获取最新的数据填充在视图中\nVue.mixin({\n  // beforeMount () {\n  //   const { asyncData } = this.$options\n  //   if (asyncData) {\n  //     // 将获取数据操作分配给 promise\n  //     // 以便在组件中，我们可以在数据准备就绪后\n  //     // 通过运行 `this.dataPromise.then(...)` 来执行其他任务\n  //     this.dataPromise = asyncData({\n  //       store: this.$store,\n  //       route: this.$route\n  //     })\n  //   }\n  // },\n  //\n  beforeRouteEnter (to, from, next) {\n    console.log(\'beforeRouteEnter\')\n    next((vm)=>{\n      const { asyncData } = vm.$options\n      if (asyncData) {\n          asyncData({ store: vm.$store, route: vm.$route}).then(next).catch(next)\n      } else {\n          next()\n      }\n    })\n  },\n})\n\n\n// 把store中的state 替换成 window.__INITIAL_STATE__ 中的数据\nif (window.__INITIAL_STATE__) { \n  store.replaceState(window.__INITIAL_STATE__);\n}\nrouter.onReady(() => {\n  app.$mount(\'#app\')\n})\n```\n---\n\n##### 服务端打包入口 entry-server.js\n```\n    import { createApp } from \'./app\'\n    export default context => {\n         // 这一步操作是为了预先获取数据以后在将内容渲染到客户端\n      // 因为有可能会是异步路由钩子函数或组件，所以我们将返回一个 Promise， 以便服务器能够等待所有的内容在渲染前，\n      return new Promise((resolve, reject) => {\n        const { app, router, store } = createApp()\n        // 路由跳转\n        console.log(context)\n        router.push(context.url)\n        // 路由下异步组件和钩子函数解析完\n        router.onReady(() => {\n          // 返回目标位置或是当前路由匹配的组件数组\n          const matchedComponents = router.getMatchedComponents()\n          console.log(matchedComponents)\n          if (!matchedComponents.length) {\n            return reject({ code: 404 })\n          }\n          //  // 遍历路由下所以的组件，如果有需要服务端渲染的请求，则进行请求\n          Promise.all(matchedComponents.map(Component => {\n            if (Component.asyncData) {\n                return Component.asyncData({store,route: router.currentRoute })\n            }\n          })).then(() => {\n            // 在所有预取钩子(preFetch hook) resolve 后，\n            // 我们的 store 现在已经填充入渲染应用程序所需的状态。\n            // 当我们将状态附加到上下文，\n            // 并且 `template` 选项用于 renderer 时，\n            // 状态将自动序列化为 `window.__INITIAL_STATE__`，并注入 HTML。\n            context.state = store.state\n            resolve(app)\n          }).catch(reject)\n        }, reject)\n      })\n    }\n```\n##### ==*router.getMatchedComponents() 在测试中发现当调用这个方法时只能获取到当前路由第一个根组件里面asyncData 里面的方法==\n##### ==如果当前路由有多个子组件的话 并不能全部获取到如果在子组件预渲染数据的话此时可能还需要对改方法进行一些改造将当前路由==\n##### ==下所有的组件循环出来并调用每个组件里面的asyncData的方法==\n```\nimport Vue from \'vue\';\nimport App from \'./App.vue\';\nconst {app, router, store} = createApp()\nexport default context => {\n    const  prefetchFns = []\n      // 找到所有 prefetchData 方法\n    const components = App.components \n    for (let key in components) {\n      if (!components.hasOwnProperty(key)) continue;\n      let component = components[key];\n      if(component.asyncData) {\n          prefetchFns.push(component.asyncData({\n              store\n          }))\n      }\n    }\n    // 当所有的组件的数据请求完成以后再将store已经app 返回\n    return Promise.all(prefetchFns).then((res) => {\n        res.forEach((item, key) => {\n            Vue.set(store.state, `${item.tagName}`, item.data);\n        });\n        context.state = store.state;\n        return app;\n    });\n}\n```\n----\n#### 当我们把服务端代码运行起来后异步调用组件里面asyncData \n\ntest.vue\n```\n<template>\n  <div>\n    {{weather}}\n  </div>\n</template>\n\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: \"test\"\n    }\n  },\n  // 服务端来调用该函数\n  asyncData({store}) {\n    return store.dispatch(\'GET_WEATHER\') \n  },\n  computed: {\n    weather () {\n      return this.$store.state.weather\n    }\n  },\n  mounted (){\n    console.log(this.$store.state.route)\n  \n  },\n}\n</script>\n\n```\n### webpack.server 打包配置\n```\nconst merge = require(\'webpack-merge\');\nconst webpack  = require(\'webpack\');\nconst base = require(\'./webpack.base.conf.js\');\nconst VueSSRServerPlugin = require(\'vue-server-renderer/server-plugin\')\nconst serveConfig = merge(base, {\n  target: \'node\',\n  mode: \'production\',\n  entry: \'./src/entry-server.js\',    \n  \n  output: {\n    filename: \'server-bundle.js\', // bundle.js\n    libraryTarget: \'commonjs2\'\n  },\n  // 只打包dependencies配置 里面所依赖的包模块\n  externals: Object.keys(require(\'../package.json\').dependencies),\n  plugins: [\n    // new HtmlWebpackPlugin({\n    //   template: \'./src/index.ssr.html\',\n    //   filename: \'index.ssr.html\',\n    //   files: {\n    //     js: \'clinet.js\'\n    //   }, // client.js需要在html中引入\n    //   excludeChunks: [\'server\'] // server.js只在服务端执行，所以不能打包到html中\n    // }),\n    new webpack.DefinePlugin({\n      \'process.env.NODE_ENV\': JSON.stringify(process.env.NODE_ENV || \'development\'),\n      \'process.env.VUE_ENV\': \'\"server\"\'\n    }),\n    // 这是将服务器的整个输出\n    // 构建为单个 JSON 文件的插件。\n    // 默认文件名为 `vue-ssr-server-bundle.json`\n    new VueSSRServerPlugin()\n  ]\n});\nconsole.log(serveConfig,\"SERVERS\")\nmodule.exports = serveConfig\n```\n\n\n### webpack.client.js 客户端打包配置\n```\nconst path = require(\'path\')\nconst webpack = require(\'webpack\')\nconst merge = require(\'webpack-merge\')\nconst buildconfig = require(\'../config/buildConf\')\nconst devServer = require(\'../config/devServerConf\')\nconst baseWebpackConfig = require(\'./webpack.base.conf\')\nconst VueSSRClientPlugin = require(\'vue-server-renderer/client-plugin\')\nconst UglifyJSPlugin = require(\'uglifyjs-webpack-plugin\')\nconst MiniCssExtractPlugin = require(\'mini-css-extract-plugin\')\n\nconst assetsPath = function (_path) { // \n  /* 兼容多平台拼接编译输出文件路径 */\n  const assetsSubDirectory = process.env.NODE_ENV === \'production\'\n    ? buildconfig.build.assetsSubDirectory\n    : devServer.dev.assetsSubDirectory\n\n  return path.posix.join(assetsSubDirectory, _path)\n}\nmodule.exports = merge(baseWebpackConfig, {  \n  mode: \'development\',\n  devtool: \'#source-map\' ,\n  output: {\n    path: buildconfig.build.assetsRoot,\n    filename: assetsPath(\'js/[name].[chunkhash].js\'),\n    chunkFilename: assetsPath(\'js/[id].[chunkhash].js\')\n  },\n  plugins: [\n    // http://vuejs.github.io/vue-loader/en/workflow/production.html\n    new webpack.DefinePlugin({\n      \'process.env\': buildconfig.build.env\n    }),   \n    // 这个插件应该只用在 production 配置中，并且在loaders链中不使用 style-loader, 特别是在开发中使用HMR，因为这个插件暂时不支持HMR\n    new MiniCssExtractPlugin({ // 打包css  webpack4 之后貌似打包在js里面\n      filename: \'css/[name].css\',\n      chunkFilename: \'[id].css\',\n    }),  \n        // 此插件在输出目录中\n     // 生成 `vue-ssr-client-manifest.json`。\n    new VueSSRClientPlugin(),\n    // 因为VueSSRClientPlugin 插件生成bundle 所以这里不需要再生成html模板了\n    // new HtmlWebpackPlugin({\n    //   filename: buildconfig.build.index,\n    //   template: \'index.html\',\n    //   inject: true,\n    //   // favicon: path.resolve(__dirname, \'favicon.ico\'),s\n    //   // minify: { // 压缩的方式\n    //   //   removeComments: true,\n    //   //   collapseWhitespace: true,\n    //   //   removeAttributeQuotes: true       \n    //   // },\n    //   // // necessary to consistently work with multiple chunks via CommonsChunkPlugin\n    //   // chunksSortMode: \'dependency\'\n    // }),\n  ],\n  optimization: {\n    minimizer: [\n      new UglifyJSPlugin({\n        uglifyOptions: {\n          output: {\n            comments: false\n          },\n          compress: {\n            warnings: false,\n            drop_debugger: true,\n            drop_console: true\n          }\n        }\n      }),\n    ]\n   }\n})\n```\n\n### webpack.base.js\n\n```\n[Vue warn]: Error in beforeCreate hook: \"ReferenceError: window is not defined\"\nfound in\n---> <App> at src/App.vue\n       <Root>\nerror during render : /\nReferenceError: window is not defined\n    at n (server-bundle.js:1:38316)\n    at s (server-bundle.js:1:38404)\n    at t.exports (server-bundle.js:1:41977)\n    at Object.<anonymous> (server-bundle.js:1:7515)\n    at r (server-bundle.js:1:186)\n    at Module.<anonymous> (server-bundle.js:1:36978)\n    at r (server-bundle.js:1:186)\n    at VueComponent.<anonymous> (server-bundle.js:1:36829)\n    at VueComponent.u (server-bundle.js:1:3491)\n    at invokeWithErrorHandling (C:\\Users\\Administrator\\Desktop\\vue-ssr\\node_modules\\vue\\dist\\vue.runtime.common.dev.js:1850:57)\n```\n##### 需要注意的一个地方vue-style-loader  和 style-loader  默认的Webpack样式加载程序不是同构的\n##### 所以当打包出来是没问题可是运行在服务端就会报错了后来在github也有人遇到同样的问题看到尤大大的回答\n##### ![image](//cdn.files.qdfuns.com/article/content/picture/201904/16/181116foy7qgod0cz8t55t.png)\n##### 所以在这里使用vue-style-loader\n---\n```\nconst path = require(\'path\')\nconst buildConfig = require(\'../config/buildConf\')\nconst devServer = require(\'../config/devServerConf\') // devServer 配置\nconst VueLoaderPlugin = require(\'vue-loader/lib/plugin\');\nconst devMode = process.env.NODE_ENV !== \'production\';\nfunction resolve (dir) {\n  return path.join(__dirname, \'..\', dir)\n}\nmodule.exports  = {\n  entry: {\n    // \'babel-polyfill\': \'babel-polyfill\',\n    clinet: \'./src/entry-clinet.js\'\n  },\n  output: {\n    path: buildConfig.build.assetsRoot,\n    filename: \'[name].js\',\n    publicPath: process.env.NODE_ENV === \'production\'\n      ? buildConfig.build.assetsPublicPath\n      : devServer.dev.assetsPublicPath\n  },\n  resolve: {\n    extensions: [\'.js\', \'.vue\', \'.json\'],\n    alias: {\n      \'vue$\': \'vue/dist/vue.esm.js\',\n      \'@\': resolve(\'src\')\n    }\n  },\n  module: {\n    rules :[\n      {\n        test: /\\.js$/,\n        use: {\n            loader: \'eslint-loader\',\n            options: {\n                formatter: require(\'eslint-friendly-formatter\') // 默认的错误提示方式\n            }\n        },\n        enforce: \'pre\', // 编译前检查\n        exclude: /node_modules/, // 不检测的文件\n        include: [__dirname + \'/src\'], // 要检查的目录\n      },\n      {\n        test: /\\.(sa|sc|c)ss$/,\n        use: [\n          devMode ? \'vue-style-loader\' : MiniCssExtractPlugin.loader,  // 这里需要引用vue-style-loader 不能用使用 style-loader\n          \'css-loader\',\n          \'postcss-loader\',\n          \'sass-loader\',\n        ],\n      },\n      {\n        test: /.vue$/,\n        loader: \'vue-loader\' // 解析和转换 .vue 文件，提取出其中的逻辑代码 script、样式代码 style、以及 HTML 模版 template，再分别把它们交给对应的 Loader 去处理。      \n      },      \n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \'babel-loader\'\n      },     \n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        exclude: /node_modules/,\n        use: [{\n            loader: \'url-loader\',          \n            options: {\n              limit: 10000,\n              name: \'assets/[name].[hash:5].[ext]\'\n            }\n          }],       \n      },\n    ]\n  },\n  plugins: [\n    // make sure to include the plugin for the magic webpack\n    // 打包的时候vue-loader 报错 需要加载这个插件\n    new VueLoaderPlugin()\n  ],  \n}\n```\n\n####  当启动ssr渲染的时候 使用 index.pro.html模板\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>{{ title }}</title>\n</head>\n<body> \n     <!-- <div id=\"app\"></div> -->\n      <!-- 使用ssr此处注释 -->\n    <!--vue-ssr-outlet-->\n</body>\n</html>\n```\n\n#### 开发模式下使用 index.dev.html 模板\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>vue</title>\n  </head>\n  <body>\n      <div id=\"app\"></div>    \n  </body>\n</html>\n\n```\n\n#### 最后start.js node服务端代码\n---\n#### vue vue-server-renderer提供了 2个api方法 一个是 createRenderer() 和 createBundleRenderer()\n##### createRenderer需要传一个vue的实列\n##### createBundleRenderer无需传入app 实列对象通过webpack打包出来的bundle文件在使用 clientManifest 时，自动注入资源链接(asset links)和资源预加载提示(resource hints)\n##### 最后通过renderToString()方法，将Vue实例转换为字符串插入到html文件\n---\n\n\n```\nconst express = require(\'express\')\nconst fs = require(\'fs\')\nconst path = require(\'path\')\nconst server = express()\nconst { createBundleRenderer } = require(\'vue-server-renderer\')\nconst resolve = file => path.resolve(__dirname, file)\n\n// 在这里将webpack 打包出来的文件引入进来\nconst clientBundle = require(\'./dist/vue-ssr-client-manifest.json\') // 客户端 bundle\nconst serverBundle = require(\'./dist/vue-ssr-server-bundle.json\')   // 服务的 bundle\nconst template = fs.readFileSync(resolve(\'./index.pro.html\'), \'utf-8\')  // 渲染模板\n \nlet renderer\n\n  // 生成服务端渲染函数\nfunction createRenderer (serverbundle, clientBundle ,template) {\n  // 生成服务端渲染函数\n  return createBundleRenderer(serverbundle, {\n    // 推荐\n    runInNewContext: false,\n    // 模板html文件\n    template: template,\n    // client manifest\n    clientManifest: clientBundle\n  })\n}\n\nconst serve = (path, cache) => express.static(resolve(path), { // 静态资源设置缓存\n  maxAge: cache ? 60 * 60 * 24 * 30 : 0 \n})\n\nserver.use(\'/dist\', serve(\'./dist\', true)) // 静态资源\n\nrenderer = createRenderer(serverBundle, clientBundle, template)\n\n// \nfunction renderToString (context) {\n  return new Promise((resolve, reject) => {\n    renderer.renderToString(context, (err, html) => {\n      err ? reject(err) : resolve(html)\n    })\n  })\n}\n\nserver.get(\'*\',async(req, res) => {\n  // 未渲染好返回\n  if (!renderer) {\n    return res.end(\'waiting for compilation... refresh in a moment.\')\n  }\n  const handleError = err => {\n    if (err.url) {\n      res.redirect(err.url)\n    } else if (err.code === 404) {\n      res.status(404).send(\'404\')\n    } else {\n      res.status(500).send(\'500\')\n      console.error(`error during render : ${req.url}`)\n      console.error(err.stack)\n    }\n  }\n try {\n    res.setHeader(\'Content-Type\', \'text/html\')\n    const context = { title: \'SSR我来啦\', url: req.url  }\n    const html = await renderToString(context)\n    res.send(html)\n  } catch (error) {\n    handleError(error)\n  }\n}) \nserver.listen(8022, () => {\n  console.log(\'访问：http://127.0.0.1:8022\');\n});\n\n```\n\n\n#### 项目梳理\n\n#### 最后启动node服务测试ssr 服务端渲染查看页面源代码可以看到这一番景象服务端渲染成功了！\n```\n服务端渲染：http://127.0.0.1:8022/\n客户端渲染：http://localhost:10085/\n```\n![image](//cdn.files.qdfuns.com/article/content/picture/201904/16/181114llhlmyhdnhvnpklg.png)\n\n#### 首屏加载渲染速度对比通过谷歌浏览器开发者工具-performace面板来比较服务端渲染和客户端渲染\n\n#### 通过几张图来对比看看\n\n客户端渲染\n![image](//cdn.files.qdfuns.com/article/content/picture/201904/16/181120yohphhkohztdbl6k.png)\n\n服务端渲染\n![image](//cdn.files.qdfuns.com/article/content/picture/201904/16/181118pw3r3eo0c95f0zp5.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', null);
INSERT INTO `b_article_detail` VALUES ('40', '57', '**html 代码**\n\n```html:run\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n	<meta charset=\"UTF-8\">\n	<title>无缝轮播</title>\n	<script src=\"http://www.xipwang.cn/js/jquery.min.js\" type=\"text/javascript\" charset=\"utf-8\" ></script>\n</head>\n<style type=\"text/css\">\n*{ margin: 0; padding: 0 }\n#container{ position: relative;   overflow: hidden; margin: 0 auto;width: 100%}\n#container .main{ position: absolute; }\n#container .main .section{ float: left;}\n#container .main .section img{ display: block; }\n#container .pegelist{ position: absolute; bottom: 10px; width: 100% ; text-align: center;}\n#container .pegelist span{ width: 12px; height: 12px; display:inline-block; margin: 10px; background:#333; border-radius: 50%; cursor: pointer; }\n#container .pegelist .active{ border: 2px solid #fff;  background: none ;width: 10px; height: 10px;}\n#container .css-btn{ text-align: center; line-height:40px;  width: 40px; background: #333; height: 40px;  display: block; position: absolute;top: 45% ; z-index: 111; opacity: 0.8; color: #fff; cursor: pointer; display: none;}\n#container .css-btn:hover{ opacity: 0.5}\n#container .prev-btn{ left:10%;}\n#container .next-btn{ right: 10%}\n.progressBar{ position: absolute; width:0; height:5px;; bottom:0; background: #f00}\n</style>\n<body>\n\n<div id=\"container\"  data-Seamless>\n	<div class=\"main\">\n		<div class=\"section\"><img src=\"http://www.xipwang.cn/wp-content/uploads/2016/09/b4.jpg\" alt=\"\"  width=\"100%\"></div>\n		<div class=\"section\"><img src=\"http://www.xipwang.cn/wp-content/uploads/2016/09/b3.jpg\" alt=\"\"  width=\"100%\"></div>\n		<div class=\"section\"><img src=\"http://www.xipwang.cn/wp-content/uploads/2016/09/b2.jpg\" alt=\"\"  width=\"100%\"></div>\n		<div class=\"section\"><img src=\"http://www.xipwang.cn/wp-content/uploads/2016/09/b1.jpg\" alt=\"\"  width=\"100%\"></div> \n	</div>	\n</div>\n\n<script type=\"text/javascript\">\n;(function($,wd,dc,undefined){ \n	var  Seamless = (function(){\n	 function Seamless(element,options){  \n	 		this.element=element;\n	 		this.settings =$.extend(true, $.fn.Seamless.defaults,options ||{});			 		\n	 		this.init();			 	\n	 };\n	 Seamless.prototype ={\n 		init:function(){  \n 		    $this =this;\n 		    $this.show= null;\n 		    $this.index=0;\n 		    $this.flag=true;\n 		    $this.dom=$this.settings.domEle;\n 		    $this.setsize = $this.settings.setsize == false ?true :false \n 		    $this.width;//轮播宽度\n 		    $this.height;//轮播高度				 		   \n 		    $this.main=$this.element.find($this.dom.main);\n 		    $this.setions =$this.element.find($this.dom.sections);	\n\n 		    //是否设置轮播大小 		 		   \n 		  	this._setSize();\n\n 		  	//初始化轮播\n 		  	this.setSeamcss();\n\n 		  	//上一页切换\n 		  	this._prev();\n\n 		  	//下一页切换\n 		  	this._next();\n\n 		  	//是否自动轮播\n 		  	this.isAuto();\n\n 		},\n 		_setSize:function(){ //是否设置轮播大小			 			\n 			  $this =this\n 		    if($this.setsize){   \n 		    	 $this.width =$this.setions.width();\n				 $this.height = $this.setions.height();\n				 $this.element.width($this.width);\n				 $this.element.height($this.height);\n				 $this.setions.width($this.width); 						\n 		    }else{			 		    	\n 		    	 if($this.settings.width >$(window).width()){\n 		    	 	 $this.element.wrap(\'<div class=\"Seamless-wrapper\"></div>\');\n 		    	 	 $this.element.parent().css(\"overflow\",\"hidden\");\n 		    	 	 $this.element.css({\n 		    	 	 	left: \'50%\',\n 		    	 	 	marginLeft:-($this.settings.width/2),\n 		    	 	 });\n 		    	 	  $this.width  = $this.settings.width;\n 		    		  $this.height = $this.settings.height;			 		    	 	\n 		    	 }else{\n 		    	 	 $this.width = $this.settings.width;\n 		    		 $this.height=$this.settings.height;\n 		    	 }\n 		    	 $this.element.width($this.width);\n				 $this.element.height($this.height);\n				 $this.setions.width($this.width);	\n	 		 };	\n 		},\n 		getCont:function(){	//获取轮播长度	 		\n 		   return $this.setions.length;			 		   \n 		},\n 		\n 		_prev:function(){  //上一张\n 				var $this =this		\n 			this.element.find($this.dom.prev).on(\"click\",function(){\n 				if($this.flag){\n 					 $this.flag=false;\n 					 $this.index--;\n	 			 	 $this._moveSeamless();\n 				};				 			\n 			});	 			 			\n 		},\n\n 		_next:function(){ // 下一张\n 			var $this =this\n 			this.element.find($this.dom.next).on(\"click\",function(){\n 				if($this.flag){\n 				  $this.index++;	 				\n					  $this.flag=false; 					 \n 				  $this._moveSeamless();			 				\n 				};				 			\n 			});	\n 		},\n\n 		isAuto:function(){   //自动轮播\n 			var $this =this\n 			if($this.settings.isAuto){ \n 				 $this.playGo();		 							\n	 			 $this.main.parent().hover(function(){\n					$this.stopPaly();\n					$this.element.find($this.dom.next).fadeIn();\n					$this.element.find($this.dom.prev).fadeIn();\n	 			 },function(){\n					$this.playGo();\n					$this.element.find($this.dom.next).fadeOut();\n					$this.element.find($this.dom.prev).fadeOut();		 			 	 	 			 		\n	 			 })\n 			 };\n 		},\n 		playGo:function(){ //开始轮播\n			$this.show=setInterval(function(){	\n			   	 $this.index++;						 \n				 $this._progressBar(function(){						 							  		 \n				  	$this._moveSeamless();						 \n				 });						\n			}, $this.settings.time);\n		},\n\n 		stopPaly:function(){// 暂停轮播\n 			    var $this=this\n 				clearInterval($this.show);\n 		},\n 		createDom:function(){ //创建 切换按钮\n 			$this=this;\n 			var pagelist =$this.dom.pegebox.substring(1)		 			\n 			var switchbox =\'<div class></div>\'\n 			var switchBtn =\'<span class=\"prev-btn  css-btn\"><</span>\'+\'<span class=\"next-btn css-btn\">></span>\'		\n 			var htmlbtn = \"<div class=\"+pagelist+\">\"	 			\n 			for(var i=0;i<this.getCont();i++){\n 					htmlbtn+=\'<span></span>\'\n 			};	\n 			this.element.append(\'<div class=\"progressBar\"></div>\')	 \n 			this.element.append(htmlbtn);\n 			this.element.append(switchBtn);	\n 			if(this.element.width()>1366){\n 				this.element.find($this.dom.next).css({right:15+\"%\"})\n 				this.element.find($this.dom.prev).css({left:15+\"%\"})\n 			}	 			 					\n 		},\n\n 		pegeCurrent:function(){//当前页数\n				$this= this\n				$this.element.find($this.dom.pegebox).children().on(\"click\",function(){\n				$this.index=$(this).index();	 					\n				$this._moveSeamless($this.index);\n				$this.element.find($this.dom.pegebox).children().eq($(this).index()).addClass($this.dom.active).siblings().removeClass($this.dom.active);			\n				});\n 		 },\n\n 		setSeamcss:function(){ \n			 $this =this;\n			 $this.main.prepend($this.setions.last().clone()); \n			 $this.main.append($this.setions.first().clone());\n			 $this.size = $this.getCont();\n			 $this.main.width(($this.size+2)*$this.width);\n			 $this.main.css(\"left\",-$this.width);\n			 this.createDom();\n			 this.pegeCurrent();\n			 $this.element.find($this.dom.pegebox).children().eq($this.index).addClass($this.dom.active);\n 		},\n\n 		_moveSeamless:function(){ //滚动方法\n 			 $this =this;	 										\n 			 $this.main.stop().animate({left:\"-\"+($this.index+1)*$this.width},$this.settings.speedMove,function(){\n 			 	 $this.flag=true;	 			 	 			 	\n 			 	 var pagelist=$this.element.find($this.dom.pegebox).children()\n 			 	 pagelist.removeClass($this.dom.active)\n 			 	 pagelist.eq($this.index).addClass($this.dom.active).siblings()\n 			 });	 				\n 			 if($this.index==$this.getCont()){				 	\n 			 		$this.index=0;\n 			    $this.main.animate({left:\"-\"+$this.width},0);	 			    \n 			 };\n 			 if($this.index<0){\n 			 	$this.index=$this.getCont()-1\n 			 	$this.main.animate({left:\"-\"+($this.size)*$this.width},0)\n 			}; 			\n 		},\n\n 		_progressBar:function(clallback){  //进度条\n 			if(!$this.settings.progressBar){ $this.element.find($this.dom.progressBar).css(\"background\",\"none\")}\n 			this.element.find($this.dom.progressBar).animate({width:100+\"%\"}, $this.settings.time/2,function(){\n 				$(this).width(0);\n 				if(typeof clallback == \"function\"){clallback();}; 		 				\n 			})\n 		 },	 		\n 		\n	 };\n return Seamless;	 \n})();\n$.fn.Seamless = function(options){ \n    return this.each(function(){\n 	   var  $this= $(this);\n           instance =$this.data(\"Seamless\");\n         if(!instance){\n              $this.data(\"Seamless\",(instance = new Seamless($this,options))); // 传递jquery对象                	\n           };                      \n        if($.type(options) === \"string\") return instance[options]();                   \n	 });   \n};\n$.fn.Seamless.defaults ={\n		    domEle:{\n			   main:\".main\",\n			   sections:\".section\",\n			   active:\"active\",\n			   prev:\".prev-btn\",\n			   next:\".next-btn\" ,\n			   pegebox:\".pegelist\",\n			   progressBar:\".progressBar\"	\n			},			   	  \n	   	   isAuto:true,      //是否自动播放\n	   	   time:3000,        //轮播间隔时间\n	   	   setsize:false,     //默认false 取图片大小为轮播的尺寸\n	   	   width:1920,       //自定义轮播宽度\n	   	   height:480,       //自定义轮播高度\n	   	   speedMove:800,	 //轮播移动的速度\n	   	   progressBar:false, //是否显示轮播进度条 \n  }; 		\n})(jQuery,window,document);\n\n\n\n$(function(){\n	 $(\"#container\").Seamless({\n	 	   progressBar:true,//是否显示轮播进度条 	   	  \n	   	   isAuto:true,     //是否自动播放\n	   	   time:2500,       //轮播间隔时间\n	   	   setsize:true,   //默认false 取图片大小为轮播的尺寸\n	   	   width:1440,      //自定义轮播宽度\n	   	   height:450,      //自定义轮播高度\n	   	   speedMove:800,   //轮播移动的速度\n	 });	\n})\n</script>\n</body>\n</html>\n```', null);
INSERT INTO `b_article_detail` VALUES ('41', '58', '```\ni 不区分(ignore)大小写；\n例如: /abc/i 可以匹配 abc、aBC、Abc \ng 全局(global)匹配 \n如果不带g，正则过程中字符串从左到右匹配，找到第一个符合条件的即匹配成功，返回\n如果带g，则字符串从左到右，找到每个符合条件的都记录下来，知道字符串结尾位置\n例如: \nvar str = \'aaaaaaaa\'\nvar reg1 = /a/;  str.match(reg1)  // 结果为：[\"a\", index: 0, input: \"aaaaaaaa\"]\nvar reg2 = /a/g; str.match(reg2)  // 结果为：[\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n\nm 多(more)行匹配\n若存在换行\\n并且有开始^或结束$符的情况下，和g一起使用实现全局匹配,\n因为存在换行时默认会把换行符作为一个字符任务匹配字符串是个单行，\ng只匹配第一行，添加m之后实现多行，每个换行符之后就是开始\nvar str = \"abcggab\\nabcoab\";\nvar preg1 = /^abc/gm;  str.match(preg1)  // 结果为：[\"abc\", \"abc\"]\nvar preg2 = /ab$/gm;   str.match(preg2)  // 结果为：[\"ab\", \"ab\"]\n\n\n\ns 特殊字符圆点 . 中包含换行符\n默认的圆点 . 是 匹配除换行符 \\n 之外的任何单字符，加上s之后, . 中包含换行符\n$str = \"abggab\\nacbs\";\n$preg = \"/b./s\";\npreg_match_all($preg, $str,$matchs);\nprint_r($matchs);//Array ( [0] => Array ( [0] => bg [1] => b [2] => bs ) ) \n\nU 只匹配最近的一个字符串;不重复匹配; \n$mode=\"/a(.*?)c/\";\n$preg=\"/a.*c/U\";//这两个正则返回相同的值\n$str=\"abcabbbcabbbbbc\" ;\npreg_match($mode,$str,$content);   echo $content[0];//abc\npreg_match($preg,$str,$content);   echo $content[0];//abc\n//修正符:x 将模式中的空白忽略; \n//修正符:A 强制从目标字符串开头匹配;\n//修正符:D 如果使用$限制结尾字符,则不允许结尾有换行; \n//修正符:e 配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行;  \n```', null);
INSERT INTO `b_article_detail` VALUES ('42', '59', '**html 代码**\n\n```html:run\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n	<meta charset=\"UTF-8\">\n	<title>节点控制区域预加载页面所有图片</title>\n    <script type=\"text/javascript\" src=\"http://www.xipwang.cn/js/jquery.min.js\"></script> 	\n	<script type=\"text/javascript\" src=\"js/LoadImages.js\"></script>\n</head>\n<style type=\"text/css\">\n*{ margin: 0; padding: 0 }\nul { list-style-type: none;  }	\n.loadAllImage{ text-align: center; }\n</style>\n<body>\n<div class=\"loadAllImage\">\n	<ul>\n		<li><img src=\"http://www.xipwang.cn/wp-content/uploads/2016/08/bc17e3bc-de7c-670f-6064-1478771eacc0.jpg\"></li>\n		<li><img src=\"http://www.xipwang.cn/wp-content/uploads/2016/08/1.jpeg\"></li>\n		<li><img src=\"http://www.xipwang.cn/wp-content/uploads/2016/07/cropped-20141127153046_swLy3.jpeg\"></li>\n		<li><img src=\"http://www.xipwang.cn/wp-content/uploads/2016/08/8.jpg\"></li>\n		<li><img src=\"http://www.xipwang.cn/wp-content/uploads/2016/07/138-140911113018-50.jpg\"></li>\n		<li><img src=\"http://www.xipwang.cn/wp-content/uploads/2016/08/surf.jpg\"></li>\n	</ul>\n</div>\n</body>\n<script type=\"text/javascript\">\n ;(function($,wd,doc,undefined){\n	$.fn.Loadimage = function (configuration){	\n		var thisAllimg=this;		   	 \n	    var parameter =$.extend({\n	    	sectcut:true,\n	    	load:\"images/loading.gif\",\n	    	width:100+\"%\",\n	    	height:100+\"%\",	    		\n\n	    }||{},configuration);		\n	function thisImgArr(allimage){ \n		var  arrSrc=[];//提取所有的url路径\n		var  arrImg=[];\n		$.each(allimage,function(i,objimg){	\n				arrImg[i] = new Image();\n				arrSrc.push($(objimg).attr(\"src\"))						\n				if(objimg.complete){ //加载完成后直接缓存读取\n					Sectcuting();	\n					return;\n				};\n				arrImg[i].src =arrSrc[i]	\n				$(objimg).attr(\"src\",\"\");\n				var loading=$(\"<img  title=\\\"图片加载中...\\\" src=\\\"\"+parameter.load+\"\\\" />\")\n				$(objimg).hide();\n				$(objimg).after(loading);						\n				$(arrImg[i]).load(function(){\n						loading.remove();\n						Sectcuting();								\n						$(objimg).attr(\"src\",arrSrc[i]);\n						$(objimg).show();\n\n				});\n				function  Sectcuting (){\n					if(parameter.sectcut) { \n							$(objimg).width(parameter.width);\n							$(objimg).height(parameter.height);\n						};\n			  		 };\n			   });\n		   };\n		thisImgArr(thisAllimg);\n	};	\n})(jQuery,window,document);\n$(\".loadAllImage img\").Loadimage({\n		sectcut:true, //图片是否可设置宽度\n    	load:\"http://www.xipwang.cn/wp-content/uploads/2016/08/loading.gif\", //在加载时出现的图标\n    	width:800, //当图片load完成图片最大宽度\n    	height:400,//当图片load完成图片最大高度\n	});\n</script>\n</html>\n```', null);
INSERT INTO `b_article_detail` VALUES ('43', '60', '一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value 特性用于不同的目。model 选项可以用来避免这样的冲突：\n\n```\n<template>\n    <input\n      type=\"checkbox\"\n      v-bind:checked=\"checked\"\n      v-on:change=\"$emit(\'change\', $event.target.checked)\"\n    >\n</template>\n<script>\nexport default {\n    name: \'base-checkbox\',\n    model:{\n        prop: \'checked\',\n        event: \'change\'\n    },\n    props: {checked: Boolean}\n}\n```\n现在在这个组件上使用 v-model 的时候：\n```\n<base-checkbox v-model=\"lovingVue\"></base-checkbox> v-model 的时候：\n```\n这里的 lovingVue 的值将会传入这个名为 checked 的 prop。同时当 <base-checkbox> 触发一个 change 事件并附带一个新的值的时候，这个 lovingVue 的属性将会被更新。\n\n以上是官网的基本的方法，弄懂以上的前提下，我们来继续看嵌套组件时怎么再封装一个v-model，我们新建一个组件special-checkbox里面包含上面的组件base-checkbox，如何将子父组件的v-model打通\n\n\n----\n\n\n```\n<template>\n  <base-checkbox v-model=\"newlovingVue\"></base-checkbox>\n</template>\n<script>\nexport default {\n    name: \'special-checkbox \',\n    model:{\n        prop:\'lovingVue\',//要存在于props\n        event:\'change\'//当组件的值发生改变时要emit的事件名\n    },\n    props: [\'lovingVue\'],\n    data:function(){\n        return{//要重新定义一个data，赋值为props中的值，因为组件时单数据流，不能直接修改props\n            newlovingVue:this.lovingVue\n        } \n    },\n    watch:{//这里检测data中的值，一旦发生变化就提交事件到父组件\n        newlovingVue:function(newVal,oldVal){\n            this.$emit(\'change\',newVal)\n        },\n        // 注 如果porp 父组件传递过来的数据是异步的 这里需要去监听父组件传递过来参数变化再来改变当前组件值最后更通过emit的方法再同步到父组件去\n        lovingVue: function(newVal, oldVal) {\n            this.newlovingVue =  newVal\n        }\n        \n    }\n}\n</script>\n```\n\n现在使用这个二次封装的组件的时候\n```\n<special-checkbox v-model=\"lovingVue\"></base-checkbox>\n```\n\n```\nreturn  {//要重新定义一个data，赋值为props中的值，因为组件时单数据流，不能直接修改props\n       newlovingVue:this.lovingVue\n    }\n\n\n```\n\n', null);
INSERT INTO `b_article_detail` VALUES ('44', '61', '```\ngit reset --soft xxx(commit操作的哈希ID)\n用于本地仓库分支提交撤回至暂存区域\n\ngit reset --mixed xxx (commit操作的哈希ID)\n用于将本地仓库文件撤回至未暂存区域\n\ngit push -f \n强制推送（一般用于重置以后强制推送）\n\ngit revert\n会产生新的提交，并不会真正删除history。git reset 则会删除history。\n\ngit revert\n 	只是改变提交层面，而不涉及文件层面的操作\n\ngit merge  <需要合并的分支>\n把其他的分支合并到当前的分支\n\ngit fetch\n是将远程主机的最新内容拉到本地用户在检查了以后决定是否合并到工作本机分支中。\n\ngit pull \n则是将远程主机的最新内容拉下来后直接合并，即：git pull = git fetch + git merge，这样可能会产生冲突，需要手动解决。\n\ngit branch <branchname> \n//新建分支\n\ngit branch -d <branchname> \n//删除本地分支\n\ngit branch -m <oldbranch> <newbranch>\n\n //重命名本地分支\n\n```', null);
INSERT INTO `b_article_detail` VALUES ('45', '62', '弹性布局居中\n```\ndiv.parent {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n定位布局\n```\ndiv.parent {\n    position: relative; \n}\ndiv.child {\n    position: absolute; \n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);  \n}\n/* 或者 */\ndiv.child {\n    width: 50px;\n    height: 10px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-left: -25px;\n    margin-top: -5px;\n}\n/* 或 */\ndiv.child {\n    width: 50px;\n    height: 10px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n```\n\n网格布局居中\n```\ndiv.parent {\n    display: grid;\n}\ndiv.child {\n    justify-self: center;\n    align-self: center;\n}\n```\n\n```\ndiv.parent{\n  display:flex;\n}\ndiv.child{\n  margin:auto;\n}\n```\n\n```\ndiv.parent{ display:grid; }\ndiv.child{ margin:auto; }\n```\n\n```\ndiv.parent {\ndisplay: table;\n}\ndiv.child {\ndisplay: table-cell\nvertical-align: middle;\ntext-align: center;\n}\n```\n', null);
INSERT INTO `b_article_detail` VALUES ('46', '63', '```\n相同点：\n\nvar a = {\n    name:\"丸子\",\n    fn:function(){\n        console.log(this.name);\n    }\n}\nvar b = a.fn;\nb()//undefined\nb.call(a);//丸子\nb.apply(a);//丸子\nb.bind(a);//没有被打印\n\n```\n\n\n```\n不同点\n    call和apply都是立即执行，而bind则是返回一个函数；\n\nvar a = {\n    name:\"丸子\",\n        fn:function(){\n            console.log(this.name);\n        }\n    }\n    var b = a.fn;\n    b.bind(a)//没有被打印\n    \n    var c = b.bind(a)\n    console.log(c);\n        //function (){\n        //console.log(this.name);\n    //}\n    \n    c();//丸子\n```\n    \n ```\n    如果call和apply的第一个参数写的是null，那么this指向的是window对象；\n    \n    var a = {\n    name:\"丸子\",\n    fn:function(){\n        console.log(this);\n        //Window {external: Object, chrome: Object, document: document, a: Object, speechSynthesis: SpeechSynthesis…}\n        }\n    }\n    var b = a.fn;\n    b()//this指向的是window对象\n    b.call(null);//this指向的是window对象\n    b.apply(null);//this指向的是window对象\n    b.bind(null)//没有被打印\n    \n```\n```\ncall和apply可以有多个参数，不同的是apply第二个参数必须是一个数组;\nvar a = {\n    name:\"丸子\",\n    fn:function(m,n){\n        console.log(this.name);\n        console.log(m+n);\n    }\n}\nvar b = a.fn;\nb.call(a,6,6)\n// 丸子 \n// 12\n\nb.apply(a,[6,4]);\n// 丸子  \n// 10\n```\n\n```\n同样bind也可以有多个参数，并且参数可以执行的时候再次添加，但是要注意的是，参数是按照形参的顺序进行的。\nvar a = {\n    name:\"丸子\",\n    fn:function(m,n){\n        console.log(this.name);\n        console.log(m+n);\n    }\n}\nvar b = a.fn;\nb.bind(a)//没有被打印\n\nvar c = b.bind(a,2)\nconsole.log(c);\n//function (m,n){\n    //console.log(this.name);\n    //console.log(m+n);\n//}\n\nc(3);\n//丸子\n//5\n\n\n', null);
INSERT INTO `b_article_detail` VALUES ('47', '65', '**html 代码**\n\n```html:run\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n	<meta charset=\"UTF-8\">\n	<title>许愿墙</title>\n	<script src=\"https://cdn.bootcss.com/jquery/2.1.3/jquery.js\"></script>\n	<style type=\"text/css\">\n			*{ margin: 0; padding: 0 }\n			html{ width: 100%; height: 100%; }\n			body{ width: 100%; height: 100%;\n			   position: relative;\n			  background:-webkit-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);}\n			.box{\n				background: #ccc; \n				position: absolute;\n				height: 200px;\n				width: 200px;\n				box-shadow: 0 0px 10px rgba(0, 0, 0, 0.4);\n				background: #BBE1F1;\n				-webkit-border-bottom-right-radius:110px 10px;\n				-webkit-border-bottom-left-radius:10px 200px;\n				-webkit-border-top-left-radius:110px 10px;\n				-webkit-border-top-right-radius:10px 200px;\n				position: absolute;\n				cursor: move;\n				padding: 10px;\n				line-height: 50px;\n				font-family: \"微软雅黑\"\n			 }\n			 .box span{\n				cursor: pointer;			 \n				text-align: right;\n				display: inline-block;\n				float: right;\n				padding-right: 10px;\n				color: #fff;\n				font-size:18px;\n			 }\n			  .box span:active{\n			  	 color: #f00;\n			  }\n			  .box p{\n			  	 padding-top: 30px;\n			  }\n			 .inputbox{\n				position: fixed;\n				bottom: 50px;\n				width: 50%;\n				display: flex;\n				display: -webkit-flex;\n				left: 20%;\n			    border-radius: 1px solid #f00\n			 }\n			.inputbox .text{\n			    flex: 1;\n				-webkit-flex: 1;\n				padding-left: 10px;\n				outline: none;\n				border: 1px solid #5449F9;\n				border-radius: 4px ;		\n				font-size: 16px;\n				padding:10px;\n			}\n			div{\n				-moz-user-select:none;\n				-webkit-user-select:none;\n				user-select:none;    \n			}\n	</style>\n</head>\n<body>\n<div class=\"inputbox\">\n	<input  class=\"text\" type=\"\" name=\"\">\n</div>\n</body>\n<script type=\"text/javascript\">\n	$(function(){\n		;(function($,w,d){\n			function WishWall (){\n				this.flag =false;\n				this.body =$(document.body);\n				this.winW =$(window).width()-220;\n				this.winH =$(window).height()-400;\n				this.textArr=[\"2016许愿墙....\",\"能像老姚一样牛逼......\",\"学如逆水行舟\"]//初始化文本			\n				this.init();\n			} \n			WishWall.prototype = {\n				init:function(){\n					var _this =this;\n					this.createWish();				\n					this.eventDarg(_this);\n					this.eachWish();\n				},\n				getColor:function(){  //获取颜色值\n					var color=\"#\";\n					var colorArr=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];\n					for(i=0;i<6;i++){\n							var cur=randomNum(15,0);\n							color+=colorArr[cur];\n						}\n						function randomNum(max,min){\n							return Math.floor(Math.random()*(max-min+1)+min)\n						}\n					return color;\n				},			\n				moldbox:function(top,left,col,text){ // 许愿模板\n					var  moldbox=\'<div class=\"box\" style=\"top:\'+top+\'px; left:\'+left+\'px;background:\'+col+\'\">\'+\n								  \'<span>×</span>\'+\n								  \'<p class=\"close\">\'+text+\'</p>\'+\n								  \'</div>\'\n					this.body.append(moldbox); \n				},\n				createWish:function(){		//创建许愿\n					 var  _this = this 					 \n					  $(\".text\").bind(\'keyup\', function (e) {\n					  	  var key = e.which;								  		\n							if (key == 13) {\n								if(!$(\".text\").val()==\"\"){	 									\n							            e.preventDefault();\n							            var color =_this.getColor()	\n										var text =$(\".text\").val();\n										var top =parseInt(Math.random()*_this.winH) //获取随机数X 轴坐标\n										var left=parseInt(Math.random()*_this.winW)  //获取随机数Y 轴坐标\n										$(\".text\").val(\"\")\n										console.log(top)\n										_this.moldbox(top,left,color,text);	\n										_this.closeWish();	\n										return false							 \n									}else{\n										return false;\n\n								}\n						    }\n					   });\n				 },\n				eventDarg:function(m){  //拖动事件\n				  $(document).delegate(\".box\",\"mousedown\",function(e){  \n		  				var  event = e || event\n		  				 $this=$(this)\n		  				 m.flag =true\n						 T= e.clientY - $(this).offset().top;\n						 L= e.clientX - $(this).offset().left; 												\n						$(document).mousemove(function(e){\n							if(m.flag){\n								var  event = e || event\n								 X=	event.clientX -L;\n								 Y=	event.clientY -T;								\n								if(X<0){  										\n									X=0\n								}else if(X>m.winW){\n									X =m.winW;\n								}\n								if(Y<0){\n									Y=0\n								}else if(Y> m.winH){\n									Y = m.winH;\n								}\n								$this.css({\n									\"top\":Y+\"px\",	\n									\"left\":X+\"px\",\n									\"z-index\":\"1\"\n								});								\n								$this.siblings().css({ \"z-index\":\"0\"  });							\n							 }\n						 });	\n					});\n					$(document).on(\"mouseup\",function(){\n						m.flag =false;	\n				     });\n				},\n				closeWish:function(){   //移除许愿事件\n					$(\".box\").on(\"click\",\"span\",function(){ \n						 $(this).parent().remove();\n					}); \n				},\n				eachWish:function(){   //随机创建许愿文本\n					var _this =this\n					$.each(_this.textArr,function(i,d){\n						var col=_this.getColor()							\n						var top =parseInt(Math.random()*_this.winH); //获取随机数X 轴坐标\n						var left=parseInt(Math.random()*_this.winW);  //获取随机数Y 轴坐\n						_this.moldbox(top,left,col,d);\n						_this.closeWish();\n					});\n				},\n			}\n			window.WishWall=WishWall\n		})(jQuery,window,document);\n\n		new WishWall();\n	});	\n</script>\n</html>\n```', null);
INSERT INTO `b_article_detail` VALUES ('48', '66', '**html 代码**\n\n```html:run\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n	<meta charset=\"UTF-8\">\n	<title>纵向拖拽</title>\n	<script type=\"text/javascript\" src=\"http://www.xipwang.cn/js/jquery.min.js\"></script>\n	<script type=\"text/javascript\" src=\"drageOrderList.js\"></script>\n</head>\n<style type=\"text/css\">\n*{\n	margin:0;\n	padding:0;\n}\n#dargorder{\n	width:300px;\n	margin: 0 auto;\n	background: #cfe;\n	height: auto;\n}\n#dargorder .darg-div{\n	width:300px;	\n	margin:10px 0px;\n	background:#333;\n	cursor: move;\n	color: #fff;\n\n}\n\n.temp_div{\n	width:300px;\n	height: 50px;\n	margin:10px 0px;\n	background:#fcc;\n	border:1px solid #f00;\n}\n.show{\n	border: 1px solid #e23;\n}\nbody{\n   -moz-user-select: none; /*火狐*/\n   -webkit-user-select: none;  /*webkit浏览器*/\n   -ms-user-select: none;   /*IE10*/\n   -khtml-user-select: none; /*早期浏览器*/\n   user-select: none;\n}\n\n</style>\n<body>\n	\n	<div id=\"dargorder\">\n		<div class=\"darg-div\">\n			<img src=\"1.jpg\" width=\"300\" ondragstart=\"return false;\" title=\"1\">\n		</div>\n		<div class=\"darg-div\">\n			<img src=\"2.jpg\" width=\"300\" ondragstart=\"return false;\"  title=\"2\">\n		</div>\n		<div class=\"darg-div\">\n			<img src=\"2.jpg\" width=\"300\" ondragstart=\"return false;\"  title=\"3\">\n		</div>\n		<div class=\"darg-div\">\n			<img src=\"1.jpg\" width=\"300\" ondragstart=\"return false;\"  title=\"4\">\n		</div>\n	</div>\n	\n</body>\n<script type=\"text/javascript\">\n;(function($) {\n	function DragOrderListor(opts) {\n		$_d = this;\n		$_d.start = {//鼠标x,y起始坐标;\n			x: 0,\n			y: 0\n		}; \n		$_d.thisDarg = null; //拖拽对象;\n		$_d.tempDiv = null; //临时对象;\n		$_d.flag = false; //拖拽状态;\n		$_d.jq = opts; //JQ对象\n		$_d.init();\n	}\n	DragOrderListor.prototype = {\n		init: function() {\n			this.startDown(); //鼠标按下\n			this.drageMove(); //鼠标移动\n			this.drageUp(); //鼠标抬起\n		},\n		startDown: function() {\n			$d = this;\n			$($d.jq).on(\"mousedown\", \".darg-div\", function(e) {\n				var e = e || event;\n				$_d.flag = true; //开启拖拽状态\n				$_d.thisDarg = $(this); //获取当前拖得对象;\n				var initOffsetY = $_d.thisDarg.offset().top; //获取当前对象距离top偏移量\n				var initOffsetX = $_d.thisDarg.offset().left; //获取当前对象距离left偏移量	\n				$_d.start.y = e.pageY - initOffsetY; //鼠标实际Y轴距离\n				$_d.start.x = e.pageX - initOffsetX; //鼠标实际X轴距离\n				//设置当前拖动状态\n				$_d.thisDarg.css({\n					position: \"absolute\",\n					opacTity: \"0.8\",\n					top: initOffsetY,\n					left: initOffsetX,\n					zIndex: 1\n				});\n				// 创建临时Div 插入当前拖动对象之前\n				$(\"<div class=\'temp_div\'></div>\").insertBefore($_d.thisDarg);\n				$d.tempDiv = $(\".temp_div\");\n			});\n		},\n		drageMove: function() {\n			var $d = this;\n			$(document).on(\'mousemove\', function(e) {\n				//判断当前拖动状态\n				if ($d.flag) {\n					var e = e || event; //获取event事件对象\n					var mouseY = e.pageY - $d.start.y; //鼠标实际移动Y轴距离\n					var mouseX = e.pageX - $d.start.x; //鼠标实际移动X轴距离\n					//拖动对象跟随鼠标移动\n					$d.thisDarg.css({\n						top: mouseY,\n						left: mouseX\n					});\n					$d.thisDarg.addClass(\'show\');\n					//获取临时Div距离顶部偏移量 \n					var tempDivTop = $d.tempDiv.offset().top - ($d.tempDiv.height()) / 2;\n					var tempDivBottom = $d.tempDiv.offset().top + ($d.tempDiv.height()) / 2;\n\n					//判断向上拖动的div的top值是否小于临时div距离顶部的偏移量,将临时div插入到上一个div之前\n					if (mouseY < tempDivTop) {\n						$d.tempDiv.insertBefore($d.tempDiv.prev());\n					}\n					//判断向下拖动的div的top值是否小于临时div距离顶部的偏移量,将临时div插入到下一个div之后\n					if (mouseY > tempDivBottom) {\n						$d.tempDiv.insertAfter($d.tempDiv.next());\n					}\n				}\n			});\n		},\n		drageUp: function() {\n			$(document).on(\'mouseup\', function(e) {\n				$d.flag = false; //关闭拖动状态；\n				//当鼠标抬起的时候将当前拖动的对象插入临时对象之前;				\n					if($d.tempDiv){\n						 try{\n						    $d.thisDarg.removeClass(\'show\');\n						    $d.thisDarg.css({\n							position: \"inherit\"\n						    });\n						    $d.thisDarg.insertBefore($d.tempDiv);\n						    //将临时div移除\n						    $d.tempDiv.remove();\n						    $d.tempDiv = null;\n						    $_d.thisDarg = null;					\n						 }catch(err){\n							alert(err.description);\n\n						}\n					}\n				\n			});\n		}\n	};\n	$.fn.dragOrderListor = function() {\n		new DragOrderListor(this);\n	};\n\n\n})(jQuery);\n$(function(){\n	$(\"#dargorder\").dragOrderListor();\n\n});\n</script>\n</html>\n```', null);
INSERT INTO `b_article_detail` VALUES ('49', '67', '**html 代码**\n\n```html:run\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n	<meta charset=\"utf-8\">\n	<style type=\"text/css\">\n	* {\n		margin: 0;\n		padding: 0;\n	}\n	#slider-box {\n		width: 300px;\n		height: 50px;\n		border-radius: 4px;\n		background: #ccc;\n		margin: 250px auto;\n		position: relative;\n	}\n	#slider {\n		width: 48px;\n		height: 48px;\n		border: 1px solid #eee;\n		text-align: center;\n		line-height: 48px;\n		display: inline-block;\n		background: #fff;\n		border-radius: 4px;\n		cursor: move;\n		position: absolute;\n		left: 0;\n		z-index: 5;\n	}\n	#slider-text {\n		text-align: center;\n		line-height: 50px;\n		display: inline-block;\n		width: 100%;\n		height: 50px;\n		font-family: \"微软雅黑\";\n		position: absolute;\n		left: 0;\n		z-index: 4;\n	}\n	#slider-bg {\n		width: 0;\n		height: 48px;\n		background: green;\n		position: absolute;\n		z-index: 3;\n		border-radius: 4px;\n		\n	}\n	#slider-Emerge {\n		width: 100px;\n		background:;\n		height: 50px;\n		position: absolute;\n	}\n	#stop-go {\n		width: 48px;\n		height: 48px;\n		border: 1px solid #eee;\n		background:#36F;\n		position: absolute;\n		right: -1px;\n		display: none;\n		text-align: center;\n		line-height: 48px;\n		color: #fff;\n		font-family: \"微软雅黑\";\n		border-radius: 4px;\n		z-index: 5;\n	}\n	div{\n			-moz-user-select:none;\n			-webkit-user-select:none;\n			user-select:none;    \n		}\n	</style>\n</head>\n<body>\n	<div id=\"slider-box\">\n		<span id=\"slider\">＞</span>\n		<span id=\"slider-text\">滑动解锁</span>\n		<span id=\"slider-bg\"></span>\n		<span id=\"slider-Emerge\"></span>\n		<span id=\"stop-go\">∨</span>\n	</div>\n</body>\n	<script type=\"text/javascript\">\n			var  sliderel={\n					$: function(selector){\n						return document.getElementById(selector)\n					},\n				getEvent:function(e){\n\n					 var e=e || window.event\n					 return e;\n				},\n				stopBubble:function(e){\n					var e =this.getEvent(e)\n					if(typeof e.preventDefault != \"undefined\"){\n						e.preventDefault();\n					}else{\n						e.returnValue = false;\n					}\n				}\n			 },\n			Elemt={\n				flag:false,\n				nowMoseX: 0,\n				mx:sliderel.$(\"slider-box\"),\n				sd:sliderel.$(\"slider\"),\n				st:sliderel.$(\"slider-text\"),\n				sb:sliderel.$(\"slider-bg\"),\n				se:sliderel.$(\"slider-Emerge\"),\n				sg:sliderel.$(\"stop-go\"),\n			}\n				Elemt.sd.onmousedown=function(e){				\n					var e =sliderel.getEvent(e)\n					sliderel.stopBubble(e);\n					Elemt.flag=true\n					nowMoseX=e.clientX-Elemt.sd.offsetLeft;\n					\n				}\n				//滑块最大移动的距离\n				maxMove=Elemt.mx.offsetWidth -Elemt.sd.offsetWidth;\n				\n				//鼠标移动的时候是否成功\n				Elemt.mx.onmousemove=function(e){\n						var e =sliderel.getEvent(e)\n						if(Elemt.flag){\n							var moveX=e.clientX-nowMoseX;\n							var oElemLeft=Elemt.sd.offsetLeft;//判断滑块移动的范围							\n							if(oElemLeft<0){ //判断滑块是否超出限制位置\n								moveX=0;\n								Elemt.flag=false\n							}else if(oElemLeft>maxMove){\n								moveX=maxMove;\n								Elemt.sg.style.display=\"block\";\n								Elemt.sd.style.display=\"none\"\n								Elemt.sb.style.width=300+\"px\"\n								Elemt.st.innerHTML=\"滑动成功\"\n								Elemt.st.style.color=\"#fff\"\n							}\n						}\n					 Elemt.sd.style.left=moveX+\"px\"	\n					 Elemt.sb.style.width=oElemLeft+20+\"px\";\n				}\n				//当鼠抬起判断是否滑动成功\n				Elemt.mx.onmouseup=function(e){\n					var e =sliderel.getEvent(e)\n						Elemt.flag=false\n						if(Elemt.sd.offsetLeft<maxMove){\n							speed=Math.ceil(Elemt.sd.offsetLeft/40);\n							time=setInterval(function(){\n								if(Elemt.sd.offsetLeft>=0){\n									Elemt.sd.style.left=Elemt.sd.offsetLeft-speed+\"px\";\n									Elemt.sb.style.width=Elemt.sb.offsetWidth-speed+\"px\";\n								}else{\n									clearInterval(time);\n									return false;\n								}\n							},10)\n					   }\n					}\n				//当鼠离开是否滑动成功	\n				Elemt.sd.onmouseout=function(e){\n					sliderel.stopBubble(e);\n					Elemt.flag=false;\n						if(	Elemt.sd.offsetLeft<maxMove){\n							speed=Math.ceil(Elemt.sd.offsetLeft/40);\n							time=setInterval(function(){\n								if(Elemt.sd.offsetLeft>=0){\n									Elemt.sd.style.left=Elemt.sd.offsetLeft-speed+\"px\";\n									Elemt.sb.style.width=Elemt.sb.offsetWidth-speed+\"px\";\n								}else{\n									clearInterval(time);\n									return false;\n								}\n						  },10);\n					 }\n				}\n    </script>\n</html>\n```', null);
INSERT INTO `b_article_detail` VALUES ('50', '68', 'npm账号\n```\n用户名: wangxiping\n密码： Wang101029xixi.\n```\n### npm包: wang-sum-number  已经上传\n\ngithub:https://github.com/darkNightMan/sum-number.git \n```\nnpm get registry\n# 如果不是这个地址https://registry.npmjs.org  需要设置官网源\nnpm config set registry https://registry.npmjs.org\n```\n\n### 注册npm账号（有账号跳过这步）\n```\nnpm adduser\n# Username: 用户名\n# Password: 密码\n# Email: 邮箱\n### 创建模块\n```\nnpm init \n\n# package.json 内容\n```\n{\n  \"name\": \"isnumber-lpz\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Number\\u001b[D\\u001b[D\\u001b[D\\u001b[D\\u001b[D\\u001b[D\\u001b[D\\u001b[D\\u001b[D\\u001b[C\\u001b[C\\u001b[Cis\\u001b[C\\u001b[C\\u001b[Number\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/lanpangzhi/isNumber-lpz.git\"\n  },\n  \"author\": \"lanpangzhi\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/lanpangzhi/isNumber-lpz/issues\"\n  },\n  \"homepage\": \"https://github.com/lanpangzhi/isNumber-lpz#readme\"\n}\n\n# 创建 index.js\ntouch index.js\n\nfunction isNumber(number) {\n  number = parseFloat(number)\n  return number === number && typeof number === \'number\' \n}\n\nmodule.exports = isNumber\n```\n\n# 登录\n```\nnpm login\n```\n### 发布包\n\n```\nnpm publish\n```\n\n', null);
INSERT INTO `b_article_detail` VALUES ('51', '69', '```\nmy.cnf是mysql启动时加载的配置文件，一般会放在mysql的安装目录中，用户也可以放在其他目录加载。\n\n安装mysql后，系统中会有多个my.cnf文件，有些是用于测试的。\n\n使用locate my.cnf命令可以列出所有的my.cnf文件\n```\n---\n命令:\n```\nlocate my.cnf\n```\n当我们需要修改配置文件时，需要找到mysql启动时是加载了哪个my.cnf文件。\n\n### 1.查看是否使用了指定目录的my.cnf\n命令：\n```\nps aux|grep mysql|grep \'my.cnf\'\n```\n\n', null);
INSERT INTO `b_article_detail` VALUES ('52', '70', '当我们的服务器在公网的环境时要注意做好ip的限制和隔离，最好的办法是先做好外网端口访问限制，将3306端口限制只能内网访问，可以通过iptables做限制，也可以通过阿里云或是腾讯云的管理后台将端口的外网访问权限封禁掉。我们除了上述的情况外，还可以通过mysql的配置信息，将mysql的访问限制在固定的ip或是ip网段、这样就可以避免一些来自网络的攻击。\n配置方法是通过命令行登录mysql数据库服务\n\n#### 进入数据库后使用如下命令可以禁止外网访问权限：\n```\n#使用mysql默认管理数据库 \nuse mysql;\n#查看用户和ip信息，能查看到一个用户的列表\nselect user , password, host from user;\n#将带有%的用户删掉并刷新用户权限\ndelete from user where user=admin and host=\'%\';\n#刷新用户权限\nflush privileges;\n```\n\n#### 增加ip访问服务器，只有在不存在%的host时才会生效\n```\n#创建用户；\ncreate user \'admin\'@\'192.168.0.1\';\n#修改密码\nset password for \'admin\'@\'192.168.0.1\' = password(\'admin\');\n#授权\ngrant all privileges on  *.* to \'admin\'@\'192.168.0.1\';\n#刷新权限\nflush privileges;\n```\n\n这样只有来自192.168.0.1的用户才能通过admin访问服务器。\n\n#### 为需要远程登录的用户赋予权限\n1.新建用户远程连接mysql数据库\n```\ngrant all on . to admin@\'%\' identified by \'123456\' with grant option;\nflush privileges;\n```\n意思允许任何ip地址(%表示允许任何ip地址)的电脑用admin帐户和密码(123456)来访问这个mysql server。\n', null);

-- ----------------------------
-- Table structure for b_article_tags
-- ----------------------------
DROP TABLE IF EXISTS `b_article_tags`;
CREATE TABLE `b_article_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL,
  `tags_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `article_id` (`article_id`),
  KEY `tags_id` (`tags_id`),
  CONSTRAINT `b_article_tags_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `b_article` (`article_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `b_article_tags_ibfk_2` FOREIGN KEY (`tags_id`) REFERENCES `b_tags` (`tags_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of b_article_tags
-- ----------------------------
INSERT INTO `b_article_tags` VALUES ('7', '16', '1');
INSERT INTO `b_article_tags` VALUES ('9', '18', '1');
INSERT INTO `b_article_tags` VALUES ('10', '19', '1');
INSERT INTO `b_article_tags` VALUES ('11', '20', '1');
INSERT INTO `b_article_tags` VALUES ('12', '21', '1');
INSERT INTO `b_article_tags` VALUES ('13', '24', '1');
INSERT INTO `b_article_tags` VALUES ('15', '26', '3');
INSERT INTO `b_article_tags` VALUES ('16', '26', '4');
INSERT INTO `b_article_tags` VALUES ('17', '26', '5');
INSERT INTO `b_article_tags` VALUES ('29', '16', '3');
INSERT INTO `b_article_tags` VALUES ('32', '22', '2');
INSERT INTO `b_article_tags` VALUES ('33', '22', '4');
INSERT INTO `b_article_tags` VALUES ('34', '23', '1');
INSERT INTO `b_article_tags` VALUES ('36', '23', '3');
INSERT INTO `b_article_tags` VALUES ('37', '18', '3');
INSERT INTO `b_article_tags` VALUES ('38', '19', '3');
INSERT INTO `b_article_tags` VALUES ('39', '37', '3');
INSERT INTO `b_article_tags` VALUES ('40', '38', '3');
INSERT INTO `b_article_tags` VALUES ('41', '38', '4');
INSERT INTO `b_article_tags` VALUES ('43', '40', '1');
INSERT INTO `b_article_tags` VALUES ('44', '40', '3');
INSERT INTO `b_article_tags` VALUES ('45', '40', '8');
INSERT INTO `b_article_tags` VALUES ('46', '41', '3');
INSERT INTO `b_article_tags` VALUES ('47', '42', '3');
INSERT INTO `b_article_tags` VALUES ('48', '42', '5');
INSERT INTO `b_article_tags` VALUES ('49', '42', '8');
INSERT INTO `b_article_tags` VALUES ('52', '44', '3');
INSERT INTO `b_article_tags` VALUES ('53', '44', '9');
INSERT INTO `b_article_tags` VALUES ('54', '48', '3');
INSERT INTO `b_article_tags` VALUES ('55', '48', '4');
INSERT INTO `b_article_tags` VALUES ('56', '48', '8');
INSERT INTO `b_article_tags` VALUES ('57', '49', '5');
INSERT INTO `b_article_tags` VALUES ('58', '49', '3');
INSERT INTO `b_article_tags` VALUES ('59', '50', '1');
INSERT INTO `b_article_tags` VALUES ('60', '50', '3');
INSERT INTO `b_article_tags` VALUES ('61', '50', '5');
INSERT INTO `b_article_tags` VALUES ('62', '51', '1');
INSERT INTO `b_article_tags` VALUES ('63', '52', '2');
INSERT INTO `b_article_tags` VALUES ('64', '53', '1');
INSERT INTO `b_article_tags` VALUES ('65', '56', '3');
INSERT INTO `b_article_tags` VALUES ('66', '56', '5');
INSERT INTO `b_article_tags` VALUES ('67', '57', '5');
INSERT INTO `b_article_tags` VALUES ('68', '58', '1');
INSERT INTO `b_article_tags` VALUES ('69', '59', '3');
INSERT INTO `b_article_tags` VALUES ('70', '59', '5');
INSERT INTO `b_article_tags` VALUES ('71', '60', '3');
INSERT INTO `b_article_tags` VALUES ('72', '60', '5');
INSERT INTO `b_article_tags` VALUES ('73', '60', '8');
INSERT INTO `b_article_tags` VALUES ('74', '61', '3');
INSERT INTO `b_article_tags` VALUES ('75', '62', '3');
INSERT INTO `b_article_tags` VALUES ('76', '62', '5');
INSERT INTO `b_article_tags` VALUES ('77', '62', '8');
INSERT INTO `b_article_tags` VALUES ('78', '63', '1');
INSERT INTO `b_article_tags` VALUES ('79', '63', '3');
INSERT INTO `b_article_tags` VALUES ('80', '65', '11');
INSERT INTO `b_article_tags` VALUES ('81', '65', '3');
INSERT INTO `b_article_tags` VALUES ('82', '66', '11');
INSERT INTO `b_article_tags` VALUES ('83', '66', '8');
INSERT INTO `b_article_tags` VALUES ('84', '66', '3');
INSERT INTO `b_article_tags` VALUES ('85', '67', '8');
INSERT INTO `b_article_tags` VALUES ('86', '67', '1');
INSERT INTO `b_article_tags` VALUES ('87', '68', '3');
INSERT INTO `b_article_tags` VALUES ('88', '68', '4');
INSERT INTO `b_article_tags` VALUES ('89', '68', '12');
INSERT INTO `b_article_tags` VALUES ('90', '69', '12');
INSERT INTO `b_article_tags` VALUES ('91', '69', '3');
INSERT INTO `b_article_tags` VALUES ('92', '70', '4');
INSERT INTO `b_article_tags` VALUES ('93', '70', '12');

-- ----------------------------
-- Table structure for b_class
-- ----------------------------
DROP TABLE IF EXISTS `b_class`;
CREATE TABLE `b_class` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `class_name` char(255) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of b_class
-- ----------------------------
INSERT INTO `b_class` VALUES ('1', 'JavaScript', '44');
INSERT INTO `b_class` VALUES ('2', 'Node', '44');
INSERT INTO `b_class` VALUES ('3', 'Mysql', '44');
INSERT INTO `b_class` VALUES ('4', 'Java', '44');
INSERT INTO `b_class` VALUES ('5', 'Nginx', '44');
INSERT INTO `b_class` VALUES ('6', 'React', '44');
INSERT INTO `b_class` VALUES ('7', 'Vue', '44');
INSERT INTO `b_class` VALUES ('15', 'npm', '44');
INSERT INTO `b_class` VALUES ('16', 'webpack', '44');
INSERT INTO `b_class` VALUES ('17', 'css', '44');
INSERT INTO `b_class` VALUES ('18', 'redis', '44');
INSERT INTO `b_class` VALUES ('19', 'git', '44');

-- ----------------------------
-- Table structure for b_comments
-- ----------------------------
DROP TABLE IF EXISTS `b_comments`;
CREATE TABLE `b_comments` (
  `comment_id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `parent_id` int(11) DEFAULT '0',
  `comment_author` char(255) DEFAULT NULL,
  `comment_author_email` char(255) DEFAULT NULL,
  `comment_content` text,
  `comment_time` datetime DEFAULT NULL,
  PRIMARY KEY (`comment_id`),
  KEY `article_id` (`article_id`),
  CONSTRAINT `b_comments_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `b_article` (`article_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of b_comments
-- ----------------------------

-- ----------------------------
-- Table structure for b_msg_comments
-- ----------------------------
DROP TABLE IF EXISTS `b_msg_comments`;
CREATE TABLE `b_msg_comments` (
  `comment_id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `comment_author` varchar(255) DEFAULT NULL,
  `comment_author_email` varchar(255) DEFAULT NULL,
  `comment_content` text,
  `comment_time` datetime DEFAULT NULL,
  PRIMARY KEY (`comment_id`)
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of b_msg_comments
-- ----------------------------
INSERT INTO `b_msg_comments` VALUES ('34', '0', '0', 'HmLiu', '286507075@.com', '大佬，求带', '2020-06-18 18:50:56');
INSERT INTO `b_msg_comments` VALUES ('39', '0', '0', 'wwwww', 'w1254592050@foxmail.com', '厉害了', '2020-06-18 19:27:25');
INSERT INTO `b_msg_comments` VALUES ('40', '0', '0', 'Sasan', '18816798025@163.com', '大佬牛啊！大佬求带！！！', '2020-06-18 19:35:41');
INSERT INTO `b_msg_comments` VALUES ('41', '0', '0', '大佬的朋友', '1319708000@qq.com', '大佬越来越厉害了', '2020-06-18 20:17:16');
INSERT INTO `b_msg_comments` VALUES ('42', '0', '0', 'Mimichelle', '2127528604@qq.com', '期待大佬优化后的效果～加油咯，哈哈！', '2020-06-18 20:22:07');
INSERT INTO `b_msg_comments` VALUES ('43', '0', '0', 'TanJia', 'tanjia2014@126.com', '我来啦！！！好流畅～友链友链', '2020-06-18 20:38:24');
INSERT INTO `b_msg_comments` VALUES ('44', '0', '0', 'King', '213356666', '牛逼啊', '2020-06-18 21:41:25');
INSERT INTO `b_msg_comments` VALUES ('45', '0', '0', 'hh', '1635194023@qq.com', '大佬厉害了', '2020-06-19 08:11:15');
INSERT INTO `b_msg_comments` VALUES ('46', '0', '0', 'zxhuan', '1123046380@qq.com', '大神带我飞起来', '2020-06-19 10:26:19');
INSERT INTO `b_msg_comments` VALUES ('47', '0', null, 'TanJia', 'tanjia2014@126.com', '又来了~', '2020-06-28 16:01:51');
INSERT INTO `b_msg_comments` VALUES ('48', '47', '44', '黑夜男神', '395604192@qq.com', '@TanJia 恩恩', '2020-06-30 11:14:02');
INSERT INTO `b_msg_comments` VALUES ('49', '0', null, 'luojie', 'luojie@163.com', '做得还可以啊', '2020-06-30 11:22:58');
INSERT INTO `b_msg_comments` VALUES ('50', '0', null, 'King', '213356666', '牛逼啊', '2020-06-30 11:25:07');
INSERT INTO `b_msg_comments` VALUES ('51', '0', null, 'TanJia', 'tanjia2014@126.com', '！！！好流畅～友链友链', '2020-06-30 11:25:27');
INSERT INTO `b_msg_comments` VALUES ('52', '46', '44', '黑夜男神', '395604192@qq.com', '@zxhuan 能不能正常点 好好说话', '2020-06-30 11:26:56');
INSERT INTO `b_msg_comments` VALUES ('53', '51', '44', '黑夜男神', '395604192@qq.com', '@TanJia 加起来！', '2020-06-30 11:28:30');

-- ----------------------------
-- Table structure for b_related_links
-- ----------------------------
DROP TABLE IF EXISTS `b_related_links`;
CREATE TABLE `b_related_links` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nick_name` varchar(255) DEFAULT NULL,
  `icon` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of b_related_links
-- ----------------------------
INSERT INTO `b_related_links` VALUES ('1', 'TanJia', 'https://www.tanj.com.cn/public/img/lg.png', 'https://www.tanj.com.cn/', '一个前端程序员的个人博客 | 心之所向，无问西东', '44');
INSERT INTO `b_related_links` VALUES ('5', '你真是一个美好的人类', 'https://blog.juanertu.com/images/avatar.png', 'https://blog.juanertu.com', '能与你一起成长，我荣幸之至。', '44');
INSERT INTO `b_related_links` VALUES ('6', '八归少年', 'https://www.yanghujun.com/upload/2019/12/heart-5f900bb03cab4755bbac1c7124b03bc8.jpg', 'https://www.yanghujun.com', '技术改变生活！', '44');
INSERT INTO `b_related_links` VALUES ('7', 'Valcosmos', 'https://www.valzt.cn/media/avatar.png', 'valzt.cn', '一只向往未来和远方的小小程序猿（Web前端）', '44');
INSERT INTO `b_related_links` VALUES ('8', '可定博客', 'https://avatar.wnag.com.cn/gravatar.png', ':https://wnag.com.cn', '点进来的，都是各个方面的大佬~', '44');
INSERT INTO `b_related_links` VALUES ('9', '封尘居', 'https://www.fengchenju.xyz/avatar.png', 'https://www.fengchenju.xyz', '愿有前程可奔赴 亦有岁月可回首', '44');
INSERT INTO `b_related_links` VALUES ('10', 'Liu_Cabbage ', 'https://www.baocaige.top/favicon.ico ', 'https://www.baocaige.top ', '一叶浮萍归大海，人生何处不相逢', '44');
INSERT INTO `b_related_links` VALUES ('11', 'zkpeace', 'https://img-1253324855.cos.ap-chengdu.myqcloud.com/myweb/public/avatar.jpg   作者: Kp Zhang 链接: https://zkpeace.com/blog/about/link/ 来源: Zkpeace 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。', 'https://zkpeace.com', '欢迎光临?', '44');
INSERT INTO `b_related_links` VALUES ('12', 'cungudafa', 'https://cungudafa.top/links/ 来源：cungudafa姑  https://cdn.jsdelivr.net/gh/cungudafa/cdn/img/custom/cungudafa.jpg', ' https://cungudafa.top', '一个学习记录者', '44');
INSERT INTO `b_related_links` VALUES ('13', '飒白', 'https://tjzzz.com/img/avatar.png', ' https://www.tjzzz.com', '一个主播和程序员的奇妙结合体', '44');
INSERT INTO `b_related_links` VALUES ('14', '文渊', 'https://www.wenyuanblog.com/medias/avatar.png', 'https://www.wenyuanblog.com/', '一个90后程序员，终身学习者。', '44');
INSERT INTO `b_related_links` VALUES ('15', 'SSCS', ' https://leo-1258096517.cos.ap-shanghai.myqcloud.com/sscs/logo1.png', 'https://www.sscrazy.com/', ' 如果不能保持永恒，那就追求一刹那的光辉！', '44');

-- ----------------------------
-- Table structure for b_tags
-- ----------------------------
DROP TABLE IF EXISTS `b_tags`;
CREATE TABLE `b_tags` (
  `tags_id` int(11) NOT NULL AUTO_INCREMENT,
  `tags_name` char(255) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`tags_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of b_tags
-- ----------------------------
INSERT INTO `b_tags` VALUES ('1', 'javascript', '44');
INSERT INTO `b_tags` VALUES ('2', 'bug', '44');
INSERT INTO `b_tags` VALUES ('3', '技术', '44');
INSERT INTO `b_tags` VALUES ('4', '解决方案', '44');
INSERT INTO `b_tags` VALUES ('5', 'demo', '44');
INSERT INTO `b_tags` VALUES ('6', '火影', '33');
INSERT INTO `b_tags` VALUES ('7', '正义的光', '33');
INSERT INTO `b_tags` VALUES ('8', '前端', '44');
INSERT INTO `b_tags` VALUES ('9', '后端', '44');
INSERT INTO `b_tags` VALUES ('10', '设计', '44');
INSERT INTO `b_tags` VALUES ('11', 'jQuery', '44');
INSERT INTO `b_tags` VALUES ('12', '随笔', '44');

-- ----------------------------
-- Table structure for sys_login_logs
-- ----------------------------
DROP TABLE IF EXISTS `sys_login_logs`;
CREATE TABLE `sys_login_logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `login_time` datetime DEFAULT NULL,
  `login_ip` varchar(255) DEFAULT NULL,
  `login_address` varchar(50) DEFAULT NULL,
  `login_description` varchar(50) NOT NULL,
  `user_name` varchar(50) DEFAULT NULL,
  `login_agent` varchar(255) DEFAULT NULL,
  `login_agent_info` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `LOG_USER_LOGIN` FOREIGN KEY (`user_id`) REFERENCES `sys_user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=353 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_login_logs
-- ----------------------------
INSERT INTO `sys_login_logs` VALUES ('11', null, '2020-04-15 10:45:13', 'localhost', '本地登入', '该用户不存在', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('24', '33', '2020-04-15 15:34:55', '14.23.92.186', '未知', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('25', null, '2020-04-15 15:36:00', 'localhost', '本地登入', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('27', '33', '2020-04-15 15:39:03', '127.0.0.1', '本地登入', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('31', null, '2020-04-15 18:00:01', '127.0.0.1', '本地登入', '该用户不存在', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('32', null, '2020-04-15 18:00:03', '127.0.0.1', '本地登入', '该用户不存在', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('33', null, '2020-04-15 18:00:04', '127.0.0.1', '本地登入', '该用户不存在', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('34', '33', '2020-04-15 18:00:18', '127.0.0.1', '本地登入', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('39', null, '2020-04-16 12:41:54', '127.0.0.1', '本地登入', '用户密码错误', '', 'Postman', null);
INSERT INTO `sys_login_logs` VALUES ('49', null, '2020-04-17 15:13:27', 'localhost', '本地登入', '该用户不存在', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('50', null, '2020-04-17 15:13:30', 'localhost', '本地登入', '该用户不存在', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('63', '29', '2020-04-19 22:22:29', 'localhost', '本地登入', '登录成功！', '马克', 'Mac 10.14.6', null);
INSERT INTO `sys_login_logs` VALUES ('76', null, '2020-04-22 15:37:58', '14.23.92.186', '未知', '该用户不存在', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('78', '33', '2020-04-22 15:48:14', '14.23.92.186', '未知', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('80', '33', '2020-04-22 15:57:55', '14.23.92.186', '未知', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('81', '33', '2020-04-22 16:03:00', '14.23.92.186', '未知', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('82', null, '2020-04-22 17:06:23', '127.0.0.1', '本地登入', '该用户不存在', '', 'Postman', null);
INSERT INTO `sys_login_logs` VALUES ('92', '33', '2020-04-24 12:27:53', 'localhost', '本地登入', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('114', '33', '2020-04-25 19:48:34', 'localhost', '本地登入', '登录成功！', '林朝梁', 'Mac 10.14.6', null);
INSERT INTO `sys_login_logs` VALUES ('128', '33', '2020-04-26 10:58:23', 'localhost', '本地登入', '登录成功！', '林朝梁', 'Mac 10.14.6', null);
INSERT INTO `sys_login_logs` VALUES ('138', null, '2020-04-27 12:58:25', '127.0.0.1', '本地登入', '用户密码错误', '', 'Postman', null);
INSERT INTO `sys_login_logs` VALUES ('139', null, '2020-04-27 12:59:50', '127.0.0.1', '本地登入', '用户密码错误', '', 'Postman', null);
INSERT INTO `sys_login_logs` VALUES ('140', null, '2020-04-27 13:00:08', '127.0.0.1', '本地登入', '用户密码错误', '', 'Postman', null);
INSERT INTO `sys_login_logs` VALUES ('141', null, '2020-04-27 13:00:29', '127.0.0.1', '本地登入', '用户密码错误', '', 'Postman', null);
INSERT INTO `sys_login_logs` VALUES ('186', null, '2020-04-28 22:20:43', '119.129.204.121', '未知', '该用户不存在', '', 'Postman', null);
INSERT INTO `sys_login_logs` VALUES ('225', null, '2020-05-07 14:05:57', '14.23.92.186', '未知', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('226', null, '2020-05-07 14:06:06', '14.23.92.186', '未知', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('227', null, '2020-05-07 14:06:35', '14.23.92.186', '未知', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('228', '33', '2020-05-07 14:06:48', '14.23.92.186', '未知', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('229', null, '2020-05-07 14:32:24', '61.140.134.164', '未知', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('232', null, '2020-05-07 15:37:13', 'localhost', '本地登入', '该用户不存在', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('233', '33', '2020-05-07 16:09:53', 'localhost', '本地登入', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('234', '33', '2020-05-07 16:09:54', 'localhost', '本地登入', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('235', '33', '2020-05-07 16:10:00', 'localhost', '本地登入', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('236', '44', '2020-05-07 16:15:07', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('237', '44', '2020-05-07 16:15:12', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('238', '44', '2020-05-07 16:19:29', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('239', '44', '2020-05-07 18:13:37', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('240', '44', '2020-05-07 18:13:47', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('241', '44', '2020-05-08 08:55:45', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('242', '44', '2020-05-08 16:51:04', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('243', '44', '2020-05-08 17:08:53', '14.23.92.186', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('244', '44', '2020-05-11 11:01:26', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('245', '44', '2020-05-11 11:01:29', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('246', null, '2020-05-11 13:27:28', '14.23.92.186', '未知', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('247', null, '2020-05-11 13:27:39', '14.23.92.186', '未知', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('248', '44', '2020-05-11 14:01:48', '14.23.92.186', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('249', '44', '2020-05-11 14:01:55', '14.23.92.186', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('250', '44', '2020-05-11 14:02:01', '14.23.92.186', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('251', '44', '2020-05-11 15:09:55', '14.23.92.186', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('252', '44', '2020-05-11 15:38:34', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('253', '44', '2020-05-11 15:38:39', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('254', '44', '2020-05-11 18:39:16', '14.23.92.186', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('255', '44', '2020-05-11 18:39:22', '14.23.92.186', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('256', null, '2020-05-11 19:52:06', 'localhost', '本地登入', '该用户已经被禁用请联系管理员', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('257', '44', '2020-05-11 19:52:35', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('258', '44', '2020-05-12 10:02:10', '14.23.92.186', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('259', '3', '2020-05-12 10:07:42', 'localhost', '本地登入', '该用户已经被禁用请联系管理员!', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('260', '3', '2020-05-12 10:08:34', 'localhost', '本地登入', '该用户已经被禁用请联系管理员!', '曹操', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('261', '44', '2020-05-12 10:09:55', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('262', '44', '2020-05-12 11:13:11', '14.23.92.186', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('263', '44', '2020-05-12 13:56:00', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('264', '44', '2020-05-12 13:56:08', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('265', '33', '2020-05-12 13:57:45', 'localhost', '本地登入', '登录成功！', '林朝梁', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('266', '33', '2020-05-12 15:28:27', 'localhost', '本地登入', '登录成功！', 'linchaoliang', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('267', '33', '2020-05-13 09:15:20', 'localhost', '本地登入', '登录成功！', 'linchaoliang', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('268', '44', '2020-05-13 13:57:01', '14.23.92.186', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('269', '33', '2020-05-13 16:30:40', 'localhost', '本地登入', '登录成功！', 'linchaoliang', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('270', '44', '2020-05-14 09:11:18', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('271', '44', '2020-05-14 11:37:41', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('272', '44', '2020-05-14 14:11:07', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('273', '44', '2020-05-14 18:09:47', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('274', '44', '2020-05-15 10:33:52', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('275', '44', '2020-05-18 09:07:13', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('276', '44', '2020-05-18 09:57:49', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('277', '44', '2020-05-18 16:04:48', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('278', '44', '2020-05-18 18:53:55', '127.0.0.1', '本地登入', '登录成功！', '王希平', 'Postman', null);
INSERT INTO `sys_login_logs` VALUES ('279', '44', '2020-05-18 18:56:09', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('280', '44', '2020-05-18 19:10:07', '127.0.0.1', '本地登入', '登录成功！', '王希平', 'Postman', null);
INSERT INTO `sys_login_logs` VALUES ('281', '44', '2020-05-18 19:36:33', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('282', '44', '2020-05-18 19:36:50', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('283', '44', '2020-05-19 10:36:16', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('284', '33', '2020-05-19 10:39:34', 'localhost', '本地登入', '登录成功！', 'linchaoliang', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('285', '33', '2020-05-19 10:39:38', 'localhost', '本地登入', '登录成功！', 'linchaoliang', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('286', '44', '2020-05-19 11:27:10', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('287', '44', '2020-05-19 13:56:23', '127.0.0.1', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('288', '44', '2020-05-19 18:54:38', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('289', '44', '2020-05-19 18:54:43', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('290', '44', '2020-05-21 09:00:34', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('291', '44', '2020-05-21 09:00:38', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('292', '44', '2020-05-21 13:51:21', '127.0.0.1', '未知', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('293', '44', '2020-05-21 18:13:22', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('294', '44', '2020-05-22 09:09:37', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('295', '44', '2020-05-22 15:59:49', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('296', '44', '2020-05-22 15:59:53', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('297', '44', '2020-05-26 11:24:10', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('298', '44', '2020-05-26 12:49:15', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('299', '44', '2020-05-26 18:26:39', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('300', '44', '2020-05-26 19:39:43', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('301', '44', '2020-05-27 14:10:07', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('302', '44', '2020-05-27 14:10:13', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('303', '44', '2020-05-27 15:32:28', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('304', '44', '2020-05-27 17:45:43', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('305', '44', '2020-05-28 10:41:41', 'localhost', '本地登入', '登录成功！', '王希平', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('306', '44', '2020-05-28 12:32:59', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('307', '44', '2020-05-28 14:40:05', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('308', '44', '2020-05-28 14:40:12', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('309', '44', '2020-05-28 17:10:26', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('310', '44', '2020-05-28 17:10:30', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('311', '44', '2020-05-28 17:10:35', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('312', '44', '2020-06-02 19:27:35', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('313', '44', '2020-06-03 09:40:56', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('314', '44', '2020-06-03 14:38:43', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('315', '44', '2020-06-04 15:23:10', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('316', '44', '2020-06-04 15:23:18', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('317', '44', '2020-06-04 17:02:19', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('318', '44', '2020-06-04 17:02:24', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('319', '44', '2020-06-04 18:10:30', 'localhost', '本地登入', '用户密码错误', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('320', '44', '2020-06-04 18:10:35', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('321', '44', '2020-06-04 18:10:39', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('322', '44', '2020-06-04 18:10:44', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('323', '44', '2020-06-05 09:14:29', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('324', '44', '2020-06-05 09:15:14', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('325', '44', '2020-06-05 09:17:19', '127.0.0.1', '未知', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('326', '44', '2020-06-05 09:23:56', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('327', '44', '2020-06-05 09:27:43', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('328', '44', '2020-06-05 12:59:08', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('329', '44', '2020-06-08 15:26:05', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('330', '44', '2020-06-08 15:26:11', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('331', '44', '2020-06-11 12:28:05', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('332', '44', '2020-06-11 13:38:31', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('333', '44', '2020-06-11 13:38:36', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('334', '44', '2020-06-12 12:06:38', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('335', '44', '2020-06-12 12:06:42', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('336', '44', '2020-06-13 09:05:15', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('337', '44', '2020-06-13 10:10:29', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('338', '9', '2020-06-13 14:48:41', 'localhost', '本地登入', '登录成功！', '王者1', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('339', '44', '2020-06-13 14:49:22', 'localhost', '本地登入', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('340', null, '2020-06-22 18:46:24', '14.23.92.186', '未知', '该用户不存在', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('341', '44', '2020-06-22 18:46:28', '14.23.92.186', '未知', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('342', '44', '2020-06-23 09:20:01', '14.23.92.186', '未知', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('343', '44', '2020-06-23 11:11:18', '14.23.92.186', '未知', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('344', '44', '2020-06-23 11:11:24', '14.23.92.186', '未知', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('345', '44', '2020-06-23 17:36:48', '14.23.92.186', '未知', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('346', null, '2020-06-29 14:53:28', '14.23.92.186', '未知', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('347', null, '2020-06-29 14:53:34', '14.23.92.186', '未知', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('348', null, '2020-06-29 14:53:38', '14.23.92.186', '未知', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('349', '44', '2020-06-29 14:54:21', '14.23.92.186', '未知', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('350', null, '2020-06-30 09:44:31', '14.23.92.186', '未知', '用户密码错误', '', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('351', '44', '2020-06-30 09:44:33', '14.23.92.186', '未知', '登录成功！', '黑夜男神', 'Windows 6.1', null);
INSERT INTO `sys_login_logs` VALUES ('352', '44', '2020-06-30 10:46:11', '14.23.92.186', '未知', '登录成功！', '黑夜男神', 'Windows 6.1', null);

-- ----------------------------
-- Table structure for sys_operation_logs
-- ----------------------------
DROP TABLE IF EXISTS `sys_operation_logs`;
CREATE TABLE `sys_operation_logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `nick_name` char(50) DEFAULT NULL,
  `action_method` char(255) DEFAULT 'yoyp',
  `action_ip` char(255) DEFAULT NULL,
  `action_params` char(255) DEFAULT NULL,
  `action_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7836 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_operation_logs
-- ----------------------------
INSERT INTO `sys_operation_logs` VALUES ('7580', '44', '黑夜男神', '[GET] /api/getUserMenuList', '14.23.92.186', '', '2020-06-23 17:36:49');
INSERT INTO `sys_operation_logs` VALUES ('7581', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\"}', '2020-06-23 17:36:52');
INSERT INTO `sys_operation_logs` VALUES ('7582', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:36:52');
INSERT INTO `sys_operation_logs` VALUES ('7583', '44', '黑夜男神', '[GET] /api/role/list', '14.23.92.186', '', '2020-06-23 17:36:53');
INSERT INTO `sys_operation_logs` VALUES ('7584', '44', '黑夜男神', '[GET] /api/user/list', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 17:36:57');
INSERT INTO `sys_operation_logs` VALUES ('7585', '44', '黑夜男神', '[GET] /api/role/list', '14.23.92.186', '', '2020-06-23 17:36:57');
INSERT INTO `sys_operation_logs` VALUES ('7586', '44', '黑夜男神', '[GET] /api/user/list', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 17:37:03');
INSERT INTO `sys_operation_logs` VALUES ('7587', '44', '黑夜男神', '[GET] /api/user/list', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 17:37:08');
INSERT INTO `sys_operation_logs` VALUES ('7588', '44', '黑夜男神', '[PUT] /api/user/updateUser', '14.23.92.186', '{\"user_id\":44,\"nick_name\":\"黑夜男神\",\"password\":\"101029xixi\",\"email\":\"395604192@qq.com\",\"phone\":\"13076897374\",\"avatar\":\"https://uploadfile.huiyi8.com/up/25/70/a1/2570a194efbc9fcd2ac7f94530dfe482.jpg\",\"role_id\":[1,2]}', '2020-06-23 17:37:20');
INSERT INTO `sys_operation_logs` VALUES ('7589', '44', '黑夜男神', '[GET] /api/user/list', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 17:37:20');
INSERT INTO `sys_operation_logs` VALUES ('7590', '44', '黑夜男神', '[GET] /api/operationLos/list', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\"}', '2020-06-23 17:37:28');
INSERT INTO `sys_operation_logs` VALUES ('7591', '44', '黑夜男神', '[GET] /api/loginLogs/list', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\"}', '2020-06-23 17:37:29');
INSERT INTO `sys_operation_logs` VALUES ('7592', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 17:37:31');
INSERT INTO `sys_operation_logs` VALUES ('7593', '44', '黑夜男神', '[GET] /api/blogs/articleClassList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 17:37:32');
INSERT INTO `sys_operation_logs` VALUES ('7594', '44', '黑夜男神', '[GET] /api/blogs/articleTagsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 17:37:32');
INSERT INTO `sys_operation_logs` VALUES ('7595', '44', '黑夜男神', '[GET] /api/blogs/commentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 17:37:33');
INSERT INTO `sys_operation_logs` VALUES ('7596', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 17:37:34');
INSERT INTO `sys_operation_logs` VALUES ('7597', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"treeId\":\"10\"}', '2020-06-23 17:38:01');
INSERT INTO `sys_operation_logs` VALUES ('7598', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:38:01');
INSERT INTO `sys_operation_logs` VALUES ('7599', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"treeId\":\"9\"}', '2020-06-23 17:38:02');
INSERT INTO `sys_operation_logs` VALUES ('7600', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:38:02');
INSERT INTO `sys_operation_logs` VALUES ('7601', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"treeId\":\"4\"}', '2020-06-23 17:38:03');
INSERT INTO `sys_operation_logs` VALUES ('7602', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:38:03');
INSERT INTO `sys_operation_logs` VALUES ('7603', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"treeId\":\"8\"}', '2020-06-23 17:38:04');
INSERT INTO `sys_operation_logs` VALUES ('7604', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:38:04');
INSERT INTO `sys_operation_logs` VALUES ('7605', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"treeId\":\"38\"}', '2020-06-23 17:38:04');
INSERT INTO `sys_operation_logs` VALUES ('7606', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:38:04');
INSERT INTO `sys_operation_logs` VALUES ('7607', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"treeId\":\"5\"}', '2020-06-23 17:38:05');
INSERT INTO `sys_operation_logs` VALUES ('7608', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:38:05');
INSERT INTO `sys_operation_logs` VALUES ('7609', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"treeId\":\"99\"}', '2020-06-23 17:38:06');
INSERT INTO `sys_operation_logs` VALUES ('7610', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:38:06');
INSERT INTO `sys_operation_logs` VALUES ('7611', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"treeId\":\"108\"}', '2020-06-23 17:38:07');
INSERT INTO `sys_operation_logs` VALUES ('7612', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:38:07');
INSERT INTO `sys_operation_logs` VALUES ('7613', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"treeId\":\"40\"}', '2020-06-23 17:38:08');
INSERT INTO `sys_operation_logs` VALUES ('7614', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:38:08');
INSERT INTO `sys_operation_logs` VALUES ('7615', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"treeId\":\"5\"}', '2020-06-23 17:38:08');
INSERT INTO `sys_operation_logs` VALUES ('7616', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-23 17:38:08');
INSERT INTO `sys_operation_logs` VALUES ('7617', '44', '黑夜男神', '[GET] /api/blogs/relatedLinksList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 17:38:15');
INSERT INTO `sys_operation_logs` VALUES ('7618', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 17:39:28');
INSERT INTO `sys_operation_logs` VALUES ('7619', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 17:39:28');
INSERT INTO `sys_operation_logs` VALUES ('7620', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 17:43:34');
INSERT INTO `sys_operation_logs` VALUES ('7621', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"自制H5视频播放器\",\"class_id\":\"\",\"tagsArr\":[5,8,1],\"cover_url\":\"/public/uploads/u=22846729,1219912859&fm=193.jpg\",\"is_top\":true,\"content\":\"js\\n```\\n\\n/**\\n*H5播放器\\n*@authorsxipwang\\n*@date2017-07-213:56:01\\n*@version$1.0$\\n*/\\n(function($,win,doc,undefin', '2020-06-23 17:43:39');
INSERT INTO `sys_operation_logs` VALUES ('7622', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"自制H5视频播放器\",\"class_id\":\"\",\"tagsArr\":[5,8,1],\"cover_url\":\"/public/uploads/u=22846729,1219912859&fm=193.jpg\",\"is_top\":true,\"content\":\"js\\n```\\n\\n/**\\n*H5播放器\\n*@authorsxipwang\\n*@date2017-07-213:56:01\\n*@version$1.0$\\n*/\\n(function($,win,doc,undefin', '2020-06-23 17:43:44');
INSERT INTO `sys_operation_logs` VALUES ('7623', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"自制H5视频播放器\",\"class_id\":\"\",\"tagsArr\":[5,8,1],\"cover_url\":\"/public/uploads/u=22846729,1219912859&fm=193.jpg\",\"is_top\":true,\"content\":\"js\\n```\\n\\n/**\\n*H5播放器\\n*@authorsxipwang\\n*@date2017-07-213:56:01\\n*@version$1.0$\\n*/\\n(function($,win,doc,undefin', '2020-06-23 17:44:19');
INSERT INTO `sys_operation_logs` VALUES ('7624', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 18:25:54');
INSERT INTO `sys_operation_logs` VALUES ('7625', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 18:25:54');
INSERT INTO `sys_operation_logs` VALUES ('7626', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 18:26:20');
INSERT INTO `sys_operation_logs` VALUES ('7627', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"javaScript文件分片上传思路\",\"class_id\":1,\"tagsArr\":[3,4,8],\"cover_url\":\"/public/uploads/261d3a5215d7dba12b086161c17bb697.jpeg\",\"is_top\":false,\"content\":\"####备注：目前只是探索下实现的思路并不带任何规则和业务\\n\\n####原料：\\n####1.Blob对象\\n######一个Blob对象表示一个不可变的,原始数据的类似文件对象。Blob表示的数据', '2020-06-23 18:26:23');
INSERT INTO `sys_operation_logs` VALUES ('7628', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 18:26:23');
INSERT INTO `sys_operation_logs` VALUES ('7629', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 18:27:20');
INSERT INTO `sys_operation_logs` VALUES ('7630', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 18:27:20');
INSERT INTO `sys_operation_logs` VALUES ('7631', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 18:27:38');
INSERT INTO `sys_operation_logs` VALUES ('7632', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"自制H5视频播放器\",\"class_id\":1,\"tagsArr\":[5,3],\"cover_url\":\"/public/uploads/timg.jpg\",\"is_top\":false,\"content\":\"#####播放器浏览地址\\n**[[color=#ff0000]http://www.xipwang.cn/wp-content/themes/Unite/single-html_demo.php?id=336[/color]](http://www.xipwang.cn/wp-', '2020-06-23 18:27:43');
INSERT INTO `sys_operation_logs` VALUES ('7633', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 18:27:43');
INSERT INTO `sys_operation_logs` VALUES ('7634', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 18:27:54');
INSERT INTO `sys_operation_logs` VALUES ('7635', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 18:27:56');
INSERT INTO `sys_operation_logs` VALUES ('7636', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 18:27:56');
INSERT INTO `sys_operation_logs` VALUES ('7637', '44', '黑夜男神', '[GET] /api/blogs/articleDetail', '14.23.92.186', '{\"article_id\":\"49\"}', '2020-06-23 18:27:56');
INSERT INTO `sys_operation_logs` VALUES ('7638', '44', '黑夜男神', '[PUT] /api/blogs/updateArticle', '14.23.92.186', '{\"title\":\"自制H5视频播放器\",\"class_id\":1,\"tagsArr\":[5,3],\"cover_url\":\"/public/uploads/timg.jpg\",\"is_top\":true,\"content\":\"#####播放器浏览地址\\n**[[color=#ff0000]http://www.xipwang.cn/wp-content/themes/Unite/single-html_demo.php?id=336[/color]](http://www.xipwang.cn/wp-c', '2020-06-23 18:28:01');
INSERT INTO `sys_operation_logs` VALUES ('7639', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 18:28:01');
INSERT INTO `sys_operation_logs` VALUES ('7640', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 18:56:18');
INSERT INTO `sys_operation_logs` VALUES ('7641', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 18:56:18');
INSERT INTO `sys_operation_logs` VALUES ('7642', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 18:56:29');
INSERT INTO `sys_operation_logs` VALUES ('7643', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"原生javascript上传图片带进度条\",\"class_id\":1,\"tagsArr\":[1,3,5],\"cover_url\":\"/public/uploads/timg.jpg\",\"is_top\":false,\"content\":\"![原生javascript上传图片带进度条](attimg://article/content/picture/201703/22/180824me8kx39le4e3xwe3.png)\\n\\n\\n![原生javascript上传图片带进度条](att', '2020-06-23 18:56:46');
INSERT INTO `sys_operation_logs` VALUES ('7644', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 18:56:46');
INSERT INTO `sys_operation_logs` VALUES ('7645', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 18:57:58');
INSERT INTO `sys_operation_logs` VALUES ('7646', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 18:57:58');
INSERT INTO `sys_operation_logs` VALUES ('7647', '44', '黑夜男神', '[GET] /api/blogs/articleDetail', '14.23.92.186', '{\"article_id\":\"48\"}', '2020-06-23 18:57:58');
INSERT INTO `sys_operation_logs` VALUES ('7648', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 18:58:02');
INSERT INTO `sys_operation_logs` VALUES ('7649', '44', '黑夜男神', '[PUT] /api/blogs/updateArticle', '14.23.92.186', '{\"title\":\"javaScript文件分片上传思路\",\"class_id\":1,\"tagsArr\":[3,4,8],\"cover_url\":\"/public/uploads/84ae30c406481c699e9e0294838d6852.jpg\",\"is_top\":false,\"content\":\"####备注：目前只是探索下实现的思路并不带任何规则和业务\\n\\n####原料：\\n####1.Blob对象\\n######一个Blob对象表示一个不可变的,原始数据的类似文件对象。Blob表示的数据不', '2020-06-23 18:58:04');
INSERT INTO `sys_operation_logs` VALUES ('7650', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 18:58:04');
INSERT INTO `sys_operation_logs` VALUES ('7651', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 18:58:17');
INSERT INTO `sys_operation_logs` VALUES ('7652', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 18:58:17');
INSERT INTO `sys_operation_logs` VALUES ('7653', '44', '黑夜男神', '[GET] /api/blogs/articleDetail', '14.23.92.186', '{\"article_id\":\"40\"}', '2020-06-23 18:58:17');
INSERT INTO `sys_operation_logs` VALUES ('7654', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 18:58:20');
INSERT INTO `sys_operation_logs` VALUES ('7655', '44', '黑夜男神', '[PUT] /api/blogs/updateArticle', '14.23.92.186', '{\"title\":\"手写promise\",\"class_id\":1,\"tagsArr\":[1,3,8],\"cover_url\":\"/public/uploads/84ae30c406481c699e9e0294838d6852.jpg\",\"is_top\":false,\"content\":\"```\\n<!DOCTYPEhtml>\\n<htmllang=\\\"en\\\">\\n\\n<head>\\n<metacharset=\\\"UTF-8\\\">\\n<metaname=\\\"viewport\\\"content=\\\"wid', '2020-06-23 18:58:22');
INSERT INTO `sys_operation_logs` VALUES ('7656', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 18:58:22');
INSERT INTO `sys_operation_logs` VALUES ('7657', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 18:59:09');
INSERT INTO `sys_operation_logs` VALUES ('7658', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 18:59:09');
INSERT INTO `sys_operation_logs` VALUES ('7659', '44', '黑夜男神', '[GET] /api/blogs/articleDetail', '14.23.92.186', '{\"article_id\":\"49\"}', '2020-06-23 18:59:09');
INSERT INTO `sys_operation_logs` VALUES ('7660', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 18:59:12');
INSERT INTO `sys_operation_logs` VALUES ('7661', '44', '黑夜男神', '[PUT] /api/blogs/updateArticle', '14.23.92.186', '{\"title\":\"自制H5视频播放器\",\"class_id\":1,\"tagsArr\":[5,3],\"cover_url\":\"/public/uploads/84ae30c406481c699e9e0294838d6852.jpg\",\"is_top\":true,\"content\":\"#####播放器浏览地址\\n**[[color=#ff0000]http://www.xipwang.cn/wp-content/themes/Unite/single-html_demo.php?id=336[/color]', '2020-06-23 18:59:18');
INSERT INTO `sys_operation_logs` VALUES ('7662', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 18:59:18');
INSERT INTO `sys_operation_logs` VALUES ('7663', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 18:59:25');
INSERT INTO `sys_operation_logs` VALUES ('7664', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 18:59:27');
INSERT INTO `sys_operation_logs` VALUES ('7665', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 18:59:27');
INSERT INTO `sys_operation_logs` VALUES ('7666', '44', '黑夜男神', '[GET] /api/blogs/articleDetail', '14.23.92.186', '{\"article_id\":\"50\"}', '2020-06-23 18:59:27');
INSERT INTO `sys_operation_logs` VALUES ('7667', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 18:59:30');
INSERT INTO `sys_operation_logs` VALUES ('7668', '44', '黑夜男神', '[PUT] /api/blogs/updateArticle', '14.23.92.186', '{\"title\":\"原生javascript上传图片带进度条\",\"class_id\":1,\"tagsArr\":[1,3,5],\"cover_url\":\"/public/uploads/84ae30c406481c699e9e0294838d6852.jpg\",\"is_top\":false,\"content\":\"![原生javascript上传图片带进度条](attimg://article/content/picture/201703/22/180824me8kx39le4e3xwe3.png)\\n\\n\\', '2020-06-23 18:59:35');
INSERT INTO `sys_operation_logs` VALUES ('7669', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 18:59:35');
INSERT INTO `sys_operation_logs` VALUES ('7670', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:00:00');
INSERT INTO `sys_operation_logs` VALUES ('7671', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:00:00');
INSERT INTO `sys_operation_logs` VALUES ('7672', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:00:39');
INSERT INTO `sys_operation_logs` VALUES ('7673', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"cookie其他域下访问\",\"class_id\":1,\"tagsArr\":[1],\"cover_url\":\"/public/uploads/84ae30c406481c699e9e0294838d6852.jpg\",\"is_top\":false,\"content\":\"```\\n和路径类似，主机名是指同一个域下的不同主机，例如：www.sosuo8.com和blog.sosuo8.com就是两个不同的主机名。默认情况下，一个主机中创建的cookie在另一个主机下是不能被访问的，但可以通过', '2020-06-23 19:00:49');
INSERT INTO `sys_operation_logs` VALUES ('7674', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:00:49');
INSERT INTO `sys_operation_logs` VALUES ('7675', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:00:50');
INSERT INTO `sys_operation_logs` VALUES ('7676', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:00:50');
INSERT INTO `sys_operation_logs` VALUES ('7677', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:01:36');
INSERT INTO `sys_operation_logs` VALUES ('7678', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"关于input[type=file]的change事件不触发问题\",\"class_id\":1,\"tagsArr\":[2],\"cover_url\":\"/public/uploads/84ae30c406481c699e9e0294838d6852.jpg\",\"is_top\":false,\"content\":\"```\\n在网页操本地文件做上传时候通常都是用INPUT[type=file]控件，\\n这个控件的设计本身就很蛋痛的，\\n当INPUT[type=file]控件上已经选择过一次文件之', '2020-06-23 19:01:37');
INSERT INTO `sys_operation_logs` VALUES ('7679', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:01:37');
INSERT INTO `sys_operation_logs` VALUES ('7680', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:01:45');
INSERT INTO `sys_operation_logs` VALUES ('7681', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:01:45');
INSERT INTO `sys_operation_logs` VALUES ('7682', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:03:11');
INSERT INTO `sys_operation_logs` VALUES ('7683', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"webpack基本配置\",\"class_id\":1,\"tagsArr\":[1],\"cover_url\":\"/public/uploads/a1041096feedb9f5479130096f544248.jpg\",\"is_top\":false,\"content\":\"```\\n\\n//引用nodepath对象获取路径\\nvarpath=require(\'path\');\\n//打包生成html文件与根目录index.html相关联\\nvarhtmlWebpackPlugin=require', '2020-06-23 19:03:14');
INSERT INTO `sys_operation_logs` VALUES ('7684', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:03:14');
INSERT INTO `sys_operation_logs` VALUES ('7685', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:03:34');
INSERT INTO `sys_operation_logs` VALUES ('7686', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:03:34');
INSERT INTO `sys_operation_logs` VALUES ('7687', '44', '黑夜男神', '[GET] /api/blogs/articleDetail', '14.23.92.186', '{\"article_id\":\"53\"}', '2020-06-23 19:03:34');
INSERT INTO `sys_operation_logs` VALUES ('7688', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:03:37');
INSERT INTO `sys_operation_logs` VALUES ('7689', '44', '黑夜男神', '[PUT] /api/blogs/updateArticle', '14.23.92.186', '{\"title\":\"webpack基本配置\",\"class_id\":1,\"tagsArr\":[1],\"cover_url\":\"/public/uploads/9eb3c72bd44612b96176d43e38e5cf14.jpg\",\"is_top\":false,\"content\":\"```\\n\\n//引用nodepath对象获取路径\\nvarpath=require(\'path\');\\n//打包生成html文件与根目录index.html相关联\\nvarhtmlWebpackPlugin=require', '2020-06-23 19:03:40');
INSERT INTO `sys_operation_logs` VALUES ('7690', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:03:40');
INSERT INTO `sys_operation_logs` VALUES ('7691', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:04:05');
INSERT INTO `sys_operation_logs` VALUES ('7692', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:04:05');
INSERT INTO `sys_operation_logs` VALUES ('7693', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:04:11');
INSERT INTO `sys_operation_logs` VALUES ('7694', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"搭建自己简单的ssr-demo\",\"class_id\":\"\",\"tagsArr\":[1,5,8,3],\"cover_url\":\"/public/uploads/5ba338b158474650.jpg\",\"is_top\":false,\"content\":\"##搭建自己简单的ssr-demo\\n\\n\\n[demo地址](https://note.youdao.com/)https://github.com/darkNightMan/vue-ssr\\n###BuildSetup\\n\\n``', '2020-06-23 19:04:26');
INSERT INTO `sys_operation_logs` VALUES ('7695', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"搭建自己简单的ssr-demo\",\"class_id\":\"\",\"tagsArr\":[1,5,8,3],\"cover_url\":\"/public/uploads/5ba338b158474650.jpg\",\"is_top\":false,\"content\":\"##搭建自己简单的ssr-demo\\n\\n\\n[demo地址](https://note.youdao.com/)https://github.com/darkNightMan/vue-ssr\\n###BuildSetup\\n\\n``', '2020-06-23 19:04:28');
INSERT INTO `sys_operation_logs` VALUES ('7696', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:04:47');
INSERT INTO `sys_operation_logs` VALUES ('7697', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:04:47');
INSERT INTO `sys_operation_logs` VALUES ('7698', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:04:52');
INSERT INTO `sys_operation_logs` VALUES ('7699', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"搭建自己简单的ssr-demo\",\"class_id\":1,\"tagsArr\":[3,5],\"cover_url\":\"/public/uploads/5ba338b158474650.jpg\",\"is_top\":false,\"content\":\"##搭建自己简单的ssr-demo\\n\\n\\n[demo地址](https://note.youdao.com/)https://github.com/darkNightMan/vue-ssr\\n###BuildSetup\\n\\n```\\n#i', '2020-06-23 19:05:09');
INSERT INTO `sys_operation_logs` VALUES ('7700', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:05:09');
INSERT INTO `sys_operation_logs` VALUES ('7701', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:05:14');
INSERT INTO `sys_operation_logs` VALUES ('7702', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:05:14');
INSERT INTO `sys_operation_logs` VALUES ('7703', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:05:32');
INSERT INTO `sys_operation_logs` VALUES ('7704', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"JQuery无缝轮播\",\"class_id\":1,\"tagsArr\":[5],\"cover_url\":\"/public/uploads/84ae30c406481c699e9e0294838d6852.jpg\",\"is_top\":false,\"content\":\"**html代码**\\n\\n```html:run\\n<!DOCTYPEhtml>\\n<htmllang=\\\"en\\\">\\n<head>\\n\\t<metacharset=\\\"UTF-8\\\">\\n\\t<title>无缝轮播</t', '2020-06-23 19:05:40');
INSERT INTO `sys_operation_logs` VALUES ('7705', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:05:40');
INSERT INTO `sys_operation_logs` VALUES ('7706', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:05:42');
INSERT INTO `sys_operation_logs` VALUES ('7707', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:05:42');
INSERT INTO `sys_operation_logs` VALUES ('7708', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:06:09');
INSERT INTO `sys_operation_logs` VALUES ('7709', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"正则表达式修饰符\",\"class_id\":1,\"tagsArr\":[1],\"cover_url\":\"/public/uploads/261d3a5215d7dba12b086161c17bb697.jpeg\",\"is_top\":false,\"content\":\"```\\ni不区分(ignore)大小写；\\n例如:/abc/i可以匹配abc、aBC、Abc\\ng全局(global)匹配\\n如果不带g，正则过程中字符串从左到右匹配，找到第一个符合条件的即匹配成功，返回\\n如果带g，则字符串', '2020-06-23 19:06:17');
INSERT INTO `sys_operation_logs` VALUES ('7710', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:06:17');
INSERT INTO `sys_operation_logs` VALUES ('7711', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:06:28');
INSERT INTO `sys_operation_logs` VALUES ('7712', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:06:28');
INSERT INTO `sys_operation_logs` VALUES ('7713', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:06:42');
INSERT INTO `sys_operation_logs` VALUES ('7714', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"封装图片预加载\",\"class_id\":1,\"tagsArr\":[3,5],\"cover_url\":\"/public/uploads/84ae30c406481c699e9e0294838d6852.jpg\",\"is_top\":false,\"content\":\"**html代码**\\n\\n```html:run\\n<!DOCTYPEhtml>\\n<htmllang=\\\"en\\\">\\n<head>\\n\\t<metacharset=\\\"UTF-8\\\">\\n\\t<title>节点控制区域预加', '2020-06-23 19:06:45');
INSERT INTO `sys_operation_logs` VALUES ('7715', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:06:45');
INSERT INTO `sys_operation_logs` VALUES ('7716', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:07:03');
INSERT INTO `sys_operation_logs` VALUES ('7717', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:07:03');
INSERT INTO `sys_operation_logs` VALUES ('7718', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:07:09');
INSERT INTO `sys_operation_logs` VALUES ('7719', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"vue中组件封装v-mode使用\",\"class_id\":1,\"tagsArr\":[3,5,8],\"cover_url\":\"/public/uploads/5ba338b158474650.jpg\",\"is_top\":true,\"content\":\"一个组件上的v-model默认会利用名为value的prop和名为input的事件，但是像单选框、复选框等类型的输入控件可能会将value特性用于不同的目。model选项可以用来避免这样的冲突：\\n\\n```\\n<template>\\n<i', '2020-06-23 19:07:25');
INSERT INTO `sys_operation_logs` VALUES ('7720', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:07:25');
INSERT INTO `sys_operation_logs` VALUES ('7721', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:08:06');
INSERT INTO `sys_operation_logs` VALUES ('7722', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:08:06');
INSERT INTO `sys_operation_logs` VALUES ('7723', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:09:47');
INSERT INTO `sys_operation_logs` VALUES ('7724', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"git操作\",\"class_id\":19,\"tagsArr\":[3],\"cover_url\":\"/public/uploads/timg(2).jpg\",\"is_top\":false,\"content\":\"```\\ngitreset--softxxx(commit操作的哈希ID)\\n用于本地仓库分支提交撤回至暂存区域\\n\\ngitreset--mixedxxx(commit操作的哈希ID)\\n用于将本地仓库文件撤回至未暂存区域\\n\\ngitpush-f\\n强制推送（一般用于重置以后强制', '2020-06-23 19:10:15');
INSERT INTO `sys_operation_logs` VALUES ('7725', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:10:15');
INSERT INTO `sys_operation_logs` VALUES ('7726', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:10:29');
INSERT INTO `sys_operation_logs` VALUES ('7727', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:10:29');
INSERT INTO `sys_operation_logs` VALUES ('7728', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:10:49');
INSERT INTO `sys_operation_logs` VALUES ('7729', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"div水平垂直居中\",\"class_id\":17,\"tagsArr\":[3,5,8],\"cover_url\":\"/public/uploads/u=3117196604,665035782&fm=26&gp=0.jpg\",\"is_top\":false,\"content\":\"弹性布局居中\\n```\\ndiv.parent{\\ndisplay:flex;\\njustify-content:center;\\nalign-items:center;\\n}\\n```\\n定位布局\\n```\\ndi', '2020-06-23 19:10:58');
INSERT INTO `sys_operation_logs` VALUES ('7730', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:10:58');
INSERT INTO `sys_operation_logs` VALUES ('7731', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:12:21');
INSERT INTO `sys_operation_logs` VALUES ('7732', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:12:21');
INSERT INTO `sys_operation_logs` VALUES ('7733', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:12:30');
INSERT INTO `sys_operation_logs` VALUES ('7734', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"call()、apply()和bind()的异同\",\"class_id\":1,\"tagsArr\":[1,3],\"cover_url\":\"/public/uploads/84ae30c406481c699e9e0294838d6852.jpg\",\"is_top\":false,\"content\":\"```\\n相同点：\\n\\nvara={\\nname:\\\"丸子\\\",\\nfn:function(){\\nconsole.log(this.name);\\n}\\n}\\nvarb=a.fn;\\nb()', '2020-06-23 19:12:38');
INSERT INTO `sys_operation_logs` VALUES ('7735', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:12:38');
INSERT INTO `sys_operation_logs` VALUES ('7736', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:13:16');
INSERT INTO `sys_operation_logs` VALUES ('7737', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:13:16');
INSERT INTO `sys_operation_logs` VALUES ('7738', '44', '黑夜男神', '[GET] /api/blogs/articleTagsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:13:36');
INSERT INTO `sys_operation_logs` VALUES ('7739', '44', '黑夜男神', '[POST] /api/blogs/createTagsList', '14.23.92.186', '{\"tags_name\":\"jQuery\",\"tags_id\":\"\"}', '2020-06-23 19:13:48');
INSERT INTO `sys_operation_logs` VALUES ('7740', '44', '黑夜男神', '[GET] /api/blogs/articleTagsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:13:48');
INSERT INTO `sys_operation_logs` VALUES ('7741', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:13:57');
INSERT INTO `sys_operation_logs` VALUES ('7742', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:13:57');
INSERT INTO `sys_operation_logs` VALUES ('7743', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:14:53');
INSERT INTO `sys_operation_logs` VALUES ('7744', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"jquery许愿墙\",\"class_id\":\"\",\"tagsArr\":[11,3],\"cover_url\":\"/public/uploads/a20a581f88ca12dd3bf761a5e9f56ec1.jpg\",\"is_top\":false,\"content\":\"**html代码**\\n\\n```html:run\\n<!DOCTYPEhtml>\\n<htmllang=\\\"en\\\">\\n<head>\\n\\t<metacharset=\\\"UTF-8\\\">\\n\\t<title>许愿墙<', '2020-06-23 19:15:01');
INSERT INTO `sys_operation_logs` VALUES ('7745', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"jquery许愿墙\",\"class_id\":1,\"tagsArr\":[11,3],\"cover_url\":\"/public/uploads/a20a581f88ca12dd3bf761a5e9f56ec1.jpg\",\"is_top\":false,\"content\":\"**html代码**\\n\\n```html:run\\n<!DOCTYPEhtml>\\n<htmllang=\\\"en\\\">\\n<head>\\n\\t<metacharset=\\\"UTF-8\\\">\\n\\t<title>许愿墙</', '2020-06-23 19:15:13');
INSERT INTO `sys_operation_logs` VALUES ('7746', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:15:13');
INSERT INTO `sys_operation_logs` VALUES ('7747', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"4\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:15:17');
INSERT INTO `sys_operation_logs` VALUES ('7748', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:15:19');
INSERT INTO `sys_operation_logs` VALUES ('7749', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:15:19');
INSERT INTO `sys_operation_logs` VALUES ('7750', '44', '黑夜男神', '[GET] /api/blogs/articleDetail', '14.23.92.186', '{\"article_id\":\"65\"}', '2020-06-23 19:15:20');
INSERT INTO `sys_operation_logs` VALUES ('7751', '44', '黑夜男神', '[GET] /api/blogs/articleClassList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:15:39');
INSERT INTO `sys_operation_logs` VALUES ('7752', '44', '黑夜男神', '[DELETE] /api/blogs/deleteClassList', '14.23.92.186', '{\"id\":14}', '2020-06-23 19:15:44');
INSERT INTO `sys_operation_logs` VALUES ('7753', '44', '黑夜男神', '[GET] /api/blogs/articleClassList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:15:44');
INSERT INTO `sys_operation_logs` VALUES ('7754', '44', '黑夜男神', '[GET] /api/blogs/articleTagsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:15:47');
INSERT INTO `sys_operation_logs` VALUES ('7755', '44', '黑夜男神', '[POST] /api/blogs/createTagsList', '14.23.92.186', '{\"tags_name\":\"随笔\",\"tags_id\":\"\"}', '2020-06-23 19:15:54');
INSERT INTO `sys_operation_logs` VALUES ('7756', '44', '黑夜男神', '[GET] /api/blogs/articleTagsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:15:54');
INSERT INTO `sys_operation_logs` VALUES ('7757', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:16:39');
INSERT INTO `sys_operation_logs` VALUES ('7758', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:16:39');
INSERT INTO `sys_operation_logs` VALUES ('7759', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:17:09');
INSERT INTO `sys_operation_logs` VALUES ('7760', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"纵向拖动排序\",\"class_id\":1,\"tagsArr\":[11,8,3],\"cover_url\":\"/public/uploads/a20a581f88ca12dd3bf761a5e9f56ec1.jpg\",\"is_top\":false,\"content\":\"**html代码**\\n\\n```html:run\\n<!DOCTYPEhtml>\\n<htmllang=\\\"en\\\">\\n<head>\\n\\t<metacharset=\\\"UTF-8\\\">\\n\\t<title>纵向拖拽</', '2020-06-23 19:17:16');
INSERT INTO `sys_operation_logs` VALUES ('7761', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"4\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:17:16');
INSERT INTO `sys_operation_logs` VALUES ('7762', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:18:00');
INSERT INTO `sys_operation_logs` VALUES ('7763', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:18:00');
INSERT INTO `sys_operation_logs` VALUES ('7764', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:18:18');
INSERT INTO `sys_operation_logs` VALUES ('7765', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"javascript原生滑动解锁\",\"class_id\":1,\"tagsArr\":[8,1],\"cover_url\":\"/public/uploads/261d3a5215d7dba12b086161c17bb697.jpeg\",\"is_top\":false,\"content\":\"**html代码**\\n\\n```html:run\\n<!DOCTYPEhtml>\\n<htmllang=\\\"en\\\">\\n<head>\\n\\t<metacharset=\\\"utf-8\\\">\\n\\t<styl', '2020-06-23 19:18:22');
INSERT INTO `sys_operation_logs` VALUES ('7766', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"4\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:18:22');
INSERT INTO `sys_operation_logs` VALUES ('7767', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-23 19:18:49');
INSERT INTO `sys_operation_logs` VALUES ('7768', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-23 19:18:49');
INSERT INTO `sys_operation_logs` VALUES ('7769', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:19:03');
INSERT INTO `sys_operation_logs` VALUES ('7770', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-23 19:25:36');
INSERT INTO `sys_operation_logs` VALUES ('7771', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"发布一个自己的NPM包\",\"class_id\":5,\"tagsArr\":[3,4,12],\"cover_url\":\"/public/uploads/u=1779279395,2616950993&fm=26&gp=0.jpg\",\"is_top\":false,\"content\":\"npm账号\\n```\\n用户名:wangxiping\\n密码：Wang101029xixi.\\n```\\n###npm包:wang-sum-number已经上传\\n\\ngithub:https://github', '2020-06-23 19:25:48');
INSERT INTO `sys_operation_logs` VALUES ('7772', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"4\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-23 19:25:48');
INSERT INTO `sys_operation_logs` VALUES ('7773', '44', '黑夜男神', '[GET] /api/getUserMenuList', '14.23.92.186', '', '2020-06-29 14:54:21');
INSERT INTO `sys_operation_logs` VALUES ('7774', '44', '黑夜男神', '[GET] /api/user/list', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-29 14:54:22');
INSERT INTO `sys_operation_logs` VALUES ('7775', '44', '黑夜男神', '[GET] /api/role/list', '14.23.92.186', '', '2020-06-29 14:54:22');
INSERT INTO `sys_operation_logs` VALUES ('7776', '44', '黑夜男神', '[PUT] /api/user/updateUser', '14.23.92.186', '{\"user_id\":44,\"nick_name\":\"黑夜男神\",\"password\":\"101029xixi.\",\"email\":\"395604192@qq.com\",\"phone\":\"13076897374\",\"avatar\":\"https://uploadfile.huiyi8.com/up/25/70/a1/2570a194efbc9fcd2ac7f94530dfe482.jpg\",\"role_id\":[1,2]}', '2020-06-29 14:54:33');
INSERT INTO `sys_operation_logs` VALUES ('7777', '44', '黑夜男神', '[GET] /api/user/list', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-29 14:54:33');
INSERT INTO `sys_operation_logs` VALUES ('7778', '44', '黑夜男神', '[GET] /api/role/list', '14.23.92.186', '', '2020-06-29 14:54:36');
INSERT INTO `sys_operation_logs` VALUES ('7779', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\"}', '2020-06-29 14:54:37');
INSERT INTO `sys_operation_logs` VALUES ('7780', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-29 14:54:37');
INSERT INTO `sys_operation_logs` VALUES ('7781', '44', '黑夜男神', '[GET] /api/getUserMenuList', '14.23.92.186', '', '2020-06-29 14:55:05');
INSERT INTO `sys_operation_logs` VALUES ('7782', '44', '黑夜男神', '[GET] /api/menu/list/', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\"}', '2020-06-29 14:55:05');
INSERT INTO `sys_operation_logs` VALUES ('7783', '44', '黑夜男神', '[GET] /api/menu/selectMenuList', '14.23.92.186', '', '2020-06-29 14:55:06');
INSERT INTO `sys_operation_logs` VALUES ('7784', '44', '黑夜男神', '[GET] /api/user/list', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-29 14:55:08');
INSERT INTO `sys_operation_logs` VALUES ('7785', '44', '黑夜男神', '[GET] /api/role/list', '14.23.92.186', '', '2020-06-29 14:55:08');
INSERT INTO `sys_operation_logs` VALUES ('7786', '44', '黑夜男神', '[GET] /api/role/list', '14.23.92.186', '', '2020-06-29 14:55:09');
INSERT INTO `sys_operation_logs` VALUES ('7787', '44', '黑夜男神', '[GET] /api/operationLos/list', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\"}', '2020-06-29 14:55:11');
INSERT INTO `sys_operation_logs` VALUES ('7788', '44', '黑夜男神', '[GET] /api/loginLogs/list', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\"}', '2020-06-29 14:55:11');
INSERT INTO `sys_operation_logs` VALUES ('7789', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-29 14:55:15');
INSERT INTO `sys_operation_logs` VALUES ('7790', '44', '黑夜男神', '[GET] /api/blogs/articleClassList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-29 14:55:16');
INSERT INTO `sys_operation_logs` VALUES ('7791', '44', '黑夜男神', '[GET] /api/blogs/commentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-29 14:55:16');
INSERT INTO `sys_operation_logs` VALUES ('7792', '44', '黑夜男神', '[GET] /api/blogs/articleTagsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-29 14:55:18');
INSERT INTO `sys_operation_logs` VALUES ('7793', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-29 14:55:37');
INSERT INTO `sys_operation_logs` VALUES ('7794', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-29 15:00:20');
INSERT INTO `sys_operation_logs` VALUES ('7795', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"3\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-29 15:00:21');
INSERT INTO `sys_operation_logs` VALUES ('7796', '44', '黑夜男神', '[GET] /api/getUserMenuList', '14.23.92.186', '', '2020-06-30 09:44:33');
INSERT INTO `sys_operation_logs` VALUES ('7797', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 09:44:41');
INSERT INTO `sys_operation_logs` VALUES ('7798', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-30 09:44:43');
INSERT INTO `sys_operation_logs` VALUES ('7799', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-30 09:44:43');
INSERT INTO `sys_operation_logs` VALUES ('7800', '44', '黑夜男神', '[GET] /api/getUserMenuList', '14.23.92.186', '', '2020-06-30 10:46:12');
INSERT INTO `sys_operation_logs` VALUES ('7801', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 10:46:12');
INSERT INTO `sys_operation_logs` VALUES ('7802', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-30 10:46:12');
INSERT INTO `sys_operation_logs` VALUES ('7803', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-30 10:46:12');
INSERT INTO `sys_operation_logs` VALUES ('7804', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-30 10:46:18');
INSERT INTO `sys_operation_logs` VALUES ('7805', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"mysql查看当前使用的配置文件my.cnf的方法\",\"class_id\":3,\"tagsArr\":[12,3],\"cover_url\":\"/public/uploads/3b22337e04ce438248768f9d59941f30_u=3160244586,1161773702&fm=193.jpg\",\"is_top\":false,\"content\":\"```\\nmy.cnf是mysql启动时加载的配置文件，一般会放在mysql的安装目录中，用户也可以放在其他目录加载。\\n\\n安', '2020-06-30 10:51:12');
INSERT INTO `sys_operation_logs` VALUES ('7806', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 10:51:13');
INSERT INTO `sys_operation_logs` VALUES ('7807', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-30 10:58:55');
INSERT INTO `sys_operation_logs` VALUES ('7808', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-30 10:58:55');
INSERT INTO `sys_operation_logs` VALUES ('7809', '44', '黑夜男神', '[POST] /api/single/uploadImage/', '14.23.92.186', '', '2020-06-30 10:59:05');
INSERT INTO `sys_operation_logs` VALUES ('7810', '44', '黑夜男神', '[POST] /api/blogs/createArticle', '14.23.92.186', '{\"title\":\"mysql配置指定ip可访问\",\"class_id\":3,\"tagsArr\":[4,12],\"cover_url\":\"/public/uploads/3b22337e04ce438248768f9d59941f30_u=3160244586,1161773702&fm=193.jpg\",\"is_top\":false,\"content\":\"当我们的服务器在公网的环境时要注意做好ip的限制和隔离，最好的办法是先做好外网端口访问限制，将3306端口限制只能内网访问，可以通过iptables做', '2020-06-30 11:00:31');
INSERT INTO `sys_operation_logs` VALUES ('7811', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:00:31');
INSERT INTO `sys_operation_logs` VALUES ('7812', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"4\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:07:44');
INSERT INTO `sys_operation_logs` VALUES ('7813', '44', '黑夜男神', '[GET] /api/blogs/articleClassListAll', '14.23.92.186', '', '2020-06-30 11:07:50');
INSERT INTO `sys_operation_logs` VALUES ('7814', '44', '黑夜男神', '[GET] /api/blogs/articleTagsListAll', '14.23.92.186', '', '2020-06-30 11:07:50');
INSERT INTO `sys_operation_logs` VALUES ('7815', '44', '黑夜男神', '[GET] /api/blogs/articleDetail', '14.23.92.186', '{\"article_id\":\"70\"}', '2020-06-30 11:07:50');
INSERT INTO `sys_operation_logs` VALUES ('7816', '44', '黑夜男神', '[PUT] /api/blogs/updateArticle', '14.23.92.186', '{\"title\":\"mysql配置指定ip可访问\",\"class_id\":3,\"tagsArr\":[4,12],\"cover_url\":\"/public/uploads/3b22337e04ce438248768f9d59941f30_u=3160244586,1161773702&fm=193.jpg\",\"is_top\":false,\"content\":\"当我们的服务器在公网的环境时要注意做好ip的限制和隔离，最好的办法是先做好外网端口访问限制，将3306端口限制只能内网访问，可以通过iptables做', '2020-06-30 11:09:13');
INSERT INTO `sys_operation_logs` VALUES ('7817', '44', '黑夜男神', '[GET] /api/blogs/articleList', '14.23.92.186', '{\"page\":\"4\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:09:13');
INSERT INTO `sys_operation_logs` VALUES ('7818', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:13:53');
INSERT INTO `sys_operation_logs` VALUES ('7819', '44', '黑夜男神', '[POST] /api/blogs/createMsgCommentsList', '14.23.92.186', '{\"parent_id\":47,\"user_id\":\"黑夜男神\",\"comment_content\":\"@TanJia恩恩\",\"comment_author_email\":\"395604192@qq.com\",\"comment_author\":\"黑夜男神\"}', '2020-06-30 11:14:02');
INSERT INTO `sys_operation_logs` VALUES ('7820', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:14:02');
INSERT INTO `sys_operation_logs` VALUES ('7821', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:14:02');
INSERT INTO `sys_operation_logs` VALUES ('7822', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:26:25');
INSERT INTO `sys_operation_logs` VALUES ('7823', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:26:31');
INSERT INTO `sys_operation_logs` VALUES ('7824', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:26:39');
INSERT INTO `sys_operation_logs` VALUES ('7825', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:26:42');
INSERT INTO `sys_operation_logs` VALUES ('7826', '44', '黑夜男神', '[POST] /api/blogs/createMsgCommentsList', '14.23.92.186', '{\"parent_id\":46,\"user_id\":\"黑夜男神\",\"comment_content\":\"@zxhuan能不能正常点好好说话\",\"comment_author_email\":\"395604192@qq.com\",\"comment_author\":\"黑夜男神\"}', '2020-06-30 11:26:56');
INSERT INTO `sys_operation_logs` VALUES ('7827', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:26:56');
INSERT INTO `sys_operation_logs` VALUES ('7828', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:26:56');
INSERT INTO `sys_operation_logs` VALUES ('7829', '44', '黑夜男神', '[POST] /api/blogs/createMsgCommentsList', '14.23.92.186', '{\"parent_id\":51,\"user_id\":\"黑夜男神\",\"comment_content\":\"@TanJia加起来！\",\"comment_author_email\":\"395604192@qq.com\",\"comment_author\":\"黑夜男神\"}', '2020-06-30 11:28:30');
INSERT INTO `sys_operation_logs` VALUES ('7830', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:28:30');
INSERT INTO `sys_operation_logs` VALUES ('7831', '44', '黑夜男神', '[GET] /api/blogs/msgCommentsList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:28:30');
INSERT INTO `sys_operation_logs` VALUES ('7832', '44', '黑夜男神', '[GET] /api/blogs/relatedLinksList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:55:32');
INSERT INTO `sys_operation_logs` VALUES ('7833', '44', '黑夜男神', '[POST] /api/blogs/createRelatedLinksList', '14.23.92.186', '{\"id\":\"\",\"nick_name\":\"SSCS\",\"url\":\"https://www.sscrazy.com/\",\"icon\":\"https://leo-1258096517.cos.ap-shanghai.myqcloud.com/sscs/logo1.png\",\"description\":\"如果不能保持永恒，那就追求一刹那的光辉！\"}', '2020-06-30 11:56:03');
INSERT INTO `sys_operation_logs` VALUES ('7834', '44', '黑夜男神', '[GET] /api/blogs/relatedLinksList', '14.23.92.186', '{\"page\":\"1\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:56:03');
INSERT INTO `sys_operation_logs` VALUES ('7835', '44', '黑夜男神', '[GET] /api/blogs/relatedLinksList', '14.23.92.186', '{\"page\":\"2\",\"pageSize\":\"10\",\"currentPage\":\"1\"}', '2020-06-30 11:56:07');

-- ----------------------------
-- Table structure for sys_resource
-- ----------------------------
DROP TABLE IF EXISTS `sys_resource`;
CREATE TABLE `sys_resource` (
  `res_id` int(10) NOT NULL AUTO_INCREMENT,
  `parent_id` int(10) DEFAULT NULL,
  `res_name` varchar(50) DEFAULT NULL,
  `res_icon` varchar(50) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `state` tinyint(4) DEFAULT NULL,
  `res_code` varchar(50) DEFAULT NULL,
  `type` tinyint(4) DEFAULT NULL,
  `component` varchar(50) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `sort` bigint(20) DEFAULT NULL,
  `perms` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`res_id`)
) ENGINE=InnoDB AUTO_INCREMENT=115 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_resource
-- ----------------------------
INSERT INTO `sys_resource` VALUES ('0', null, '系统菜单', null, '2020-04-15 12:19:49', null, 'root', '1', null, '根节点不能操作', null, null);
INSERT INTO `sys_resource` VALUES ('1', '0', '博客管理', 'el-icon-document', '2020-03-10 17:51:37', '1', 'wz', '1', '/', '目录', '3', '');
INSERT INTO `sys_resource` VALUES ('2', '0', '系统管理', 'el-icon-setting', '2020-03-19 18:05:20', '1', 'xt', '1', '/', '目录', '1', '');
INSERT INTO `sys_resource` VALUES ('4', '0', '日志管理', 'el-icon-user ', '2020-03-16 15:46:18', '1', 'rz', '1', '/', '目录', '2', '');
INSERT INTO `sys_resource` VALUES ('5', '1', '文章管理', 'el-icon-notebook-2', '2020-03-17 15:46:21', '1', null, '2', 'blogArticleList', null, '0', null);
INSERT INTO `sys_resource` VALUES ('7', '2', '用户管理', 'el-icon-user-solid', '2020-03-11 15:33:43', '1', '', '2', 'userList', 'null', '0', '');
INSERT INTO `sys_resource` VALUES ('8', '4', '登录日志', 'el-icon-tickets', '2020-03-03 15:46:06', '1', 'Logs', '2', 'loginLogs', '登录记录', '0', '');
INSERT INTO `sys_resource` VALUES ('9', '2', '资源管理', 'fa fa-reorder', '2020-03-20 13:57:01', '1', '', '2', 'menuList', 'null', '0', '');
INSERT INTO `sys_resource` VALUES ('10', '2', '角色管理', 'fa fa-user', '2020-03-25 14:02:28', '1', 'xt', '2', 'roleList', 'null', '0', '');
INSERT INTO `sys_resource` VALUES ('35', '0', '测试菜单', 'el-icon-eleme', '2020-04-15 21:25:56', '1', 'cs', '1', '/', '目录', '5', '');
INSERT INTO `sys_resource` VALUES ('38', '4', '请求日志', 'fa fa-send-o', '2020-04-17 18:02:20', '1', 'action', '2', 'operationLogs', '', '0', null);
INSERT INTO `sys_resource` VALUES ('40', '1', '分类管理', 'el-icon-s-grid', '2020-04-18 16:24:58', '1', 'hazw', '2', 'blogClassList', '', '1', null);
INSERT INTO `sys_resource` VALUES ('41', '35', '测试列表', 'el-icon-loading', '2020-04-19 22:14:19', '1', 'test', '2', 'test', '', '111', '');
INSERT INTO `sys_resource` VALUES ('80', '41', '按钮', '', '2020-04-22 11:44:37', '1', 'btn', '3', '', '121', '1', 'sys:logs:update');
INSERT INTO `sys_resource` VALUES ('82', '41', '创建', '', '2020-04-22 16:18:12', '1', 'c', '3', '', '21', '1', 'sys:logs:create');
INSERT INTO `sys_resource` VALUES ('83', '7', '添加', '', '2020-04-23 15:17:56', '1', 'create', '3', '', '按钮', '1', 'sys:user:create');
INSERT INTO `sys_resource` VALUES ('84', '7', '修改', '', '2020-04-23 15:29:09', '1', 'update', '3', '', '1', '1', 'sys:user:update');
INSERT INTO `sys_resource` VALUES ('85', '7', '删除', '', '2020-04-23 15:30:12', '1', 'delete', '3', '', '1', '1', 'sys:user:delete');
INSERT INTO `sys_resource` VALUES ('86', '10', '添加', '', '2020-04-23 15:33:05', '1', 'create', '3', '', '1', '1', 'sys:role:create');
INSERT INTO `sys_resource` VALUES ('87', '10', '修改', '', '2020-04-23 15:35:23', '1', 'update', '3', '', '2', '2', 'sys:role:update');
INSERT INTO `sys_resource` VALUES ('88', '10', '删除', '', '2020-04-23 15:35:55', '1', 'delete', '3', '', '121', '3', 'sys:role:delete');
INSERT INTO `sys_resource` VALUES ('89', '9', '编辑', '', '2020-04-24 13:43:55', '1', 'edit', '3', '', '121', '12', 'sys:menu:update');
INSERT INTO `sys_resource` VALUES ('90', '9', '删除', '', '2020-04-24 13:44:29', '1', 'delete', '3', '', '12', '2', 'sys:menu:delete');
INSERT INTO `sys_resource` VALUES ('92', '10', '查看', '', '2020-04-24 13:47:07', '1', 'look', '3', '', '222', '122', 'sys:role:lookPerms');
INSERT INTO `sys_resource` VALUES ('93', '9', '添加', '', '2020-04-24 13:51:26', '1', 'create', '3', '', '2', '223', 'sys:menu:create');
INSERT INTO `sys_resource` VALUES ('94', '10', '编辑', '', '2020-04-24 14:02:01', '1', 'edit', '3', '', '1', '222', 'sys:role:editPerms');
INSERT INTO `sys_resource` VALUES ('95', '9', '列表', '', '2020-04-25 11:04:32', '1', 'list', '3', '', '1', '23', 'sys:menu:list');
INSERT INTO `sys_resource` VALUES ('96', '7', '列表', '', '2020-04-25 11:15:12', '1', 'list', '3', '', '', '12', 'sys:user:list');
INSERT INTO `sys_resource` VALUES ('97', '10', '列表', '', '2020-04-25 20:03:32', '1', 'list', '3', '', '2', '2', 'sys:role:list');
INSERT INTO `sys_resource` VALUES ('98', '8', '列表', '', '2020-04-25 20:25:21', '1', 'list', '3', '', '', '1', 'sys:logs:list');
INSERT INTO `sys_resource` VALUES ('99', '1', '标签管理', 'fa fa-tags', '2020-05-12 15:33:07', '1', '', '2', 'blogTagsList', '标签', '1', '');
INSERT INTO `sys_resource` VALUES ('101', '0', '网站功能', 'el-icon-coin', '2020-05-13 19:04:04', '1', '', '1', '', '', '4', '');
INSERT INTO `sys_resource` VALUES ('102', '101', '友情链接', 'fa fa-chain', '2020-05-13 19:04:46', '1', '', '2', 'relatedLinksList', '', '0', '');
INSERT INTO `sys_resource` VALUES ('103', '101', '留言管理', '', '2020-05-13 19:09:14', '1', '', '2', 'messageComments', '', '0', '');
INSERT INTO `sys_resource` VALUES ('104', '101', '广告管理', '', '2020-05-13 19:09:39', '1', '', '2', '', '', '0', '');
INSERT INTO `sys_resource` VALUES ('106', '5', '添加', '', '2020-05-14 16:00:43', '1', '', '3', '/', '', '0', 'blog:article:add');
INSERT INTO `sys_resource` VALUES ('108', '1', '评论管理', 'el-icon-chat-dot-round', '2020-05-20 17:02:28', '1', 'pl', '2', 'blogCommentsList', '', '34', '');
INSERT INTO `sys_resource` VALUES ('109', '5', '删除', '', '2020-06-13 14:53:44', '1', '', '3', '/', '', '0', 'blog:article:delete');
INSERT INTO `sys_resource` VALUES ('110', '5', '更新', '', '2020-06-13 14:55:15', '1', '', '3', '/', '', '0', 'blog:article:update');
INSERT INTO `sys_resource` VALUES ('111', '5', '列表', 'fa fa-wpexplorer', '2020-06-13 14:56:52', '1', '', '3', '/', '', '0', 'blog:article:list');
INSERT INTO `sys_resource` VALUES ('112', '5', '编辑', '', '2020-06-13 15:04:51', '1', '', '3', '/', '', '0', 'blog:article:edit');

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role` (
  `role_id` int(8) NOT NULL AUTO_INCREMENT,
  `role_code` varchar(32) NOT NULL,
  `role_name` varchar(32) NOT NULL,
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES ('1', 'c', '超级管理员');
INSERT INTO `sys_role` VALUES ('2', 'g', '管理员');
INSERT INTO `sys_role` VALUES ('3', 'fk', '访客');
INSERT INTO `sys_role` VALUES ('5', 'hy', '会员');

-- ----------------------------
-- Table structure for sys_role_permmision
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_permmision`;
CREATE TABLE `sys_role_permmision` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `role_id` int(100) DEFAULT NULL,
  `res_id` int(100) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `role_id` (`role_id`),
  KEY `res_id` (`res_id`),
  CONSTRAINT `FK_sys_res` FOREIGN KEY (`res_id`) REFERENCES `sys_resource` (`res_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_sys_role` FOREIGN KEY (`role_id`) REFERENCES `sys_role` (`role_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=908 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_role_permmision
-- ----------------------------
INSERT INTO `sys_role_permmision` VALUES ('170', '5', '1', null);
INSERT INTO `sys_role_permmision` VALUES ('171', '5', '5', null);
INSERT INTO `sys_role_permmision` VALUES ('173', '5', '4', null);
INSERT INTO `sys_role_permmision` VALUES ('174', '5', '8', null);
INSERT INTO `sys_role_permmision` VALUES ('201', '3', '1', null);
INSERT INTO `sys_role_permmision` VALUES ('202', '3', '5', null);
INSERT INTO `sys_role_permmision` VALUES ('658', '2', '1', null);
INSERT INTO `sys_role_permmision` VALUES ('659', '2', '5', null);
INSERT INTO `sys_role_permmision` VALUES ('660', '2', '2', null);
INSERT INTO `sys_role_permmision` VALUES ('661', '2', '7', null);
INSERT INTO `sys_role_permmision` VALUES ('662', '2', '97', null);
INSERT INTO `sys_role_permmision` VALUES ('664', '2', '4', null);
INSERT INTO `sys_role_permmision` VALUES ('665', '2', '8', null);
INSERT INTO `sys_role_permmision` VALUES ('666', '2', '98', null);
INSERT INTO `sys_role_permmision` VALUES ('868', '1', '2', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('869', '1', '7', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('870', '1', '83', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('871', '1', '84', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('872', '1', '85', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('873', '1', '96', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('874', '1', '9', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('875', '1', '90', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('876', '1', '89', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('877', '1', '95', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('878', '1', '93', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('879', '1', '10', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('880', '1', '86', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('881', '1', '87', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('882', '1', '97', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('883', '1', '88', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('884', '1', '92', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('885', '1', '94', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('886', '1', '4', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('887', '1', '8', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('888', '1', '98', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('889', '1', '38', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('890', '1', '1', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('891', '1', '5', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('892', '1', '106', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('893', '1', '109', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('894', '1', '110', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('895', '1', '111', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('896', '1', '112', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('897', '1', '40', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('898', '1', '99', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('899', '1', '108', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('900', '1', '101', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('901', '1', '104', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('902', '1', '102', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('903', '1', '103', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('904', '1', '35', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('905', '1', '41', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('906', '1', '80', '2020-06-13 15:09:38');
INSERT INTO `sys_role_permmision` VALUES ('907', '1', '82', '2020-06-13 15:09:38');

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user` (
  `user_id` int(10) NOT NULL AUTO_INCREMENT,
  `nick_name` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `phone` varchar(32) DEFAULT NULL,
  `state` tinyint(4) DEFAULT '1',
  `avatar` varchar(255) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `update_id` int(10) DEFAULT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `user_phone` (`phone`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES ('3', '曹操', '1d7f33f8216eca12', '398127382@qq.com', '13610310492', '0', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '44');
INSERT INTO `sys_user` VALUES ('9', '王者1', '1d7f33f8216eca12', '22223@qq.com', '123548787878', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '44');
INSERT INTO `sys_user` VALUES ('21', '小菊', '1d7f33f8216eca12', '2a4sdasd@qq.com', '7782176', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '44');
INSERT INTO `sys_user` VALUES ('28', '亚瑟', '1d7f33f8216eca12', 'wangxiping@bangood.com', '1359885745', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '44');
INSERT INTO `sys_user` VALUES ('29', '马克', '1d7f33f8216eca12', '12345646546@qq.com', '1307782189', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '44');
INSERT INTO `sys_user` VALUES ('30', '安其拉·', '1d7f33f8216eca12', '3545454545@qq.com', '1182189745', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '1');
INSERT INTO `sys_user` VALUES ('31', '吕布', '1d7f33f8216eca12', '354465465465@qq.com', '13599665878', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '1');
INSERT INTO `sys_user` VALUES ('32', '元歌', '1d7f33f8216eca12', '39564545@qq.com', '12312312', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '1');
INSERT INTO `sys_user` VALUES ('33', 'linchaoliang', '1d7f33f8216eca12', '395604192@qq.com', '520', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '33');
INSERT INTO `sys_user` VALUES ('34', '夏侯惇', '1d7f33f8216eca12', '12', '121', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '1');
INSERT INTO `sys_user` VALUES ('41', '百里', '1d7f33f8216eca12', '1212', '121123123', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:22', '1');
INSERT INTO `sys_user` VALUES ('42', '百里', '1d7f33f8216eca12', '1212', '13670135458', '1', 'public/upload/csde_1589175881000.jpeg', '2020-04-15 22:04:38', '1');
INSERT INTO `sys_user` VALUES ('43', '甄姬', '1d7f33f8216eca12', '12', '1154789', '1', 'public/uploads/csde_1589175881000.jpeg', '2020-04-27 12:38:13', '44');
INSERT INTO `sys_user` VALUES ('44', '黑夜男神', '85bc30c1bcfda79b7851b7b461b0c715', '395604192@qq.com', '13076897374', '1', 'https://uploadfile.huiyi8.com/up/25/70/a1/2570a194efbc9fcd2ac7f94530dfe482.jpg', '2020-05-11 22:04:22', '44');
INSERT INTO `sys_user` VALUES ('45', '项羽', '1d7f33f8216eca12', '212133@qq.com', '1587545654', '1', '', '2020-05-11 19:41:36', '44');
INSERT INTO `sys_user` VALUES ('46', '白起', '1d7f33f8216eca12', '123123123@qq.com', '15787845489', '1', '', '2020-05-11 19:36:13', '1');
INSERT INTO `sys_user` VALUES ('47', '赵云', '1d7f33f8216eca12', '123', '1324535234323', '1', '1231', '2020-05-18 19:37:50', '44');

-- ----------------------------
-- Table structure for sys_user_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `user_id` int(10) DEFAULT NULL,
  `role_id` int(10) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `role_id` (`role_id`),
  CONSTRAINT `FK_sys_role_id` FOREIGN KEY (`role_id`) REFERENCES `sys_role` (`role_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_sys_user_id` FOREIGN KEY (`user_id`) REFERENCES `sys_user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_user_role
-- ----------------------------
INSERT INTO `sys_user_role` VALUES ('4', '3', '2');
INSERT INTO `sys_user_role` VALUES ('10', '21', '3');
INSERT INTO `sys_user_role` VALUES ('11', '21', '5');
INSERT INTO `sys_user_role` VALUES ('28', '9', '3');
INSERT INTO `sys_user_role` VALUES ('29', '9', '5');
INSERT INTO `sys_user_role` VALUES ('30', '28', '5');
INSERT INTO `sys_user_role` VALUES ('31', '29', '3');
INSERT INTO `sys_user_role` VALUES ('32', '30', '3');
INSERT INTO `sys_user_role` VALUES ('36', '32', '5');
INSERT INTO `sys_user_role` VALUES ('37', '33', '1');
INSERT INTO `sys_user_role` VALUES ('38', '33', '2');
INSERT INTO `sys_user_role` VALUES ('39', '34', '3');
INSERT INTO `sys_user_role` VALUES ('40', '42', '3');
INSERT INTO `sys_user_role` VALUES ('42', '31', '3');
INSERT INTO `sys_user_role` VALUES ('48', '43', '3');
INSERT INTO `sys_user_role` VALUES ('49', '44', '1');
INSERT INTO `sys_user_role` VALUES ('50', '41', '5');
INSERT INTO `sys_user_role` VALUES ('51', '45', '5');
INSERT INTO `sys_user_role` VALUES ('52', '46', '5');
INSERT INTO `sys_user_role` VALUES ('53', '47', '3');
INSERT INTO `sys_user_role` VALUES ('54', '44', '2');

-- ----------------------------
-- Table structure for WARNING
-- ----------------------------
DROP TABLE IF EXISTS `WARNING`;
CREATE TABLE `WARNING` (
  `id` int(11) NOT NULL,
  `warning` text COLLATE utf8_unicode_ci,
  `website` text COLLATE utf8_unicode_ci,
  `token` text COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of WARNING
-- ----------------------------
INSERT INTO `WARNING` VALUES ('1', 'To recover your lost databases and avoid leaking it: visit http://dbrestore.to and enter your unique token a122a9fb40c0b577 and pay the required amount of Bitcoin to get it back. Databases that we have: blog, PLEASE_READ_ME_VVV. Your databases are downloaded and backed up on our servers. If we dont receive your payment in the next 9 Days, we will sell your database to the highest bidder or use them otherwise.', 'http://dbrestore.to', 'a122a9fb40c0b577');
